Index: post-service/src/main/java/vn/ctu/edu/postservice/dto/AuthorInfo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package vn.ctu.edu.postservice.dto;\r\n\r\n\r\nimport lombok.AllArgsConstructor;\r\nimport lombok.Builder;\r\nimport lombok.Data;\r\nimport lombok.NoArgsConstructor;\r\n\r\n@Data\r\n@AllArgsConstructor\r\n@NoArgsConstructor\r\n@Builder\r\npublic class AuthorInfo {\r\n    private String id;\r\n    private String name;\r\n    private String avatarUrl;\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/post-service/src/main/java/vn/ctu/edu/postservice/dto/AuthorInfo.java b/post-service/src/main/java/vn/ctu/edu/postservice/dto/AuthorInfo.java
--- a/post-service/src/main/java/vn/ctu/edu/postservice/dto/AuthorInfo.java	(revision f08f1d49d319bbab2efbea29650ac17cd6ac4cf8)
+++ b/post-service/src/main/java/vn/ctu/edu/postservice/dto/AuthorInfo.java	(date 1754053522328)
@@ -13,5 +13,5 @@
 public class AuthorInfo {
     private String id;
     private String name;
-    private String avatarUrl;
+    private String avatar;
 }
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"AutoImportSettings\">\r\n    <option name=\"autoReloadType\" value=\"SELECTIVE\" />\r\n  </component>\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"45c2871e-0a67-4aea-8968-e03f2e8fc23f\" name=\"Changes\" comment=\"Update profile v2\">\r\n      <change afterPath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/client/UserServiceClient.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/dto/AuthorInfo.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/dto/request/InteractionRequest.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/security/AuthenticatedUser.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/security/AuthenticationInterceptor.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/security/SecurityContextHolder.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/security/annotation/RequireAuth.java\" afterDir=\"false\" />\r\n      <change afterPath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/security/aspect/AuthorizationAspect.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/client-frontend/src/components/layout/Layout.tsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/client-frontend/src/components/layout/Layout.tsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/client-frontend/src/components/post/CreatePostForm.tsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/client-frontend/src/components/post/CreatePostForm.tsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/client-frontend/src/components/post/PostCard.tsx\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/client-frontend/src/components/post/PostCard.tsx\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/client-frontend/src/types/index.ts\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/client-frontend/src/types/index.ts\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/database/neo4j/logs/debug.log\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/database/neo4j/logs/debug.log\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/database/neo4j/logs/neo4j.log\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/database/neo4j/logs/neo4j.log\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/post-service/pom.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/post-service/pom.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/client/MediaServiceClient.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/client/MediaServiceClient.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/controller/PostController.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/controller/PostController.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/dto/request/CreateCommentRequest.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/dto/request/CommentRequest.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/dto/request/CreateInteractionRequest.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/dto/request/CreatePostRequest.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/dto/request/PostRequest.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/dto/request/UpdatePostRequest.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/entity/CommentEntity.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/entity/CommentEntity.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/entity/InteractionEntity.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/entity/InteractionEntity.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/entity/PostEntity.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/entity/PostEntity.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/repository/InteractionRepository.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/repository/InteractionRepository.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/service/CommentService.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/service/CommentService.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/service/InteractionService.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/service/InteractionService.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/service/PostService.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/service/PostService.java\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"Dockerfile\" />\r\n        <option value=\"FastAPI main\" />\r\n        <option value=\"FastAPI test_main\" />\r\n        <option value=\"TypeScript File\" />\r\n        <option value=\"Class\" />\r\n        <option value=\"Interface\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <favorite-branches>\r\n      <branch-storage>\r\n        <map>\r\n          <entry type=\"LOCAL\">\r\n            <value>\r\n              <list>\r\n                <branch-info repo=\"$PROJECT_DIR$\" source=\"fix-database\" />\r\n              </list>\r\n            </value>\r\n          </entry>\r\n        </map>\r\n      </branch-storage>\r\n    </favorite-branches>\r\n    <option name=\"RECENT_BRANCH_BY_REPOSITORY\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$\" value=\"fix-database\" />\r\n      </map>\r\n    </option>\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$\" />\r\n    <option name=\"RESET_MODE\" value=\"HARD\" />\r\n  </component>\r\n  <component name=\"GitHubPullRequestSearchHistory\">{\r\n  &quot;lastFilter&quot;: {\r\n    &quot;state&quot;: &quot;OPEN&quot;,\r\n    &quot;assignee&quot;: &quot;baohkt2&quot;\r\n  }\r\n}</component>\r\n  <component name=\"GithubPullRequestsUISettings\">{\r\n  &quot;selectedUrlAndAccountId&quot;: {\r\n    &quot;url&quot;: &quot;https://github.com/baohkt2/CTU-Connect-Backend.git&quot;,\r\n    &quot;accountId&quot;: &quot;29367579-14a9-4fa5-b6e3-d9686d39984a&quot;\r\n  }\r\n}</component>\r\n  <component name=\"HighlightingSettingsPerFile\">\r\n    <setting file=\"mock:///JetClient Request Console\" root0=\"SKIP_INSPECTION\" />\r\n    <setting file=\"file://$USER_HOME$/AppData/Local/JetBrains/IntelliJIdea2025.1/tmp/jetclient/scripts/d71a7eaf/Drafts_folder-post-response_drafts.js\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$USER_HOME$/AppData/Local/JetBrains/IntelliJIdea2025.1/tmp/jetclient/scripts/d71a7eaf/Drafts_folder-pre-request_drafts.js\" root0=\"FORCE_HIGHLIGHTING\" />\r\n    <setting file=\"file://$PROJECT_DIR$/database/neo4j/tasks/init.cypher\" root0=\"FORCE_HIGHLIGHTING\" />\r\n  </component>\r\n  <component name=\"KubernetesApiPersistence\">{}</component>\r\n  <component name=\"KubernetesApiProvider\">{\r\n  &quot;isMigrated&quot;: true\r\n}</component>\r\n  <component name=\"ProblemsViewState\">\r\n    <option name=\"selectedTabId\" value=\"CurrentFile\" />\r\n  </component>\r\n  <component name=\"ProjectColorInfo\">{\r\n  &quot;associatedIndex&quot;: 1\r\n}</component>\r\n  <component name=\"ProjectId\" id=\"2yiufTl5YpkGJt6HiYzfaueoifp\" />\r\n  <component name=\"ProjectLevelVcsManager\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\"><![CDATA[{\r\n  \"keyToString\": {\r\n    \"Application.JwtKeyGeneratorUtility.executor\": \"Run\",\r\n    \"Docker.docker-compose.yml.adminer: Compose Deployment.executor\": \"Run\",\r\n    \"Docker.docker-compose.yml.api-gateway: Compose Deployment.executor\": \"Run\",\r\n    \"Docker.docker-compose.yml.auth-service: Compose Deployment.executor\": \"Run\",\r\n    \"Docker.docker-compose.yml.auth_db: Compose Deployment.executor\": \"Run\",\r\n    \"Docker.docker-compose.yml.media-service: Compose Deployment.executor\": \"Run\",\r\n    \"Docker.docker-compose.yml.media_db: Compose Deployment.executor\": \"Run\",\r\n    \"Docker.docker-compose.yml.neo4j: Compose Deployment.executor\": \"Run\",\r\n    \"Docker.docker-compose.yml.post-service: Compose Deployment.executor\": \"Run\",\r\n    \"Docker.docker-compose.yml.postgres-auth: Compose Deployment.executor\": \"Run\",\r\n    \"Docker.docker-compose.yml.user-service: Compose Deployment.executor\": \"Run\",\r\n    \"Docker.docker-compose.yml: Compose Deployment.executor\": \"Run\",\r\n    \"Docker.eureka-server/Dockerfile build.executor\": \"Run\",\r\n    \"Downloaded.Files.Path.Enabled\": \"false\",\r\n    \"JUnit.AuthControllerTest.executor\": \"Run\",\r\n    \"JUnit.AuthServiceTest.executor\": \"Run\",\r\n    \"JUnit.EmailServiceTest.executor\": \"Run\",\r\n    \"JUnit.JwtTokenProviderTest.executor\": \"Run\",\r\n    \"ModuleVcsDetector.initialDetectionPerformed\": \"true\",\r\n    \"Notification.DisplayName-DoNotAsk-DatabaseConfigFileWatcher.found\": \"Database connection parameters found\",\r\n    \"Notification.DoNotAsk-DatabaseConfigFileWatcher.found\": \"true\",\r\n    \"Python.main.executor\": \"Run\",\r\n    \"Repository.Attach.Annotations\": \"false\",\r\n    \"Repository.Attach.JavaDocs\": \"false\",\r\n    \"Repository.Attach.Sources\": \"false\",\r\n    \"RequestMappingsPanelOrder0\": \"0\",\r\n    \"RequestMappingsPanelOrder1\": \"1\",\r\n    \"RequestMappingsPanelWidth0\": \"75\",\r\n    \"RequestMappingsPanelWidth1\": \"75\",\r\n    \"RunOnceActivity.ShowReadmeOnStart\": \"true\",\r\n    \"RunOnceActivity.git.unshallow\": \"true\",\r\n    \"SHARE_PROJECT_CONFIGURATION_FILES\": \"true\",\r\n    \"SHELLCHECK.PATH\": \"C:\\\\Users\\\\ASUS\\\\AppData\\\\Roaming\\\\JetBrains\\\\IntelliJIdea2025.1\\\\plugins\\\\Shell Script\\\\shellcheck.exe\",\r\n    \"Spring Boot.AuthServiceApplication.executor\": \"Run\",\r\n    \"Spring Boot.EurekaServerApplication.executor\": \"Run\",\r\n    \"com.intellij.ide.FileNotInSourceRootChecker.no.check\": \"true\",\r\n    \"git-widget-placeholder\": \"build-Post\",\r\n    \"ignore.virus.scanning.warn.message\": \"true\",\r\n    \"junie.onboarding.icon.badge.shown\": \"true\",\r\n    \"last_opened_file_path\": \"D:/LVTN/ctu-connect/post-service/src/main/java/vn/ctu/edu/postservice\",\r\n    \"node.js.detected.package.eslint\": \"true\",\r\n    \"node.js.detected.package.standard\": \"true\",\r\n    \"node.js.detected.package.tslint\": \"true\",\r\n    \"node.js.selected.package.eslint\": \"(autodetect)\",\r\n    \"node.js.selected.package.standard\": \"\",\r\n    \"node.js.selected.package.tslint\": \"(autodetect)\",\r\n    \"nodejs_interpreter_path\": \"node\",\r\n    \"nodejs_package_manager_path\": \"npm\",\r\n    \"project.structure.last.edited\": \"Modules\",\r\n    \"project.structure.proportion\": \"0.15\",\r\n    \"project.structure.side.proportion\": \"0.2\",\r\n    \"run.configurations.included.in.services\": \"true\",\r\n    \"settings.editor.selected.configurable\": \"settings.javascript.linters.eslint\",\r\n    \"settings.editor.splitter.proportion\": \"0.28134558\",\r\n    \"ts.external.directory.path\": \"D:\\\\LVTN\\\\ctu-connect\\\\client-frontend\\\\node_modules\\\\typescript\\\\lib\",\r\n    \"vue.rearranger.settings.migration\": \"true\"\r\n  },\r\n  \"keyToStringList\": {\r\n    \"DatabaseDriversLRU\": [\r\n      \"postgresql\",\r\n      \"mongo\"\r\n    ],\r\n    \"RunConfigurationTargetLRU\": [\r\n      \"eaa90a37-8385-4cd3-af6e-aee505cea9ef\"\r\n    ]\r\n  }\r\n}]]></component>\r\n  <component name=\"ReactorSettings\">\r\n    <option name=\"notificationShown\" value=\"true\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\LVTN\\ctu-connect\\post-service\\src\\main\\java\\vn\\ctu\\edu\\postservice\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"D:\\LVTN\\ctu-connect\\post-service\\src\\main\\java\\com\\ctuconnect\\postservice\" />\r\n      <recent name=\"D:\\LVTN\\ctu-connect\\post-service\\src\\main\\java\\com\\ctuconnect\\postservice\\entity\" />\r\n      <recent name=\"D:\\LVTN\\ctu-connect\\post-service\\src\\main\\java\\com\\ctuconnect\" />\r\n      <recent name=\"D:\\LVTN\\ctu-connect\\client-frontend\\public\" />\r\n      <recent name=\"D:\\LVTN\\ctu-connect\\client-frontend\\src\\assets\" />\r\n    </key>\r\n    <key name=\"ExtractSuperBase.RECENT_KEYS\">\r\n      <recent name=\"com.ctuconnect.config\" />\r\n    </key>\r\n    <key name=\"MoveClassesOrPackagesDialog.RECENTS_KEY\">\r\n      <recent name=\"com.ctuconnect.UserMapper\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"Docker.docker-compose.yml: Compose Deployment\">\r\n    <configuration name=\"Recommender-service\" type=\"Python.FastAPI\">\r\n      <option name=\"file\" value=\"$PROJECT_DIR$/Recommender-service/main.py\" />\r\n      <module name=\"Recommender-service\" />\r\n      <option name=\"ENV_FILES\" value=\"\" />\r\n      <option name=\"INTERPRETER_OPTIONS\" value=\"\" />\r\n      <option name=\"PARENT_ENVS\" value=\"true\" />\r\n      <option name=\"SDK_HOME\" value=\"\" />\r\n      <option name=\"WORKING_DIRECTORY\" value=\"\" />\r\n      <option name=\"IS_MODULE_SDK\" value=\"false\" />\r\n      <option name=\"ADD_CONTENT_ROOTS\" value=\"true\" />\r\n      <option name=\"ADD_SOURCE_ROOTS\" value=\"true\" />\r\n      <EXTENSION ID=\"PythonCoverageRunConfigurationExtension\" runner=\"coverage.py\" />\r\n      <option name=\"launchJavascriptDebuger\" value=\"false\" />\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"ApiGatewayApplication\" type=\"SpringBootApplicationConfigurationType\" factoryName=\"Spring Boot\" nameIsGenerated=\"true\">\r\n      <module name=\"api-gateway\" />\r\n      <option name=\"SPRING_BOOT_MAIN_CLASS\" value=\"com.ctuconnect.ApiGatewayApplication\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"AuthServiceApplication\" type=\"SpringBootApplicationConfigurationType\" factoryName=\"Spring Boot\" nameIsGenerated=\"true\">\r\n      <module name=\"auth-service\" />\r\n      <option name=\"SPRING_BOOT_MAIN_CLASS\" value=\"com.ctuconnect.AuthServiceApplication\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"ChatServiceApplication\" type=\"SpringBootApplicationConfigurationType\" factoryName=\"Spring Boot\" nameIsGenerated=\"true\">\r\n      <module name=\"chat-service\" />\r\n      <option name=\"SPRING_BOOT_MAIN_CLASS\" value=\"vn.ctu.edu.chatservice.ChatServiceApplication\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"DemoApplication\" type=\"SpringBootApplicationConfigurationType\" factoryName=\"Spring Boot\" nameIsGenerated=\"true\">\r\n      <module name=\"demo\" />\r\n      <option name=\"SPRING_BOOT_MAIN_CLASS\" value=\"com.example.demo.DemoApplication\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"EurekaServerApplication\" type=\"SpringBootApplicationConfigurationType\" factoryName=\"Spring Boot\" nameIsGenerated=\"true\">\r\n      <module name=\"eureka-server\" />\r\n      <option name=\"SPRING_BOOT_MAIN_CLASS\" value=\"com.ctuconnect.EurekaServerApplication\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"MediaServiceApplication\" type=\"SpringBootApplicationConfigurationType\" factoryName=\"Spring Boot\" nameIsGenerated=\"true\">\r\n      <module name=\"media-service\" />\r\n      <option name=\"SPRING_BOOT_MAIN_CLASS\" value=\"vn.ctu.edu.mediaservice.MediaServiceApplication\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"PostServiceApplication (1)\" type=\"SpringBootApplicationConfigurationType\" factoryName=\"Spring Boot\" nameIsGenerated=\"true\">\r\n      <module name=\"post-service\" />\r\n      <option name=\"SPRING_BOOT_MAIN_CLASS\" value=\"com.ctuconnect.postservice.PostServiceApplication\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"PostServiceApplication\" type=\"SpringBootApplicationConfigurationType\" factoryName=\"Spring Boot\" nameIsGenerated=\"true\">\r\n      <option name=\"FRAME_DEACTIVATION_UPDATE_POLICY\" value=\"UpdateClassesAndResources\" />\r\n      <module name=\"post-service\" />\r\n      <option name=\"SPRING_BOOT_MAIN_CLASS\" value=\"vn.ctu.edu.postservice.PostServiceApplication\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"UserServiceApplication (1)\" type=\"SpringBootApplicationConfigurationType\" factoryName=\"Spring Boot\" nameIsGenerated=\"true\">\r\n      <module name=\"user-service\" />\r\n      <option name=\"SPRING_BOOT_MAIN_CLASS\" value=\"com.ctuconnect.UserServiceApplication\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"UserServiceApplication\" type=\"SpringBootApplicationConfigurationType\" factoryName=\"Spring Boot\" nameIsGenerated=\"true\">\r\n      <module name=\"user-service\" />\r\n      <option name=\"SPRING_BOOT_MAIN_CLASS\" value=\"vn.ctu.edu.userservice.UserServiceApplication\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"docker-deploy\" factoryName=\"docker-compose.yml\" temporary=\"true\">\r\n      <deployment type=\"docker-compose.yml\">\r\n        <settings />\r\n      </deployment>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration default=\"true\" type=\"docker-deploy\" factoryName=\"dockerfile\" temporary=\"true\">\r\n      <deployment type=\"dockerfile\">\r\n        <settings />\r\n      </deployment>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"docker-compose.yml: Compose Deployment\" type=\"docker-deploy\" factoryName=\"docker-compose.yml\" server-name=\"Docker\">\r\n      <deployment type=\"docker-compose.yml\">\r\n        <settings>\r\n          <option name=\"sourceFilePath\" value=\"docker-compose.yml\" />\r\n        </settings>\r\n      </deployment>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"docker-compose.yml.api-gateway: Compose Deployment\" type=\"docker-deploy\" factoryName=\"docker-compose.yml\" temporary=\"true\" server-name=\"Docker\">\r\n      <deployment type=\"docker-compose.yml\">\r\n        <settings>\r\n          <option name=\"services\">\r\n            <list>\r\n              <option value=\"api-gateway\" />\r\n            </list>\r\n          </option>\r\n          <option name=\"sourceFilePath\" value=\"docker-compose.yml\" />\r\n        </settings>\r\n      </deployment>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"docker-compose.yml.media-service: Compose Deployment\" type=\"docker-deploy\" factoryName=\"docker-compose.yml\" temporary=\"true\" server-name=\"Docker\">\r\n      <deployment type=\"docker-compose.yml\">\r\n        <settings>\r\n          <option name=\"services\">\r\n            <list>\r\n              <option value=\"media-service\" />\r\n            </list>\r\n          </option>\r\n          <option name=\"sourceFilePath\" value=\"docker-compose.yml\" />\r\n        </settings>\r\n      </deployment>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"docker-compose.yml.media_db: Compose Deployment\" type=\"docker-deploy\" factoryName=\"docker-compose.yml\" temporary=\"true\" server-name=\"Docker\">\r\n      <deployment type=\"docker-compose.yml\">\r\n        <settings>\r\n          <option name=\"services\">\r\n            <list>\r\n              <option value=\"media_db\" />\r\n            </list>\r\n          </option>\r\n          <option name=\"sourceFilePath\" value=\"docker-compose.yml\" />\r\n        </settings>\r\n      </deployment>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"docker-compose.yml.neo4j: Compose Deployment\" type=\"docker-deploy\" factoryName=\"docker-compose.yml\" temporary=\"true\" server-name=\"Docker\">\r\n      <deployment type=\"docker-compose.yml\">\r\n        <settings>\r\n          <option name=\"services\">\r\n            <list>\r\n              <option value=\"neo4j\" />\r\n            </list>\r\n          </option>\r\n          <option name=\"sourceFilePath\" value=\"docker-compose.yml\" />\r\n        </settings>\r\n      </deployment>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <configuration name=\"docker-compose.yml.user-service: Compose Deployment\" type=\"docker-deploy\" factoryName=\"docker-compose.yml\" temporary=\"true\" server-name=\"Docker\">\r\n      <deployment type=\"docker-compose.yml\">\r\n        <settings>\r\n          <option name=\"services\">\r\n            <list>\r\n              <option value=\"user-service\" />\r\n            </list>\r\n          </option>\r\n          <option name=\"sourceFilePath\" value=\"docker-compose.yml\" />\r\n        </settings>\r\n      </deployment>\r\n      <method v=\"2\" />\r\n    </configuration>\r\n    <list>\r\n      <item itemvalue=\"Docker.docker-compose.yml: Compose Deployment\" />\r\n      <item itemvalue=\"Docker.docker-compose.yml.neo4j: Compose Deployment\" />\r\n      <item itemvalue=\"Docker.docker-compose.yml.media_db: Compose Deployment\" />\r\n      <item itemvalue=\"Docker.docker-compose.yml.api-gateway: Compose Deployment\" />\r\n      <item itemvalue=\"Docker.docker-compose.yml.media-service: Compose Deployment\" />\r\n      <item itemvalue=\"Docker.docker-compose.yml.user-service: Compose Deployment\" />\r\n      <item itemvalue=\"FastAPI.Recommender-service\" />\r\n      <item itemvalue=\"Spring Boot.MediaServiceApplication\" />\r\n      <item itemvalue=\"Spring Boot.PostServiceApplication (1)\" />\r\n      <item itemvalue=\"Spring Boot.ChatServiceApplication\" />\r\n      <item itemvalue=\"Spring Boot.PostServiceApplication\" />\r\n      <item itemvalue=\"Spring Boot.ApiGatewayApplication\" />\r\n      <item itemvalue=\"Spring Boot.UserServiceApplication (1)\" />\r\n      <item itemvalue=\"Spring Boot.DemoApplication\" />\r\n      <item itemvalue=\"Spring Boot.AuthServiceApplication\" />\r\n      <item itemvalue=\"Spring Boot.EurekaServerApplication\" />\r\n      <item itemvalue=\"Spring Boot.UserServiceApplication\" />\r\n    </list>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"Docker.docker-compose.yml.media-service: Compose Deployment\" />\r\n        <item itemvalue=\"Docker.docker-compose.yml.user-service: Compose Deployment\" />\r\n        <item itemvalue=\"Docker.docker-compose.yml.neo4j: Compose Deployment\" />\r\n        <item itemvalue=\"Docker.docker-compose.yml.media_db: Compose Deployment\" />\r\n        <item itemvalue=\"Docker.docker-compose.yml.api-gateway: Compose Deployment\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SharedIndexes\">\r\n    <attachedChunks>\r\n      <set>\r\n        <option value=\"bundled-jdk-9823dce3aa75-fbdcb00ec9e3-intellij.indexing.shared.core-IU-251.26927.53\" />\r\n        <option value=\"bundled-js-predefined-d6986cc7102b-09060db00ec0-JavaScript-IU-251.26927.53\" />\r\n      </set>\r\n    </attachedChunks>\r\n  </component>\r\n  <component name=\"StructureViewState\">\r\n    <option name=\"selectedTab\" value=\"Logical\" />\r\n  </component>\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"45c2871e-0a67-4aea-8968-e03f2e8fc23f\" name=\"Changes\" comment=\"\" />\r\n      <created>1750329817498</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1750329817498</updated>\r\n      <workItem from=\"1750329818743\" duration=\"4140000\" />\r\n      <workItem from=\"1750427639581\" duration=\"590000\" />\r\n      <workItem from=\"1750428424523\" duration=\"12808000\" />\r\n      <workItem from=\"1750488220007\" duration=\"8771000\" />\r\n      <workItem from=\"1750497599217\" duration=\"139000\" />\r\n      <workItem from=\"1750497774042\" duration=\"126000\" />\r\n      <workItem from=\"1750497913706\" duration=\"70000\" />\r\n      <workItem from=\"1750498003738\" duration=\"64000\" />\r\n      <workItem from=\"1750498119293\" duration=\"16000\" />\r\n      <workItem from=\"1750498136937\" duration=\"253000\" />\r\n      <workItem from=\"1750498429958\" duration=\"2420000\" />\r\n      <workItem from=\"1750501002559\" duration=\"81000\" />\r\n      <workItem from=\"1750501084400\" duration=\"25000\" />\r\n      <workItem from=\"1750501119681\" duration=\"240000\" />\r\n      <workItem from=\"1750501417128\" duration=\"605000\" />\r\n      <workItem from=\"1750502144099\" duration=\"20000\" />\r\n      <workItem from=\"1750502215356\" duration=\"1639000\" />\r\n      <workItem from=\"1750524256618\" duration=\"6099000\" />\r\n      <workItem from=\"1750568576749\" duration=\"21792000\" />\r\n      <workItem from=\"1750595584643\" duration=\"6000000\" />\r\n      <workItem from=\"1750609057329\" duration=\"4286000\" />\r\n      <workItem from=\"1750649229405\" duration=\"7677000\" />\r\n      <workItem from=\"1750661542276\" duration=\"1812000\" />\r\n      <workItem from=\"1750771605937\" duration=\"85000\" />\r\n      <workItem from=\"1750829997308\" duration=\"181000\" />\r\n      <workItem from=\"1751029792052\" duration=\"1488000\" />\r\n      <workItem from=\"1751286679272\" duration=\"1754000\" />\r\n      <workItem from=\"1751442308625\" duration=\"2943000\" />\r\n      <workItem from=\"1751447261118\" duration=\"2232000\" />\r\n      <workItem from=\"1751464475982\" duration=\"440000\" />\r\n      <workItem from=\"1751540946509\" duration=\"13651000\" />\r\n      <workItem from=\"1751558237127\" duration=\"48000\" />\r\n      <workItem from=\"1751558297304\" duration=\"6904000\" />\r\n      <workItem from=\"1751630898439\" duration=\"207000\" />\r\n      <workItem from=\"1751631436196\" duration=\"5949000\" />\r\n      <workItem from=\"1751637907386\" duration=\"2297000\" />\r\n      <workItem from=\"1751718587975\" duration=\"8216000\" />\r\n      <workItem from=\"1751805145202\" duration=\"9478000\" />\r\n      <workItem from=\"1751870563948\" duration=\"16480000\" />\r\n      <workItem from=\"1751965662450\" duration=\"17979000\" />\r\n      <workItem from=\"1752057197606\" duration=\"19761000\" />\r\n      <workItem from=\"1752136180049\" duration=\"955000\" />\r\n      <workItem from=\"1752137183760\" duration=\"168000\" />\r\n      <workItem from=\"1752138048482\" duration=\"13528000\" />\r\n      <workItem from=\"1752156054956\" duration=\"4705000\" />\r\n      <workItem from=\"1752221972038\" duration=\"3744000\" />\r\n      <workItem from=\"1752225820873\" duration=\"176000\" />\r\n      <workItem from=\"1752226008708\" duration=\"4905000\" />\r\n      <workItem from=\"1752237308014\" duration=\"8324000\" />\r\n      <workItem from=\"1752313828329\" duration=\"22841000\" />\r\n      <workItem from=\"1752403158153\" duration=\"20562000\" />\r\n      <workItem from=\"1752430388389\" duration=\"112000\" />\r\n      <workItem from=\"1752479911895\" duration=\"13817000\" />\r\n      <workItem from=\"1752495654602\" duration=\"7548000\" />\r\n      <workItem from=\"1752577243931\" duration=\"13560000\" />\r\n      <workItem from=\"1752597854477\" duration=\"1142000\" />\r\n      <workItem from=\"1752599074480\" duration=\"664000\" />\r\n      <workItem from=\"1752805943127\" duration=\"15912000\" />\r\n      <workItem from=\"1752822186543\" duration=\"1572000\" />\r\n      <workItem from=\"1752824829177\" duration=\"1051000\" />\r\n      <workItem from=\"1753086130099\" duration=\"60000\" />\r\n      <workItem from=\"1753292435331\" duration=\"8400000\" />\r\n      <workItem from=\"1753355763816\" duration=\"13205000\" />\r\n      <workItem from=\"1753369120081\" duration=\"3985000\" />\r\n      <workItem from=\"1753435608366\" duration=\"58000\" />\r\n      <workItem from=\"1753435686659\" duration=\"9993000\" />\r\n      <workItem from=\"1753451167568\" duration=\"3032000\" />\r\n      <workItem from=\"1753526056279\" duration=\"11331000\" />\r\n      <workItem from=\"1753580043883\" duration=\"13711000\" />\r\n      <workItem from=\"1753625709674\" duration=\"16295000\" />\r\n      <workItem from=\"1753703567557\" duration=\"21143000\" />\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"init\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1751809284361</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1751809284361</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Complete Login/ Sign up\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1751884648943</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1751884648944</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Complete Token v1\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1751969492736</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1751969492736</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"Complete Token ok\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1751973179469</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1751973179469</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Test user-service\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1751982231413</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1751982231413</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00006\" summary=\"Test user-service\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1751982249022</created>\r\n      <option name=\"number\" value=\"00006\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00006\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1751982249022</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00007\" summary=\"Dang fix profile\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752076029428</created>\r\n      <option name=\"number\" value=\"00007\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00007\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752076029428</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00008\" summary=\"Dang fix profile v2\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752151900166</created>\r\n      <option name=\"number\" value=\"00008\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00008\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752151900166</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00009\" summary=\"Dang fix profile v3\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752160112022</created>\r\n      <option name=\"number\" value=\"00009\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00009\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752160112022</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00010\" summary=\"init client-frontend and admin-frontend\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752238605526</created>\r\n      <option name=\"number\" value=\"00010\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00010\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752238605526</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00011\" summary=\"config friends v0\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752242107224</created>\r\n      <option name=\"number\" value=\"00011\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00011\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752242107224</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00012\" summary=\"user-service fix v2\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752409182622</created>\r\n      <option name=\"number\" value=\"00012\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00012\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752409182622</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00013\" summary=\"add admin-frontend\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752409210449</created>\r\n      <option name=\"number\" value=\"00013\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00013\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752409210449</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00014\" summary=\"create an admin account ok\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752409794488</created>\r\n      <option name=\"number\" value=\"00014\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00014\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752409794488</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00015\" summary=\"addFriend v1\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752413892668</created>\r\n      <option name=\"number\" value=\"00015\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00015\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752413892668</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00016\" summary=\"AuthService and UserService OK\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752425975876</created>\r\n      <option name=\"number\" value=\"00016\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00016\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752425975876</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00017\" summary=\"Auth Client-Frontend v1\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752494458106</created>\r\n      <option name=\"number\" value=\"00017\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00017\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752494458106</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00018\" summary=\"Auth Client-Frontend fixing\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752500988551</created>\r\n      <option name=\"number\" value=\"00018\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00018\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752500988551</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00019\" summary=\"Pre-build Media-service\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752809136342</created>\r\n      <option name=\"number\" value=\"00019\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00019\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752809136342</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00020\" summary=\"Media service OK\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1752821787619</created>\r\n      <option name=\"number\" value=\"00020\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00020\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1752821787619</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00021\" summary=\"Update profile v1.0\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753212209387</created>\r\n      <option name=\"number\" value=\"00021\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00021\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753212209387</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00022\" summary=\"Update profile v1.1\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753292780754</created>\r\n      <option name=\"number\" value=\"00022\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00022\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753292780754</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00023\" summary=\"Update profile v1.2\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753295533447</created>\r\n      <option name=\"number\" value=\"00023\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00023\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753295533447</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00024\" summary=\"Update profile v1.3\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753298304003</created>\r\n      <option name=\"number\" value=\"00024\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00024\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753298304003</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00025\" summary=\"Update profile v1.4\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753300180459</created>\r\n      <option name=\"number\" value=\"00025\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00025\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753300180459</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00026\" summary=\"Update profile v1.4.1 fix loading\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753358279348</created>\r\n      <option name=\"number\" value=\"00026\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00026\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753358279348</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00027\" summary=\"Update profile v1.4.2\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753444283612</created>\r\n      <option name=\"number\" value=\"00027\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00027\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753444283612</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00028\" summary=\"Update profile v1.5\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753533490392</created>\r\n      <option name=\"number\" value=\"00028\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00028\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753533490392</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00029\" summary=\"Update profile v2\">\r\n      <option name=\"closed\" value=\"true\" />\r\n      <created>1753728843314</created>\r\n      <option name=\"number\" value=\"00029\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00029\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1753728843314</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"30\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"TypeScriptGeneratedFilesManager\">\r\n    <option name=\"version\" value=\"3\" />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State>\r\n              <option name=\"FILTERS\">\r\n                <map>\r\n                  <entry key=\"branch\">\r\n                    <value>\r\n                      <list>\r\n                        <option value=\"build-Post\" />\r\n                      </list>\r\n                    </value>\r\n                  </entry>\r\n                </map>\r\n              </option>\r\n            </State>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <MESSAGE value=\"Complete Token ok\" />\r\n    <MESSAGE value=\"Test user-service\" />\r\n    <MESSAGE value=\"Dang fix profile\" />\r\n    <MESSAGE value=\"Dang fix profile v2\" />\r\n    <MESSAGE value=\"Dang fix profile v3\" />\r\n    <MESSAGE value=\"init client-frontend and admin-frontend\" />\r\n    <MESSAGE value=\"config friends v0\" />\r\n    <MESSAGE value=\"user-service fix v2\" />\r\n    <MESSAGE value=\"add admin-frontend\" />\r\n    <MESSAGE value=\"create an admin account ok\" />\r\n    <MESSAGE value=\"addFriend v1\" />\r\n    <MESSAGE value=\"AuthService and UserService OK\" />\r\n    <MESSAGE value=\"Auth Client-Frontend v1\" />\r\n    <MESSAGE value=\"Auth Client-Frontend fixing\" />\r\n    <MESSAGE value=\"Pre-build Media-service\" />\r\n    <MESSAGE value=\"Media service OK\" />\r\n    <MESSAGE value=\"Update profile v1.0\" />\r\n    <MESSAGE value=\"Update profile v1.1\" />\r\n    <MESSAGE value=\"Update profile v1.2\" />\r\n    <MESSAGE value=\"Update profile v1.3\" />\r\n    <MESSAGE value=\"Update profile v1.4\" />\r\n    <MESSAGE value=\"Update profile v1.4.1 fix loading\" />\r\n    <MESSAGE value=\"Update profile v1.4.2\" />\r\n    <MESSAGE value=\"Update profile v1.5\" />\r\n    <MESSAGE value=\"Update profile v2\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Update profile v2\" />\r\n  </component>\r\n  <component name=\"XSLT-Support.FileAssociations.UIState\">\r\n    <expand />\r\n    <select />\r\n  </component>\r\n  <component name=\"com.intellij.coverage.CoverageDataManagerImpl\">\r\n    <SUITE FILE_PATH=\"coverage/ctu_connect$main.coverage\" NAME=\"main Coverage Results\" MODIFIED=\"1752823450070\" SOURCE_PROVIDER=\"com.intellij.coverage.DefaultCoverageFileProvider\" RUNNER=\"coverage.py\" COVERAGE_BY_TEST_ENABLED=\"false\" COVERAGE_TRACING_ENABLED=\"false\" WORKING_DIRECTORY=\"$PROJECT_DIR$/Recommender-service\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision f08f1d49d319bbab2efbea29650ac17cd6ac4cf8)
+++ b/.idea/workspace.xml	(date 1754053344064)
@@ -4,35 +4,20 @@
     <option name="autoReloadType" value="SELECTIVE" />
   </component>
   <component name="ChangeListManager">
-    <list default="true" id="45c2871e-0a67-4aea-8968-e03f2e8fc23f" name="Changes" comment="Update profile v2">
-      <change afterPath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/client/UserServiceClient.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/dto/AuthorInfo.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/dto/request/InteractionRequest.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/security/AuthenticatedUser.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/security/AuthenticationInterceptor.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/security/SecurityContextHolder.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/security/annotation/RequireAuth.java" afterDir="false" />
-      <change afterPath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/security/aspect/AuthorizationAspect.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/client-frontend/src/components/layout/Layout.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/client-frontend/src/components/layout/Layout.tsx" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/client-frontend/src/components/post/CreatePostForm.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/client-frontend/src/components/post/CreatePostForm.tsx" afterDir="false" />
+    <list default="true" id="45c2871e-0a67-4aea-8968-e03f2e8fc23f" name="Changes" comment="PostService v0.1">
+      <change afterPath="$PROJECT_DIR$/client-frontend/src/components/post/CreatePost.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/client-frontend/src/components/post/PostFeed.tsx" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/client-frontend/src/components/post/index.ts" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/api-gateway/src/main/java/com/ctuconnect/config/RouteConfig.java" beforeDir="false" afterPath="$PROJECT_DIR$/api-gateway/src/main/java/com/ctuconnect/config/RouteConfig.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/client-frontend/src/components/post/PostCard.tsx" beforeDir="false" afterPath="$PROJECT_DIR$/client-frontend/src/components/post/PostCard.tsx" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/client-frontend/src/services/postService.ts" beforeDir="false" afterPath="$PROJECT_DIR$/client-frontend/src/services/postService.ts" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/client-frontend/src/types/index.ts" beforeDir="false" afterPath="$PROJECT_DIR$/client-frontend/src/types/index.ts" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/database/neo4j/logs/debug.log" beforeDir="false" afterPath="$PROJECT_DIR$/database/neo4j/logs/debug.log" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/database/neo4j/logs/neo4j.log" beforeDir="false" afterPath="$PROJECT_DIR$/database/neo4j/logs/neo4j.log" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/post-service/pom.xml" beforeDir="false" afterPath="$PROJECT_DIR$/post-service/pom.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/client/MediaServiceClient.java" beforeDir="false" afterPath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/client/MediaServiceClient.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/controller/PostController.java" beforeDir="false" afterPath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/controller/PostController.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/dto/request/CreateCommentRequest.java" beforeDir="false" afterPath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/dto/request/CommentRequest.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/dto/request/CreateInteractionRequest.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/dto/request/CreatePostRequest.java" beforeDir="false" afterPath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/dto/request/PostRequest.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/dto/request/UpdatePostRequest.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/entity/CommentEntity.java" beforeDir="false" afterPath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/entity/CommentEntity.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/entity/InteractionEntity.java" beforeDir="false" afterPath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/entity/InteractionEntity.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/dto/request/PostRequest.java" beforeDir="false" afterPath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/dto/request/PostRequest.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/dto/response/PostResponse.java" beforeDir="false" afterPath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/dto/response/PostResponse.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/entity/PostEntity.java" beforeDir="false" afterPath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/entity/PostEntity.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/repository/InteractionRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/repository/InteractionRepository.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/service/CommentService.java" beforeDir="false" afterPath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/service/CommentService.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/service/InteractionService.java" beforeDir="false" afterPath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/service/InteractionService.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/repository/PostRepository.java" beforeDir="false" afterPath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/repository/PostRepository.java" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/service/PostService.java" beforeDir="false" afterPath="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/service/PostService.java" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
@@ -164,7 +149,7 @@
     "project.structure.proportion": "0.15",
     "project.structure.side.proportion": "0.2",
     "run.configurations.included.in.services": "true",
-    "settings.editor.selected.configurable": "settings.javascript.linters.eslint",
+    "settings.editor.selected.configurable": "com.github.copilot.settings.ApplicationConfigurable",
     "settings.editor.splitter.proportion": "0.28134558",
     "ts.external.directory.path": "D:\\LVTN\\ctu-connect\\client-frontend\\node_modules\\typescript\\lib",
     "vue.rearranger.settings.migration": "true"
@@ -723,7 +708,15 @@
       <option name="project" value="LOCAL" />
       <updated>1753728843314</updated>
     </task>
-    <option name="localTasksCounter" value="30" />
+    <task id="LOCAL-00030" summary="PostService v0.1">
+      <option name="closed" value="true" />
+      <created>1754052118881</created>
+      <option name="number" value="00030" />
+      <option name="presentableId" value="LOCAL-00030" />
+      <option name="project" value="LOCAL" />
+      <updated>1754052118881</updated>
+    </task>
+    <option name="localTasksCounter" value="31" />
     <servers />
   </component>
   <component name="TypeScriptGeneratedFilesManager">
@@ -753,7 +746,6 @@
     </option>
   </component>
   <component name="VcsManagerConfiguration">
-    <MESSAGE value="Complete Token ok" />
     <MESSAGE value="Test user-service" />
     <MESSAGE value="Dang fix profile" />
     <MESSAGE value="Dang fix profile v2" />
@@ -778,7 +770,8 @@
     <MESSAGE value="Update profile v1.4.2" />
     <MESSAGE value="Update profile v1.5" />
     <MESSAGE value="Update profile v2" />
-    <option name="LAST_COMMIT_MESSAGE" value="Update profile v2" />
+    <MESSAGE value="PostService v0.1" />
+    <option name="LAST_COMMIT_MESSAGE" value="PostService v0.1" />
   </component>
   <component name="XSLT-Support.FileAssociations.UIState">
     <expand />
Index: .idea/copilotDiffState.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"CopilotDiffPersistence\">\r\n    <option name=\"pendingDiffs\">\r\n      <map>\r\n        <entry key=\"$PROJECT_DIR$/user-service/src/main/java/com/ctuconnect/repository/UserRepository.java\">\r\n          <value>\r\n            <PendingDiffInfo>\r\n              <option name=\"filePath\" value=\"$PROJECT_DIR$/user-service/src/main/java/com/ctuconnect/repository/UserRepository.java\" />\r\n              <option name=\"originalContent\" value=\"package com.ctuconnect.repository;&#10;&#10;import com.ctuconnect.entity.UserEntity;&#10;import org.springframework.data.neo4j.repository.Neo4jRepository;&#10;import org.springframework.data.neo4j.repository.query.Query;&#10;import org.springframework.data.repository.query.Param;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public interface UserRepository extends Neo4jRepository&lt;UserEntity, String&gt; {&#10;&#10;    Optional&lt;UserEntity&gt; findByEmail(String email);&#10;&#10;    Optional&lt;UserEntity&gt; findByUsername(String username);&#10;&#10;    boolean existsByEmail(String email);&#10;&#10;    boolean existsByUsername(String username);&#10;&#10;    @Query(&quot;MATCH (u:User) WHERE u.email = $identifier OR u.username = $identifier RETURN u&quot;)&#10;    Optional&lt;UserEntity&gt; findByEmailOrUsername(@Param(&quot;identifier&quot;) String identifier);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;    MATCH (u:User {id: $userId})&#10;    // Get direct relationships for a student&#10;    OPTIONAL MATCH (u)-[:ENROLLED_IN]-&gt;(m:Major)&#10;    OPTIONAL MATCH (u)-[:IN_BATCH]-&gt;(b:Batch)&#10;    OPTIONAL MATCH (u)-[:HAS_GENDER]-&gt;(g:Gender)&#10;    OPTIONAL MATCH (u)-[:ENROLLED_IN]-&gt;(f:Faculty)&#10;    OPTIONAL MATCH (u)-[:ENROLLED_IN]-&gt;(c:College)&#10;    // Get direct relationships for a lecturer/staff&#10;    OPTIONAL MATCH (u)-[:WORKS_IN]-&gt;(wf:Faculty)&#10;    OPTIONAL MATCH (u)-[:WORKS_IN]-&gt;(wc:College)&#10;    OPTIONAL MATCH (u)-[:HAS_DEGREE]-&gt;(d:Degree)&#10;    OPTIONAL MATCH (u)-[:HAS_POSITION]-&gt;(p:Position)&#10;    OPTIONAL MATCH (u)-[:HAS_ACADEMIC]-&gt;(a:Academic)&#10;    // Fix for handling friends relationship&#10;    OPTIONAL MATCH (u)-[:FRIEND]-(friend:User)&#10;    // Return all matched nodes to properly populate the entity&#10;    RETURN u, m, b, g, f, c, wf, wc, d, p, a, collect(friend) as friends&#10;&quot;&quot;&quot;)&#10;    Optional&lt;UserEntity&gt; findUserWithAllRelations(@Param(&quot;userId&quot;) String userId);&#10;&#10;&#10;    // ========================= FRIENDSHIPS =========================&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u:User {id: $userId})-[:FRIEND]-(friend:User)&#10;                RETURN friend&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findFriends(@Param(&quot;userId&quot;) String userId);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u1:User {id: $userId1})-[:FRIEND]-(friend:User),&#10;                      (u2:User {id: $userId2})-[:FRIEND]-(friend)&#10;                WHERE friend.id &lt;&gt; $userId1 AND friend.id &lt;&gt; $userId2&#10;                RETURN DISTINCT friend&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findMutualFriends(@Param(&quot;userId1&quot;) String userId1, @Param(&quot;userId2&quot;) String userId2);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u1:User {id: $userId1}), (u2:User {id: $userId2})&#10;                WHERE u1.id &lt;&gt; u2.id&#10;                MERGE (u1)-[:FRIEND_REQUEST {createdAt: datetime(), status: 'PENDING'}]-&gt;(u2)&#10;            &quot;&quot;&quot;)&#10;    void sendFriendRequest(@Param(&quot;userId1&quot;) String userId1, @Param(&quot;userId2&quot;) String userId2);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u1:User {id: $userId1})-[r:FRIEND_REQUEST {status: 'PENDING'}]-&gt;(u2:User {id: $userId2})&#10;                DELETE r&#10;                MERGE (u1)-[:FRIEND {since: datetime()}]-(u2)&#10;            &quot;&quot;&quot;)&#10;    void acceptFriendRequest(@Param(&quot;userId1&quot;) String userId1, @Param(&quot;userId2&quot;) String userId2);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u1:User {id: $userId1})-[r:FRIEND_REQUEST]-&gt;(u2:User {id: $userId2})&#10;                DELETE r&#10;            &quot;&quot;&quot;)&#10;    void rejectFriendRequest(@Param(&quot;userId1&quot;) String userId1, @Param(&quot;userId2&quot;) String userId2);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u1:User {id: $userId1})-[r:FRIEND]-(u2:User {id: $userId2})&#10;                DELETE r&#10;            &quot;&quot;&quot;)&#10;    void deleteFriendship(@Param(&quot;userId1&quot;) String userId1, @Param(&quot;userId2&quot;) String userId2);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u1:User {id: $userId1})-[:FRIEND]-(u2:User {id: $userId2})&#10;                RETURN COUNT(*) &gt; 0&#10;            &quot;&quot;&quot;)&#10;    boolean areFriends(@Param(&quot;userId1&quot;) String userId1, @Param(&quot;userId2&quot;) String userId2);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u1:User {id: $userId1})-[:FRIEND_REQUEST {status: 'PENDING'}]-&gt;(u2:User {id: $userId2})&#10;                RETURN COUNT(*) &gt; 0&#10;            &quot;&quot;&quot;)&#10;    boolean hasPendingFriendRequest(@Param(&quot;userId1&quot;) String userId1, @Param(&quot;userId2&quot;) String userId2);&#10;&#10;    // Get friend requests sent TO this user&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (sender:User)-[:FRIEND_REQUEST {status: 'PENDING'}]-&gt;(u:User {id: $userId})&#10;                RETURN sender&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findIncomingFriendRequests(@Param(&quot;userId&quot;) String userId);&#10;&#10;    // Get friend requests sent BY this user&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u:User {id: $userId})-[:FRIEND_REQUEST {status: 'PENDING'}]-&gt;(receiver:User)&#10;                RETURN receiver&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findOutgoingFriendRequests(@Param(&quot;userId&quot;) String userId);&#10;&#10;    // ========================= FILTER QUERIES =========================&#10;&#10;    @Query(&quot;MATCH (u:User)-[:ENROLLED_IN]-&gt;(m:Major {name: $major}) RETURN u&quot;)&#10;    List&lt;UserEntity&gt; findByMajor(@Param(&quot;major&quot;) String major);&#10;&#10;    @Query(&quot;MATCH (u:User)-[:IN_BATCH]-&gt;(b:Batch {year: $batch}) RETURN u&quot;)&#10;    List&lt;UserEntity&gt; findByBatch(@Param(&quot;batch&quot;) int batch);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u:User)-[:ENROLLED_IN]-&gt;(:Major)-[:BELONGS_TO]-&gt;(:Faculty {name: $faculty})&#10;                RETURN u&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findByFaculty(@Param(&quot;faculty&quot;) String faculty);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u:User)-[:ENROLLED_IN]-&gt;(:Major)-[:BELONGS_TO]-&gt;(:Faculty)-[:PART_OF]-&gt;(:College {name: $college})&#10;                RETURN u&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findByCollege(@Param(&quot;college&quot;) String college);&#10;&#10;    // ========================= SAME ATTRIBUTE QUERIES =========================&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u:User {id: $userId})-[:ENROLLED_IN]-&gt;(m:Major)&lt;-[:ENROLLED_IN]-(other:User)&#10;                WHERE u.id &lt;&gt; other.id&#10;                RETURN other&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findUsersWithSameMajor(@Param(&quot;userId&quot;) String userId);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u:User {id: $userId})-[:IN_BATCH]-&gt;(b:Batch)&lt;-[:IN_BATCH]-(other:User)&#10;                WHERE u.id &lt;&gt; other.id&#10;                RETURN other&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findUsersWithSameBatch(@Param(&quot;userId&quot;) String userId);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u:User {id: $userId})-[:ENROLLED_IN]-&gt;(:Major)-[:BELONGS_TO]-&gt;(f:Faculty)&#10;                MATCH (other:User)-[:ENROLLED_IN]-&gt;(:Major)-[:BELONGS_TO]-&gt;(f)&#10;                WHERE other.id &lt;&gt; $userId&#10;                RETURN other&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findUsersWithSameFaculty(@Param(&quot;userId&quot;) String userId);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u:User {id: $userId})-[:ENROLLED_IN]-&gt;(:Major)-[:BELONGS_TO]-&gt;(:Faculty)-[:PART_OF]-&gt;(c:College)&#10;                MATCH (other:User)-[:ENROLLED_IN]-&gt;(:Major)-[:BELONGS_TO]-&gt;(:Faculty)-[:PART_OF]-&gt;(c)&#10;                WHERE other.id &lt;&gt; $userId&#10;                RETURN other&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findUsersWithSameCollege(@Param(&quot;userId&quot;) String userId);&#10;&#10;    // ========================= ADVANCED FILTERING =========================&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u:User {id: $userId})&#10;                OPTIONAL MATCH (u)-[:ENROLLED_IN]-&gt;(uMajor:Major)&#10;                OPTIONAL MATCH (u)-[:IN_BATCH]-&gt;(uBatch:Batch)&#10;                OPTIONAL MATCH (uMajor)-[:BELONGS_TO]-&gt;(uFaculty:Faculty)&#10;                OPTIONAL MATCH (uFaculty)-[:PART_OF]-&gt;(uCollege:College)&#10;&#10;                MATCH (other:User)&#10;                OPTIONAL MATCH (other)-[:ENROLLED_IN]-&gt;(oMajor:Major)&#10;                OPTIONAL MATCH (other)-[:IN_BATCH]-&gt;(oBatch:Batch)&#10;                OPTIONAL MATCH (oMajor)-[:BELONGS_TO]-&gt;(oFaculty:Faculty)&#10;                OPTIONAL MATCH (oFaculty)-[:PART_OF]-&gt;(oCollege:College)&#10;&#10;                WHERE u.id &lt;&gt; other.id&#10;                  AND ($isSameMajor = false OR uMajor.name = oMajor.name)&#10;                  AND ($isSameBatch = false OR uBatch.year = oBatch.year)&#10;                  AND ($isSameFaculty = false OR uFaculty.name = oFaculty.name)&#10;                  AND ($isSameCollege = false OR uCollege.name = oCollege.name)&#10;&#10;                RETURN DISTINCT other&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findUsersWithFilters(&#10;            @Param(&quot;userId&quot;) String userId,&#10;            @Param(&quot;isSameCollege&quot;) boolean isSameCollege,&#10;            @Param(&quot;isSameFaculty&quot;) boolean isSameFaculty,&#10;            @Param(&quot;isSameMajor&quot;) boolean isSameMajor,&#10;            @Param(&quot;isSameBatch&quot;) boolean isSameBatch&#10;    );&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u:User {id: $userId})-[:FRIEND]-(friend:User)&#10;                OPTIONAL MATCH (u)-[:ENROLLED_IN]-&gt;(uMajor:Major)&#10;                OPTIONAL MATCH (friend)-[:ENROLLED_IN]-&gt;(fMajor:Major)&#10;                OPTIONAL MATCH (uMajor)-[:BELONGS_TO]-&gt;(uFaculty:Faculty)&#10;                OPTIONAL MATCH (fMajor)-[:BELONGS_TO]-&gt;(fFaculty:Faculty)&#10;                OPTIONAL MATCH (uFaculty)-[:PART_OF]-&gt;(uCollege:College)&#10;                OPTIONAL MATCH (fFaculty)-[:PART_OF]-&gt;(fCollege:College)&#10;                OPTIONAL MATCH (u)-[:IN_BATCH]-&gt;(uBatch:Batch)&#10;                OPTIONAL MATCH (friend)-[:IN_BATCH]-&gt;(fBatch:Batch)&#10;&#10;                WHERE ($isSameMajor = false OR uMajor.name = fMajor.name)&#10;                  AND ($isSameFaculty = false OR uFaculty.name = fFaculty.name)&#10;                  AND ($isSameCollege = false OR uCollege.name = fCollege.name)&#10;                  AND ($isSameBatch = false OR uBatch.year = fBatch.year)&#10;&#10;                RETURN DISTINCT friend&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findFriendsWithFilters(&#10;            @Param(&quot;userId&quot;) String userId,&#10;            @Param(&quot;isSameCollege&quot;) boolean isSameCollege,&#10;            @Param(&quot;isSameFaculty&quot;) boolean isSameFaculty,&#10;            @Param(&quot;isSameMajor&quot;) boolean isSameMajor,&#10;            @Param(&quot;isSameBatch&quot;) boolean isSameBatch&#10;    );&#10;&#10;    // ========================= FRIEND SUGGESTIONS =========================&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u:User {id: $userId})-[:FRIEND]-(friend:User)-[:FRIEND]-(suggestion:User)&#10;                WHERE u.id &lt;&gt; suggestion.id&#10;                  AND NOT (u)-[:FRIEND]-(suggestion)&#10;                  AND NOT (u)-[:FRIEND_REQUEST]-(suggestion)&#10;                RETURN suggestion, COUNT(*) AS mutualFriends&#10;                ORDER BY mutualFriends DESC&#10;                LIMIT 10&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findFriendSuggestions(@Param(&quot;userId&quot;) String userId);&#10;}&#10;&#10;\" />\r\n              <option name=\"updatedContent\" value=\"package com.ctuconnect.repository;&#10;&#10;import com.ctuconnect.entity.UserEntity;&#10;import org.springframework.data.neo4j.repository.Neo4jRepository;&#10;import org.springframework.data.neo4j.repository.query.Query;&#10;import org.springframework.data.repository.query.Param;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public interface UserRepository extends Neo4jRepository&lt;UserEntity, String&gt; {&#10;&#10;    Optional&lt;UserEntity&gt; findByEmail(String email);&#10;&#10;    Optional&lt;UserEntity&gt; findByUsername(String username);&#10;&#10;    boolean existsByEmail(String email);&#10;&#10;    boolean existsByUsername(String username);&#10;&#10;    @Query(&quot;MATCH (u:User) WHERE u.email = $identifier OR u.username = $identifier RETURN u&quot;)&#10;    Optional&lt;UserEntity&gt; findByEmailOrUsername(@Param(&quot;identifier&quot;) String identifier);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;    MATCH (u:User {id: $userId})&#10;    OPTIONAL MATCH (u)-[:ENROLLED_IN]-&gt;(m:Major)&#10;    OPTIONAL MATCH (u)-[:IN_BATCH]-&gt;(b:Batch)&#10;    OPTIONAL MATCH (u)-[:HAS_GENDER]-&gt;(g:Gender)&#10;    OPTIONAL MATCH (u)-[:ENROLLED_IN]-&gt;(f:Faculty)&#10;    OPTIONAL MATCH (u)-[:ENROLLED_IN]-&gt;(c:College)&#10;    OPTIONAL MATCH (u)-[:WORKS_IN]-&gt;(wf:Faculty)&#10;    OPTIONAL MATCH (u)-[:WORKS_IN]-&gt;(wc:College)&#10;    OPTIONAL MATCH (u)-[:HAS_DEGREE]-&gt;(d:Degree)&#10;    OPTIONAL MATCH (u)-[:HAS_POSITION]-&gt;(p:Position)&#10;    OPTIONAL MATCH (u)-[:HAS_ACADEMIC]-&gt;(a:Academic)&#10;    OPTIONAL MATCH (u)-[:FRIEND]-(friend:User)&#10;    RETURN u, m, b, g, f, c, wf, wc, d, p, a, collect(friend) as friends&#10;&quot;&quot;&quot;)&#10;    Optional&lt;UserEntity&gt; findUserWithAllRelations(@Param(&quot;userId&quot;) String userId);&#10;&#10;&#10;    // ========================= RELATIONSHIP UPDATE METHODS =========================&#10;    &#10;    @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:ENROLLED_IN]-&gt;(m:Major)&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newMajor:Major {id: $majorId})&#10;        MERGE (u)-[:ENROLLED_IN]-&gt;(newMajor)&#10;        &quot;&quot;&quot;)&#10;    void updateUserMajor(@Param(&quot;userId&quot;) String userId, @Param(&quot;majorId&quot;) String majorId);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:IN_BATCH]-&gt;(b:Batch)&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newBatch:Batch {id: $batchId})&#10;        MERGE (u)-[:IN_BATCH]-&gt;(newBatch)&#10;        &quot;&quot;&quot;)&#10;    void updateUserBatch(@Param(&quot;userId&quot;) String userId, @Param(&quot;batchId&quot;) String batchId);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:HAS_GENDER]-&gt;(g:Gender)&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newGender:Gender {id: $genderId})&#10;        MERGE (u)-[:HAS_GENDER]-&gt;(newGender)&#10;        &quot;&quot;&quot;)&#10;    void updateUserGender(@Param(&quot;userId&quot;) String userId, @Param(&quot;genderId&quot;) String genderId);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:ENROLLED_IN]-&gt;(f:Faculty)&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newFaculty:Faculty {id: $facultyId})&#10;        MERGE (u)-[:ENROLLED_IN]-&gt;(newFaculty)&#10;        &quot;&quot;&quot;)&#10;    void updateUserFaculty(@Param(&quot;userId&quot;) String userId, @Param(&quot;facultyId&quot;) String facultyId);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:ENROLLED_IN]-&gt;(c:College)&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newCollege:College {id: $collegeId})&#10;        MERGE (u)-[:ENROLLED_IN]-&gt;(newCollege)&#10;        &quot;&quot;&quot;)&#10;    void updateUserCollege(@Param(&quot;userId&quot;) String userId, @Param(&quot;collegeId&quot;) String collegeId);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:WORKS_IN]-&gt;(f:Faculty)&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newFaculty:Faculty {id: $facultyId})&#10;        MERGE (u)-[:WORKS_IN]-&gt;(newFaculty)&#10;        &quot;&quot;&quot;)&#10;    void updateUserWorkingFaculty(@Param(&quot;userId&quot;) String userId, @Param(&quot;facultyId&quot;) String facultyId);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:WORKS_IN]-&gt;(c:College)&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newCollege:College {id: $collegeId})&#10;        MERGE (u)-[:WORKS_IN]-&gt;(newCollege)&#10;        &quot;&quot;&quot;)&#10;    void updateUserWorkingCollege(@Param(&quot;userId&quot;) String userId, @Param(&quot;collegeId&quot;) String collegeId);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:HAS_DEGREE]-&gt;(d:Degree)&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newDegree:Degree {id: $degreeId})&#10;        MERGE (u)-[:HAS_DEGREE]-&gt;(newDegree)&#10;        &quot;&quot;&quot;)&#10;    void updateUserDegree(@Param(&quot;userId&quot;) String userId, @Param(&quot;degreeId&quot;) String degreeId);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:HAS_POSITION]-&gt;(p:Position)&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newPosition:Position {id: $positionId})&#10;        MERGE (u)-[:HAS_POSITION]-&gt;(newPosition)&#10;        &quot;&quot;&quot;)&#10;    void updateUserPosition(@Param(&quot;userId&quot;) String userId, @Param(&quot;positionId&quot;) String positionId);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:HAS_ACADEMIC]-&gt;(a:Academic)&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newAcademic:Academic {id: $academicId})&#10;        MERGE (u)-[:HAS_ACADEMIC]-&gt;(newAcademic)&#10;        &quot;&quot;&quot;)&#10;    void updateUserAcademic(@Param(&quot;userId&quot;) String userId, @Param(&quot;academicId&quot;) String academicId);&#10;&#10;    // ========================= FRIENDSHIPS =========================&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u:User {id: $userId})-[:FRIEND]-(friend:User)&#10;                RETURN friend&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findFriends(@Param(&quot;userId&quot;) String userId);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u1:User {id: $userId1})-[:FRIEND]-(friend:User),&#10;                      (u2:User {id: $userId2})-[:FRIEND]-(friend)&#10;                WHERE friend.id &lt;&gt; $userId1 AND friend.id &lt;&gt; $userId2&#10;                RETURN DISTINCT friend&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findMutualFriends(@Param(&quot;userId1&quot;) String userId1, @Param(&quot;userId2&quot;) String userId2);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u1:User {id: $userId1}), (u2:User {id: $userId2})&#10;                WHERE u1.id &lt;&gt; u2.id&#10;                MERGE (u1)-[:FRIEND_REQUEST {createdAt: datetime(), status: 'PENDING'}]-&gt;(u2)&#10;            &quot;&quot;&quot;)&#10;    void sendFriendRequest(@Param(&quot;userId1&quot;) String userId1, @Param(&quot;userId2&quot;) String userId2);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u1:User {id: $userId1})-[r:FRIEND_REQUEST {status: 'PENDING'}]-&gt;(u2:User {id: $userId2})&#10;                DELETE r&#10;                MERGE (u1)-[:FRIEND {since: datetime()}]-(u2)&#10;            &quot;&quot;&quot;)&#10;    void acceptFriendRequest(@Param(&quot;userId1&quot;) String userId1, @Param(&quot;userId2&quot;) String userId2);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u1:User {id: $userId1})-[r:FRIEND_REQUEST]-&gt;(u2:User {id: $userId2})&#10;                DELETE r&#10;            &quot;&quot;&quot;)&#10;    void rejectFriendRequest(@Param(&quot;userId1&quot;) String userId1, @Param(&quot;userId2&quot;) String userId2);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u1:User {id: $userId1})-[r:FRIEND]-(u2:User {id: $userId2})&#10;                DELETE r&#10;            &quot;&quot;&quot;)&#10;    void deleteFriendship(@Param(&quot;userId1&quot;) String userId1, @Param(&quot;userId2&quot;) String userId2);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u1:User {id: $userId1})-[:FRIEND]-(u2:User {id: $userId2})&#10;                RETURN COUNT(*) &gt; 0&#10;            &quot;&quot;&quot;)&#10;    boolean areFriends(@Param(&quot;userId1&quot;) String userId1, @Param(&quot;userId2&quot;) String userId2);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u1:User {id: $userId1})-[:FRIEND_REQUEST {status: 'PENDING'}]-&gt;(u2:User {id: $userId2})&#10;                RETURN COUNT(*) &gt; 0&#10;            &quot;&quot;&quot;)&#10;    boolean hasPendingFriendRequest(@Param(&quot;userId1&quot;) String userId1, @Param(&quot;userId2&quot;) String userId2);&#10;&#10;    // Get friend requests sent TO this user&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (sender:User)-[:FRIEND_REQUEST {status: 'PENDING'}]-&gt;(u:User {id: $userId})&#10;                RETURN sender&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findIncomingFriendRequests(@Param(&quot;userId&quot;) String userId);&#10;&#10;    // Get friend requests sent BY this user&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u:User {id: $userId})-[:FRIEND_REQUEST {status: 'PENDING'}]-&gt;(receiver:User)&#10;                RETURN receiver&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findOutgoingFriendRequests(@Param(&quot;userId&quot;) String userId);&#10;&#10;    // ========================= FILTER QUERIES =========================&#10;&#10;    @Query(&quot;MATCH (u:User)-[:ENROLLED_IN]-&gt;(m:Major {name: $major}) RETURN u&quot;)&#10;    List&lt;UserEntity&gt; findByMajor(@Param(&quot;major&quot;) String major);&#10;&#10;    @Query(&quot;MATCH (u:User)-[:IN_BATCH]-&gt;(b:Batch {year: $batch}) RETURN u&quot;)&#10;    List&lt;UserEntity&gt; findByBatch(@Param(&quot;batch&quot;) int batch);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u:User)-[:ENROLLED_IN]-&gt;(:Major)-[:BELONGS_TO]-&gt;(:Faculty {name: $faculty})&#10;                RETURN u&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findByFaculty(@Param(&quot;faculty&quot;) String faculty);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u:User)-[:ENROLLED_IN]-&gt;(:Major)-[:BELONGS_TO]-&gt;(:Faculty)-[:PART_OF]-&gt;(:College {name: $college})&#10;                RETURN u&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findByCollege(@Param(&quot;college&quot;) String college);&#10;&#10;    // ========================= SAME ATTRIBUTE QUERIES =========================&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u:User {id: $userId})-[:ENROLLED_IN]-&gt;(m:Major)&lt;-[:ENROLLED_IN]-(other:User)&#10;                WHERE u.id &lt;&gt; other.id&#10;                RETURN other&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findUsersWithSameMajor(@Param(&quot;userId&quot;) String userId);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u:User {id: $userId})-[:IN_BATCH]-&gt;(b:Batch)&lt;-[:IN_BATCH]-(other:User)&#10;                WHERE u.id &lt;&gt; other.id&#10;                RETURN other&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findUsersWithSameBatch(@Param(&quot;userId&quot;) String userId);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u:User {id: $userId})-[:ENROLLED_IN]-&gt;(:Major)-[:BELONGS_TO]-&gt;(f:Faculty)&#10;                MATCH (other:User)-[:ENROLLED_IN]-&gt;(:Major)-[:BELONGS_TO]-&gt;(f)&#10;                WHERE other.id &lt;&gt; $userId&#10;                RETURN other&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findUsersWithSameFaculty(@Param(&quot;userId&quot;) String userId);&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u:User {id: $userId})-[:ENROLLED_IN]-&gt;(:Major)-[:BELONGS_TO]-&gt;(:Faculty)-[:PART_OF]-&gt;(c:College)&#10;                MATCH (other:User)-[:ENROLLED_IN]-&gt;(:Major)-[:BELONGS_TO]-&gt;(:Faculty)-[:PART_OF]-&gt;(c)&#10;                WHERE other.id &lt;&gt; $userId&#10;                RETURN other&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findUsersWithSameCollege(@Param(&quot;userId&quot;) String userId);&#10;&#10;    // ========================= ADVANCED FILTERING =========================&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u:User {id: $userId})&#10;                OPTIONAL MATCH (u)-[:ENROLLED_IN]-&gt;(uMajor:Major)&#10;                OPTIONAL MATCH (u)-[:IN_BATCH]-&gt;(uBatch:Batch)&#10;                OPTIONAL MATCH (uMajor)-[:BELONGS_TO]-&gt;(uFaculty:Faculty)&#10;                OPTIONAL MATCH (uFaculty)-[:PART_OF]-&gt;(uCollege:College)&#10;            &#10;                MATCH (other:User)&#10;                OPTIONAL MATCH (other)-[:ENROLLED_IN]-&gt;(oMajor:Major)&#10;                OPTIONAL MATCH (other)-[:IN_BATCH]-&gt;(oBatch:Batch)&#10;                OPTIONAL MATCH (oMajor)-[:BELONGS_TO]-&gt;(oFaculty:Faculty)&#10;                OPTIONAL MATCH (oFaculty)-[:PART_OF]-&gt;(oCollege:College)&#10;            &#10;                WHERE u.id &lt;&gt; other.id&#10;                  AND ($isSameMajor = false OR uMajor.name = oMajor.name)&#10;                  AND ($isSameBatch = false OR uBatch.year = oBatch.year)&#10;                  AND ($isSameFaculty = false OR uFaculty.name = oFaculty.name)&#10;                  AND ($isSameCollege = false OR uCollege.name = oCollege.name)&#10;            &#10;                RETURN DISTINCT other&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findUsersWithFilters(&#10;            @Param(&quot;userId&quot;) String userId,&#10;            @Param(&quot;isSameCollege&quot;) boolean isSameCollege,&#10;            @Param(&quot;isSameFaculty&quot;) boolean isSameFaculty,&#10;            @Param(&quot;isSameMajor&quot;) boolean isSameMajor,&#10;            @Param(&quot;isSameBatch&quot;) boolean isSameBatch&#10;    );&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u:User {id: $userId})-[:FRIEND]-(friend:User)&#10;                OPTIONAL MATCH (u)-[:ENROLLED_IN]-&gt;(uMajor:Major)&#10;                OPTIONAL MATCH (friend)-[:ENROLLED_IN]-&gt;(fMajor:Major)&#10;                OPTIONAL MATCH (uMajor)-[:BELONGS_TO]-&gt;(uFaculty:Faculty)&#10;                OPTIONAL MATCH (fMajor)-[:BELONGS_TO]-&gt;(fFaculty:Faculty)&#10;                OPTIONAL MATCH (uFaculty)-[:PART_OF]-&gt;(uCollege:College)&#10;                OPTIONAL MATCH (fFaculty)-[:PART_OF]-&gt;(fCollege:College)&#10;                OPTIONAL MATCH (u)-[:IN_BATCH]-&gt;(uBatch:Batch)&#10;                OPTIONAL MATCH (friend)-[:IN_BATCH]-&gt;(fBatch:Batch)&#10;            &#10;                WHERE ($isSameMajor = false OR uMajor.name = fMajor.name)&#10;                  AND ($isSameFaculty = false OR uFaculty.name = fFaculty.name)&#10;                  AND ($isSameCollege = false OR uCollege.name = fCollege.name)&#10;                  AND ($isSameBatch = false OR uBatch.year = fBatch.year)&#10;            &#10;                RETURN DISTINCT friend&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findFriendsWithFilters(&#10;            @Param(&quot;userId&quot;) String userId,&#10;            @Param(&quot;isSameCollege&quot;) boolean isSameCollege,&#10;            @Param(&quot;isSameFaculty&quot;) boolean isSameFaculty,&#10;            @Param(&quot;isSameMajor&quot;) boolean isSameMajor,&#10;            @Param(&quot;isSameBatch&quot;) boolean isSameBatch&#10;    );&#10;&#10;    // ========================= FRIEND SUGGESTIONS =========================&#10;&#10;    @Query(&quot;&quot;&quot;&#10;                MATCH (u:User {id: $userId})-[:FRIEND]-(friend:User)-[:FRIEND]-(suggestion:User)&#10;                WHERE u.id &lt;&gt; suggestion.id &#10;                  AND NOT (u)-[:FRIEND]-(suggestion)&#10;                  AND NOT (u)-[:FRIEND_REQUEST]-(suggestion)&#10;                RETURN suggestion, COUNT(*) AS mutualFriends&#10;                ORDER BY mutualFriends DESC&#10;                LIMIT 10&#10;            &quot;&quot;&quot;)&#10;    List&lt;UserEntity&gt; findFriendSuggestions(@Param(&quot;userId&quot;) String userId);&#10;}&#10;\" />\r\n            </PendingDiffInfo>\r\n          </value>\r\n        </entry>\r\n        <entry key=\"$PROJECT_DIR$/user-service/src/main/java/com/ctuconnect/service/UserService.java\">\r\n          <value>\r\n            <PendingDiffInfo>\r\n              <option name=\"filePath\" value=\"$PROJECT_DIR$/user-service/src/main/java/com/ctuconnect/service/UserService.java\" />\r\n              <option name=\"originalContent\" value=\"package com.ctuconnect.service;&#10;&#10;import com.ctuconnect.dto.*;&#10;import com.ctuconnect.entity.UserEntity;&#10;import com.ctuconnect.enums.Role;&#10;import com.ctuconnect.repository.*;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.NotNull;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.transaction.annotation.Transactional;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;import java.util.Objects;&#10;import java.util.Optional;&#10;import java.util.stream.Collectors;&#10;&#10;@Slf4j&#10;@Service&#10;public class UserService {&#10;&#10;    @Autowired&#10;    private UserRepository userRepository;&#10;&#10;    @Autowired&#10;    private UserEventPublisher userEventPublisher;&#10;&#10;    @Autowired&#10;    private MajorRepository majorRepository;&#10;&#10;    @Autowired&#10;    private FacultyRepository facultyRepository;&#10;&#10;    @Autowired&#10;    private BatchRepository batchRepository;&#10;&#10;    @Autowired&#10;    private GenderRepository genderRepository;&#10;&#10;    @Autowired&#10;    private DegreeRepository degreeRepository;&#10;&#10;    @Autowired&#10;    private AcademicRepository academicRepository;&#10;&#10;    @Autowired&#10;    private PositionRepository positionRepository;&#10;&#10;    @Autowired&#10;    private CollegeRepository collegeRepository;&#10;    /**&#10;     * Create a new user&#10;     */&#10;    public UserDTO createUser(UserDTO userDTO) {&#10;        UserEntity userEntity = mapToEntity(userDTO);&#10;        userEntity.setCreatedAt(LocalDateTime.now());&#10;        userEntity.setUpdatedAt(LocalDateTime.now());&#10;&#10;        UserEntity savedUser = userRepository.save(userEntity);&#10;        return mapToDTO(savedUser);&#10;    }&#10;&#10;    /**&#10;     * Get user profile by ID or email (fallback for compatibility)&#10;     */&#10;    public UserDTO getUserProfile(String userIdOrEmail) {&#10;        Optional&lt;UserEntity&gt; userEntity;&#10;&#10;        userEntity = userRepository.findUserWithAllRelations(userIdOrEmail);&#10;&#10;        if (userEntity.isEmpty()) {&#10;            throw new RuntimeException(&quot;User not found with id or email: &quot; + userIdOrEmail);&#10;        }&#10;&#10;        return mapToDTO(userEntity.get());&#10;    }&#10;&#10;&#10;    /**&#10;     * Update user profile by ID or email (fallback for compatibility)&#10;     */&#10;    public UserDTO updateUserProfile(String userIdOrEmail, UserDTO userDTO) {&#10;        Optional&lt;UserEntity&gt; userEntityOpt = userRepository.findById(userIdOrEmail);&#10;&#10;        // If not found by ID, try to find by email (fallback for compatibility)&#10;        if (userEntityOpt.isEmpty()) {&#10;            userEntityOpt = userRepository.findByEmail(userIdOrEmail);&#10;        }&#10;&#10;        if (userEntityOpt.isEmpty()) {&#10;            throw new RuntimeException(&quot;User not found with id or email: &quot; + userIdOrEmail);&#10;        }&#10;&#10;        UserEntity userEntity = userEntityOpt.get();&#10;&#10;        // Update basic profile fields&#10;        if (userDTO.getFullName() != null) userEntity.setFullName(userDTO.getFullName());&#10;        if (userDTO.getEmail() != null) userEntity.setEmail(userDTO.getEmail());&#10;        if (userDTO.getUsername() != null) userEntity.setUsername(userDTO.getUsername());&#10;        if (userDTO.getBio() != null) userEntity.setBio(userDTO.getBio());&#10;&#10;        // Update role safely&#10;        if (userDTO.getRole() != null) {&#10;            try {&#10;                userEntity.setRole(Role.valueOf(userDTO.getRole()));&#10;            } catch (IllegalArgumentException e) {&#10;                // Keep existing role if invalid role provided&#10;            }&#10;        }&#10;&#10;        // Update student-specific fields&#10;        if (userDTO.getStudentId() != null) userEntity.setStudentId(userDTO.getStudentId());&#10;&#10;        // Update faculty-specific fields&#10;        if (userDTO.getStaffCode() != null) userEntity.setStaffCode(userDTO.getStaffCode());&#10;&#10;&#10;        // Update media fields&#10;        if (userDTO.getAvatarUrl() != null) userEntity.setAvatarUrl(userDTO.getAvatarUrl());&#10;        if (userDTO.getBackgroundUrl() != null) userEntity.setBackgroundUrl(userDTO.getBackgroundUrl());&#10;&#10;        // Note: Academic relationships (major, batch, gender, faculty, college)&#10;        // should be handled through separate service methods that properly&#10;        // manage Neo4j relationships rather than direct field updates&#10;&#10;        userEntity.setUpdatedAt(LocalDateTime.now());&#10;        UserEntity updatedUser = userRepository.save(userEntity);&#10;&#10;        // Publish user profile updated event&#10;        userEventPublisher.publishUserProfileUpdatedEvent(&#10;                userIdOrEmail,&#10;                updatedUser.getEmail(),&#10;                updatedUser.getFullName(),&#10;                updatedUser.getFullName(), // firstName - using fullName as we don't have separate first/last names&#10;                &quot;&quot;, // lastName - empty as we're using fullName&#10;                updatedUser.getBio(),&#10;                updatedUser.getAvatarUrl() != null ? updatedUser.getAvatarUrl() : &quot;&quot;&#10;        );&#10;&#10;        return mapToDTO(updatedUser);&#10;    }&#10;    /**&#10;     * Send a friend request - GỬI LỜI MỜI KẾT BẠN&#10;     */&#10;    @Transactional&#10;    public void addFriend(String userId, String friendId) {&#10;        if (userId.equals(friendId)) {&#10;            throw new IllegalArgumentException(&quot;Cannot add yourself as a friend&quot;);&#10;        }&#10;&#10;        // Kiểm tra user tồn tại&#10;        UserEntity user = userRepository.findById(userId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#10;&#10;        UserEntity friend = userRepository.findById(friendId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Friend not found with id: &quot; + friendId));&#10;&#10;        // Kiểm tra đã là bạn bè chưa&#10;        if (userRepository.areFriends(userId, friendId)) {&#10;            throw new IllegalStateException(&quot;Users are already friends&quot;);&#10;        }&#10;&#10;        // Kiểm tra đã có friend request chưa&#10;        if (userRepository.hasPendingFriendRequest(userId, friendId)) {&#10;            throw new IllegalStateException(&quot;Friend request already sent&quot;);&#10;        }&#10;&#10;        // Kiểm tra xem có friend request ngược lại không (để auto-accept)&#10;        if (userRepository.hasPendingFriendRequest(friendId, userId)) {&#10;            // Tự động chấp nhận nếu đã có request ngược lại&#10;            userRepository.acceptFriendRequest(friendId, userId);&#10;&#10;            // Publish friend accepted event&#10;            userEventPublisher.publishUserRelationshipChangedEvent(&#10;                    userId,&#10;                    friendId,&#10;                    &quot;FRIEND_ACCEPTED&quot;,&#10;                    &quot;UPDATED&quot;&#10;            );&#10;        } else {&#10;            // Gửi friend request mới&#10;            userRepository.sendFriendRequest(userId, friendId);&#10;&#10;            // Publish friend request event&#10;            userEventPublisher.publishUserRelationshipChangedEvent(&#10;                    userId,&#10;                    friendId,&#10;                    &quot;FRIEND_REQUEST&quot;,&#10;                    &quot;CREATED&quot;&#10;            );&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get friend requests received by this user - LỜI MỜI KẾT BẠN NHẬN ĐƯỢC&#10;     */&#10;    public List&lt;UserDTO&gt; getFriendRequests(String userId) {&#10;        UserEntity user = userRepository.findById(userId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#10;&#10;        List&lt;UserEntity&gt; incomingRequests = userRepository.findIncomingFriendRequests(userId);&#10;        return incomingRequests.stream()&#10;                .map(this::mapToDTO)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * Get friend requests sent by this user - LỜI MỜI KẾT BẠN ĐÃ GỬI&#10;     */&#10;    public List&lt;UserDTO&gt; getFriendRequested(String userId) {&#10;        UserEntity user = userRepository.findById(userId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#10;&#10;        List&lt;UserEntity&gt; outgoingRequests = userRepository.findOutgoingFriendRequests(userId);&#10;        return outgoingRequests.stream()&#10;                .map(this::mapToDTO)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * Accept a friend request - CHẤP NHẬN LỜI MỜI KẾT BẠN&#10;     */&#10;    @Transactional&#10;    public void acceptFriendInvite(String userId, String friendId) {&#10;        UserEntity user = userRepository.findById(userId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#10;&#10;        UserEntity friend = userRepository.findById(friendId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Friend not found with id: &quot; + friendId));&#10;&#10;        // Kiểm tra có friend request từ friendId đến userId không&#10;        if (!userRepository.hasPendingFriendRequest(friendId, userId)) {&#10;            throw new IllegalStateException(&quot;No pending friend request from &quot; + friendId);&#10;        }&#10;&#10;        // Chấp nhận friend request&#10;        userRepository.acceptFriendRequest(friendId, userId);&#10;&#10;        // Publish friend accepted event&#10;        userEventPublisher.publishUserRelationshipChangedEvent(&#10;                userId,&#10;                friendId,&#10;                &quot;FRIEND_ACCEPTED&quot;,&#10;                &quot;UPDATED&quot;&#10;        );&#10;    }&#10;&#10;    /**&#10;     * Reject a friend request - TỪ CHỐI LỜI MỜI KẾT BẠN&#10;     */&#10;    @Transactional&#10;    public void rejectFriendInvite(String userId, String friendId) {&#10;        UserEntity user = userRepository.findById(userId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#10;&#10;        UserEntity friend = userRepository.findById(friendId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Friend not found with id: &quot; + friendId));&#10;&#10;        // Kiểm tra có friend request từ friendId đến userId không&#10;        if (!userRepository.hasPendingFriendRequest(friendId, userId)) {&#10;            throw new IllegalStateException(&quot;No pending friend request from &quot; + friendId);&#10;        }&#10;&#10;        // Từ chối friend request&#10;        userRepository.rejectFriendRequest(friendId, userId);&#10;&#10;        // Publish friend rejected event&#10;        userEventPublisher.publishUserRelationshipChangedEvent(&#10;                userId,&#10;                friendId,&#10;                &quot;FRIEND_REQUEST&quot;,&#10;                &quot;REJECTED&quot;&#10;        );&#10;    }&#10;&#10;    /**&#10;     * Remove a friend (unfriend) - HỦY KẾT BẠN&#10;     */&#10;    @Transactional&#10;    public void removeFriend(String userId, String friendId) {&#10;        UserEntity user = userRepository.findById(userId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#10;&#10;        UserEntity friend = userRepository.findById(friendId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Friend not found with id: &quot; + friendId));&#10;&#10;        // Kiểm tra có phải bạn bè không&#10;        if (!userRepository.areFriends(userId, friendId)) {&#10;            throw new IllegalStateException(&quot;Users are not friends&quot;);&#10;        }&#10;&#10;        // Xóa friendship&#10;        userRepository.deleteFriendship(userId, friendId);&#10;&#10;        // Publish friend removed event&#10;        userEventPublisher.publishUserRelationshipChangedEvent(&#10;                userId,&#10;                friendId,&#10;                &quot;FRIEND_REMOVED&quot;,&#10;                &quot;DELETED&quot;&#10;        );&#10;    }&#10;&#10;    /**&#10;     * Get all friends of a user - LẤY DANH SÁCH BẠN BÈ&#10;     */&#10;    public FriendsDTO getFriends(String userId) {&#10;        UserEntity user = userRepository.findById(userId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#10;&#10;        List&lt;UserEntity&gt; friends = userRepository.findFriends(userId);&#10;        List&lt;UserDTO&gt; friendDTOs = friends.stream()&#10;                .map(this::mapToDTO)&#10;                .collect(Collectors.toList());&#10;&#10;        return new FriendsDTO(friendDTOs);&#10;    }&#10;&#10;    /**&#10;     * Get mutual friends between two users - LẤY BẠN CHUNG&#10;     */&#10;    public FriendsDTO getMutualFriends(String userId, String otherUserId) {&#10;        UserEntity user = userRepository.findById(userId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#10;&#10;        UserEntity otherUser = userRepository.findById(otherUserId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Other user not found with id: &quot; + otherUserId));&#10;&#10;        List&lt;UserEntity&gt; mutualFriends = userRepository.findMutualFriends(userId, otherUserId);&#10;        List&lt;UserDTO&gt; mutualFriendDTOs = mutualFriends.stream()&#10;                .map(this::mapToDTO)&#10;                .collect(Collectors.toList());&#10;&#10;        return FriendsDTO.ofMutualFriends(mutualFriendDTOs);&#10;    }&#10;&#10;    /**&#10;     * Get friend suggestions - GỢI Ý KẾT BẠN&#10;     */&#10;    public FriendsDTO getFriendSuggestions(String userId) {&#10;        UserEntity user = userRepository.findById(userId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#10;&#10;        List&lt;UserEntity&gt; suggestions = userRepository.findFriendSuggestions(userId);&#10;        List&lt;UserDTO&gt; suggestionDTOs = suggestions.stream()&#10;                .map(u -&gt; {&#10;                    UserDTO dto = mapToDTO(u);&#10;                    // Calculate mutual friends count&#10;                    List&lt;UserEntity&gt; mutualFriends = userRepository.findMutualFriends(userId, u.getId());&#10;                    dto.setMutualFriendsCount(mutualFriends.size());&#10;&#10;                    // Calculate similarity&#10;                    calculateSimilarityScore(user, u, dto);&#10;                    return dto;&#10;                })&#10;                .collect(Collectors.toList());&#10;&#10;        return FriendsDTO.ofSuggestions(suggestionDTOs);&#10;    }&#10;&#10;    /**&#10;     * Filter users by relationship criteria - LỌC NGƯỜI DÙNG THEO TIÊU CHÍ&#10;     */&#10;    public List&lt;UserDTO&gt; getUsersByRelationshipFilters(String userId, RelationshipFilterDTO filters) {&#10;        UserEntity user = userRepository.findById(userId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#10;&#10;        List&lt;UserEntity&gt; filteredUsers;&#10;&#10;        // Sử dụng Neo4j query để filter hiệu quả&#10;        if (filters.getCollege() != null || filters.getFaculty() != null ||&#10;                filters.getMajor() != null || filters.getBatch() != null) {&#10;&#10;            // Convert filters to boolean flags for Neo4j query&#10;            boolean isSameCollege = filters.getCollege() != null;&#10;            boolean isSameFaculty = filters.getFaculty() != null;&#10;            boolean isSameMajor = filters.getMajor() != null;&#10;            boolean isSameBatch = filters.getBatch() != null;&#10;&#10;            filteredUsers = userRepository.findUsersWithFilters(userId, isSameCollege, isSameFaculty, isSameMajor, isSameBatch);&#10;        } else {&#10;            // If no specific filters, get all users except self&#10;            filteredUsers = userRepository.findAll().stream()&#10;                    .filter(u -&gt; !u.getId().equals(userId))&#10;                    .collect(Collectors.toList());&#10;        }&#10;&#10;        return filteredUsers.stream()&#10;                .filter(u -&gt; matchesFilters(user, u, filters))&#10;                .map(this::mapToDTO)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * Get all users (Admin only)&#10;     */&#10;    public List&lt;UserDTO&gt; getAllUsers() {&#10;        return userRepository.findAll().stream()&#10;                .map(this::mapToDTO)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * Delete user (Admin only)&#10;     */&#10;    @Transactional&#10;    public void deleteUser(String userId) {&#10;        UserEntity user = userRepository.findById(userId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#10;&#10;        // Xóa tất cả friend relationships và friend requests&#10;        List&lt;UserEntity&gt; friends = userRepository.findFriends(userId);&#10;        for (UserEntity friend : friends) {&#10;            userRepository.deleteFriendship(userId, friend.getId());&#10;        }&#10;&#10;        // Xóa tất cả friend requests (incoming và outgoing)&#10;        List&lt;UserEntity&gt; incomingRequests = userRepository.findIncomingFriendRequests(userId);&#10;        for (UserEntity requester : incomingRequests) {&#10;            userRepository.rejectFriendRequest(requester.getId(), userId);&#10;        }&#10;&#10;        List&lt;UserEntity&gt; outgoingRequests = userRepository.findOutgoingFriendRequests(userId);&#10;        for (UserEntity receiver : outgoingRequests) {&#10;            userRepository.rejectFriendRequest(userId, receiver.getId());&#10;        }&#10;&#10;        // Delete the user&#10;        userRepository.deleteById(userId);&#10;    }&#10;&#10;    /**&#10;     * Calculate similarity score for friend suggestions&#10;     */&#10;    private void calculateSimilarityScore(UserEntity user, UserEntity candidate, UserDTO candidateDTO) {&#10;        // Check similarity attributes using proper getter methods&#10;        candidateDTO.setSameCollege(Objects.equals(user.getCollegeName(), candidate.getCollegeName()));&#10;        candidateDTO.setSameFaculty(Objects.equals(user.getFacultyName(), candidate.getFacultyName()));&#10;        candidateDTO.setSameMajor(Objects.equals(user.getMajorName(), candidate.getMajorName()));&#10;        candidateDTO.setSameBatch(Objects.equals(user.getBatchYear(), candidate.getBatchYear()));&#10;    }&#10;&#10;    /**&#10;     * Check if user matches relationship filters&#10;     */&#10;    private boolean matchesFilters(UserEntity user, UserEntity candidate, RelationshipFilterDTO filters) {&#10;        if (filters.getCollege() != null &amp;&amp; !filters.getCollege().equals(candidate.getCollegeName())) {&#10;            return false;&#10;        }&#10;        if (filters.getFaculty() != null &amp;&amp; !filters.getFaculty().equals(candidate.getFacultyName())) {&#10;            return false;&#10;        }&#10;        if (filters.getMajor() != null &amp;&amp; !filters.getMajor().equals(candidate.getMajorName())) {&#10;            return false;&#10;        }&#10;        if (filters.getBatch() != null &amp;&amp; !filters.getBatch().equals(candidate.getBatchYear())) {&#10;            return false;&#10;        }&#10;        return filters.getGender() == null || filters.getGender().equals(candidate.getGenderName());&#10;    }&#10;&#10;    /**&#10;     * Map UserEntity to UserDTO&#10;     */&#10;    private UserDTO mapToDTO(UserEntity entity) {&#10;        UserDTO dto = new UserDTO();&#10;        dto.setId(entity.getId());&#10;        dto.setEmail(entity.getEmail());&#10;        dto.setUsername(entity.getUsername());&#10;        dto.setFullName(entity.getFullName());&#10;        dto.setRole(entity.getRole() != null ? entity.getRole().toString() : null);&#10;        dto.setBio(entity.getBio());&#10;        dto.setIsActive(entity.getIsActive());&#10;        dto.setIsProfileCompleted(entity.getIsProfileCompleted());&#10;        dto.setCreatedAt(entity.getCreatedAt());&#10;        dto.setUpdatedAt(entity.getUpdatedAt());&#10;&#10;        // Student fields&#10;        dto.setStudentId(entity.getStudentId());&#10;        dto.setMajor(entity.getMajor());&#10;        dto.setBatch(entity.getBatch());&#10;        // Lecturer fields&#10;        dto.setStaffCode(entity.getStaffCode());&#10;        dto.setAcademic(entity.getAcademic());&#10;        dto.setDegree(entity.getDegree());&#10;        dto.setPosition(entity.getPosition());&#10;&#10;        // Common fields&#10;        dto.setFaculty(entity.getFaculty());&#10;        dto.setCollege(entity.getCollege());&#10;        dto.setGender(entity.getGender());&#10;&#10;        // Media fields&#10;        dto.setAvatarUrl(entity.getAvatarUrl());&#10;        dto.setBackgroundUrl(entity.getBackgroundUrl());&#10;&#10;        // Friends mapping&#10;        if (entity.getFriends() != null) {&#10;            dto.setFriendIds(&#10;                    entity.getFriends().stream()&#10;                            .map(UserEntity::getId)&#10;                            .collect(Collectors.toSet())&#10;            );&#10;        }&#10;&#10;        return dto;&#10;    }&#10;&#10;&#10;    /**&#10;     * Map UserDTO to UserEntity&#10;     */&#10;    private UserEntity mapToEntity(UserDTO dto) {&#10;        UserEntity entity = new UserEntity();&#10;        entity.setId(dto.getId());&#10;        entity.setEmail(dto.getEmail());&#10;        entity.setUsername(dto.getUsername());&#10;        entity.setFullName(dto.getFullName());&#10;&#10;        // Handle role conversion safely&#10;        if (dto.getRole() != null) {&#10;            try {&#10;                entity.setRole(Role.valueOf(dto.getRole()));&#10;            } catch (IllegalArgumentException e) {&#10;                entity.setRole(Role.USER); // Default fallback&#10;            }&#10;        }&#10;&#10;        entity.setBio(dto.getBio());&#10;        entity.setIsActive(dto.getIsActive());&#10;&#10;        // Student fields&#10;        entity.setStudentId(dto.getStudentId());&#10;&#10;        // Faculty fields&#10;        entity.setStaffCode(dto.getStaffCode());&#10;&#10;        // Media fields&#10;        entity.setAvatarUrl(dto.getAvatarUrl());&#10;        entity.setBackgroundUrl(dto.getBackgroundUrl());&#10;&#10;        // Note: Relationship mappings (major, batch, gender, etc.) should be handled&#10;        // separately as they require database lookups to establish Neo4j relationships&#10;        // This method only handles direct field mappings&#10;&#10;        return entity;&#10;    }&#10;&#10;    public Boolean checkProfile(String currentUserId) {&#10;        UserEntity userEntity = userRepository.findById(currentUserId)&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + currentUserId));&#10;&#10;        // Map to DTO&#10;        UserDTO userDTO = mapToDTO(userEntity);&#10;&#10;        return userDTO.getIsProfileCompleted();&#10;    }&#10;&#10;    /**&#10;     * Update student profile with proper relationship mapping&#10;     */&#10;    @Transactional&#10;    public UserDTO updateStudentProfile(String userId, Object profileRequestObj) {&#10;        try {&#10;            // Convert Object to StudentProfileUpdateRequest&#10;            ObjectMapper mapper = new ObjectMapper();&#10;            StudentProfileUpdateRequest request = mapper.convertValue(profileRequestObj, StudentProfileUpdateRequest.class);&#10;&#10;            UserEntity userEntity = userRepository.findById(userId)&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#10;&#10;            // Update basic fields&#10;            userEntity.setFullName(request.getFullName());&#10;            userEntity.setBio(request.getBio());&#10;            userEntity.setStudentId(request.getStudentId());&#10;            userEntity.setAvatarUrl(request.getAvatarUrl());&#10;            userEntity.setBackgroundUrl(request.getBackgroundUrl());&#10;&#10;            // Update relationships&#10;            updateStudentRelationships(userEntity, request.getMajorCode(), request.getFacultyCode(), request.getCollegeCode(), request.getBatchYear(), request.getGenderCode());&#10;&#10;            userEntity.setIsProfileCompleted(true);&#10;            userEntity.updateTimestamp();&#10;&#10;            UserEntity savedUser = userRepository.save(userEntity);&#10;&#10;            // Publish user updated event&#10;//            userEventPublisher.publishUserUpdatedEvent(savedUser);&#10;&#10;            return mapToDTO(savedUser);&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(&quot;Error updating student profile: &quot; + e.getMessage(), e);&#10;        }&#10;    }&#10;&#10;    private void updateStudentRelationships(UserEntity userEntity, @NotBlank(message = &quot;Major is required&quot;) String majorCode, @NotBlank(message = &quot;Faculty is required&quot;) String facultyCode, @NotBlank(message = &quot;College is required&quot;) String collegeCode, @NotNull(message = &quot;Batch year is required&quot;) String batchYear, @NotBlank(message = &quot;Gender code is required&quot;) String genderCode) {&#10;&#10;        // Reset relationships to prevent duplicates - setting to null will cause Neo4j to delete the relationship&#10;        userEntity.setMajor(null);&#10;        userEntity.setFaculty(null);&#10;        userEntity.setCollege(null);&#10;        userEntity.setBatch(null);&#10;        userEntity.setGender(null);&#10;&#10;        // Save entity to delete existing relationships before creating new ones&#10;        userRepository.save(userEntity);&#10;&#10;        // Update major relationship&#10;        if (majorCode != null &amp;&amp; !majorCode.isEmpty()) {&#10;            majorRepository.findById(majorCode).ifPresentOrElse(&#10;                    userEntity::setMajor,&#10;                    () -&gt; {&#10;                        throw new RuntimeException(&quot;Major not found: &quot; + majorCode);&#10;                    }&#10;            );&#10;        }&#10;&#10;        // Update faculty relationship&#10;        if (facultyCode != null &amp;&amp; !facultyCode.isEmpty()) {&#10;            facultyRepository.findById(facultyCode).ifPresentOrElse(&#10;                    userEntity::setFaculty,&#10;                    () -&gt; {&#10;                        throw new RuntimeException(&quot;Faculty not found: &quot; + facultyCode);&#10;                    }&#10;            );&#10;        }&#10;&#10;        // Update college relationship&#10;        if (collegeCode != null &amp;&amp; !collegeCode.isEmpty()) {&#10;            collegeRepository.findById(collegeCode).ifPresentOrElse(&#10;                    userEntity::setCollege,&#10;                    () -&gt; {&#10;                        throw new RuntimeException(&quot;College not found: &quot; + collegeCode);&#10;                    }&#10;            );&#10;        }&#10;&#10;        // Update batch relationship&#10;        if (batchYear != null) {&#10;            batchRepository.findByYear(batchYear).ifPresentOrElse(&#10;                    userEntity::setBatch,&#10;                    () -&gt; {&#10;                        throw new RuntimeException(&quot;Batch not found: &quot; + batchYear);&#10;                    }&#10;            );&#10;        }&#10;&#10;        // Update gender relationship&#10;        if (genderCode != null &amp;&amp; !genderCode.isEmpty()) {&#10;            genderRepository.findById(genderCode).ifPresentOrElse(&#10;                    userEntity::setGender,&#10;                    () -&gt; {&#10;                        throw new RuntimeException(&quot;Gender not found: &quot; + genderCode);&#10;                    }&#10;            );&#10;        }&#10;&#10;        // Update&#10;    }&#10;&#10;&#10;    /**&#10;     * Update faculty profile with proper relationship mapping&#10;     */&#10;    @Transactional&#10;    public UserDTO updateLecturerProfile(String userId, Object profileRequestObj) {&#10;        try {&#10;            // Convert Object to FacultyProfileUpdateRequest&#10;            ObjectMapper mapper = new ObjectMapper();&#10;            LecturerProfileUpdateRequest request = mapper.convertValue(profileRequestObj, LecturerProfileUpdateRequest.class);&#10;&#10;            UserEntity userEntity = userRepository.findById(userId)&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#10;&#10;            // Update basic fields&#10;            userEntity.setFullName(request.getFullName());&#10;            userEntity.setBio(request.getBio());&#10;            userEntity.setStaffCode(request.getStaffCode());&#10;            userEntity.setAvatarUrl(request.getAvatarUrl());&#10;            userEntity.setBackgroundUrl(request.getBackgroundUrl());&#10;&#10;            // Update relationships&#10;&#10;            updateLecturerRelationships(userEntity, request.getDegreeCode(), request.getAcademicCode(), request.getPositionCode(), request.getFacultyCode(), request.getCollegeCode(), request.getGenderCode());&#10;&#10;            userEntity.setIsProfileCompleted(true);&#10;            userEntity.updateTimestamp();&#10;&#10;            UserEntity savedUser = userRepository.save(userEntity);&#10;&#10;            // Publish user updated event&#10;//            userEventPublisher.publishUserUpdatedEvent(savedUser);&#10;&#10;            return mapToDTO(savedUser);&#10;        } catch (Exception e) {&#10;            throw new RuntimeException(&quot;Error updating faculty profile: &quot; + e.getMessage(), e);&#10;        }&#10;    }&#10;&#10;    private void updateLecturerRelationships(UserEntity userEntity, String degreeCode, String academicCode, @NotBlank(message = &quot;Position is required&quot;) String positionCode, @NotBlank(message = &quot;Working faculty name is required&quot;) String facultyCode, @NotBlank(message = &quot;Working college name is required&quot;) String collegeCode,@NotBlank(message = &quot;Gender code is required&quot;) String genderCode) {&#10;&#10;        // Reset relationships to prevent duplicates - setting to null will cause Neo4j to delete the relationship&#10;        userEntity.setDegree(null);&#10;        userEntity.setAcademic(null);&#10;        userEntity.setPosition(null);&#10;        userEntity.setWorkingFaculty(null);&#10;        userEntity.setWorkingCollege(null);&#10;        userEntity.setGender(null);&#10;&#10;        // Save entity to delete existing relationships before creating new ones&#10;        userRepository.save(userEntity);&#10;&#10;        // Update degree relationship&#10;        if (degreeCode != null &amp;&amp; !degreeCode.isEmpty()) {&#10;            degreeRepository.findById(degreeCode).ifPresentOrElse(&#10;                    userEntity::setDegree,&#10;                    () -&gt; {&#10;                        throw new RuntimeException(&quot;Degree not found: &quot; + degreeCode);&#10;                    }&#10;            );&#10;        }&#10;&#10;        // Update academic relationship&#10;        if (academicCode != null &amp;&amp; !academicCode.isEmpty()) {&#10;            academicRepository.findById(academicCode).ifPresentOrElse(&#10;                    userEntity::setAcademic,&#10;                    () -&gt; {&#10;                        throw new RuntimeException(&quot;Academic not found: &quot; + academicCode);&#10;                    }&#10;            );&#10;        }&#10;&#10;        // Update position relationship&#10;        if (positionCode != null &amp;&amp; !positionCode.isEmpty()) {&#10;            positionRepository.findById(positionCode).ifPresentOrElse(&#10;                    userEntity::setPosition,&#10;                    () -&gt; {&#10;                        throw new RuntimeException(&quot;Position not found: &quot; + positionCode);&#10;                    }&#10;            );&#10;        }&#10;&#10;        // Update faculty relationship&#10;        if (facultyCode != null &amp;&amp; !facultyCode.isEmpty()) {&#10;            facultyRepository.findById(facultyCode).ifPresentOrElse(&#10;                    userEntity::setWorkingFaculty,&#10;                    () -&gt; {&#10;                        throw new RuntimeException(&quot;Faculty not found: &quot; + facultyCode);&#10;                    }&#10;            );&#10;        }&#10;&#10;        // Update college relationship&#10;        if (collegeCode != null &amp;&amp; !collegeCode.isEmpty()) {&#10;            collegeRepository.findById(collegeCode).ifPresentOrElse(&#10;                    userEntity::setWorkingCollege,&#10;                    () -&gt; {&#10;                        throw new RuntimeException(&quot;College not found: &quot; + collegeCode);&#10;                    }&#10;            );&#10;        }&#10;&#10;        // Update gender relationship&#10;        if (genderCode != null &amp;&amp; !genderCode.isEmpty()) {&#10;            genderRepository.findById(genderCode).ifPresentOrElse(&#10;                    userEntity::setGender,&#10;                    () -&gt; {&#10;                        throw new RuntimeException(&quot;Gender not found: &quot; + genderCode);&#10;                    }&#10;            );&#10;        }&#10;&#10;        // Update&#10;    }&#10;&#10;&#10;&#10;}&#10;\" />\r\n              <option name=\"updatedContent\" value=\"package com.ctuconnect.service;&#13;&#10;&#13;&#10;import com.ctuconnect.dto.*;&#13;&#10;import com.ctuconnect.entity.UserEntity;&#13;&#10;import com.ctuconnect.enums.Role;&#13;&#10;import com.ctuconnect.repository.*;&#13;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#13;&#10;import jakarta.validation.constraints.NotBlank;&#13;&#10;import jakarta.validation.constraints.NotNull;&#13;&#10;import lombok.extern.slf4j.Slf4j;&#13;&#10;import org.springframework.beans.factory.annotation.Autowired;&#13;&#10;import org.springframework.stereotype.Service;&#13;&#10;import org.springframework.transaction.annotation.Transactional;&#13;&#10;&#13;&#10;import java.time.LocalDateTime;&#13;&#10;import java.util.List;&#13;&#10;import java.util.Objects;&#13;&#10;import java.util.Optional;&#13;&#10;import java.util.stream.Collectors;&#13;&#10;&#13;&#10;@Slf4j&#13;&#10;@Service&#13;&#10;public class UserService {&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private UserRepository userRepository;&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private UserEventPublisher userEventPublisher;&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private MajorRepository majorRepository;&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private FacultyRepository facultyRepository;&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private BatchRepository batchRepository;&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private GenderRepository genderRepository;&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private DegreeRepository degreeRepository;&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private AcademicRepository academicRepository;&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private PositionRepository positionRepository;&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private CollegeRepository collegeRepository;&#13;&#10;    /**&#13;&#10;     * Create a new user&#13;&#10;     */&#13;&#10;    public UserDTO createUser(UserDTO userDTO) {&#13;&#10;        UserEntity userEntity = mapToEntity(userDTO);&#13;&#10;        userEntity.setCreatedAt(LocalDateTime.now());&#13;&#10;        userEntity.setUpdatedAt(LocalDateTime.now());&#13;&#10;&#13;&#10;        UserEntity savedUser = userRepository.save(userEntity);&#13;&#10;        return mapToDTO(savedUser);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Get user profile by ID or email (fallback for compatibility)&#13;&#10;     */&#13;&#10;    public UserDTO getUserProfile(String userIdOrEmail) {&#13;&#10;        Optional&lt;UserEntity&gt; userEntity;&#13;&#10;&#13;&#10;        userEntity = userRepository.findUserWithAllRelations(userIdOrEmail);&#13;&#10;&#13;&#10;        if (userEntity.isEmpty()) {&#13;&#10;            throw new RuntimeException(&quot;User not found with id or email: &quot; + userIdOrEmail);&#13;&#10;        }&#13;&#10;&#13;&#10;        return mapToDTO(userEntity.get());&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Update user profile by ID or email (fallback for compatibility)&#13;&#10;     */&#13;&#10;    @Transactional&#13;&#10;    public UserDTO updateUserProfile(String userIdOrEmail, UserDTO userDTO) {&#13;&#10;        Optional&lt;UserEntity&gt; userEntityOpt = userRepository.findById(userIdOrEmail);&#13;&#10;&#13;&#10;        // If not found by ID, try to find by email (fallback for compatibility)&#13;&#10;        if (userEntityOpt.isEmpty()) {&#13;&#10;            userEntityOpt = userRepository.findByEmail(userIdOrEmail);&#13;&#10;        }&#13;&#10;&#13;&#10;        if (userEntityOpt.isEmpty()) {&#13;&#10;            throw new RuntimeException(&quot;User not found with id or email: &quot; + userIdOrEmail);&#13;&#10;        }&#13;&#10;&#13;&#10;        UserEntity userEntity = userEntityOpt.get();&#13;&#10;        String userId = userEntity.getId();&#13;&#10;&#13;&#10;        // Update basic profile fields&#13;&#10;        if (userDTO.getFullName() != null) userEntity.setFullName(userDTO.getFullName());&#13;&#10;        if (userDTO.getEmail() != null) userEntity.setEmail(userDTO.getEmail());&#13;&#10;        if (userDTO.getUsername() != null) userEntity.setUsername(userDTO.getUsername());&#13;&#10;        if (userDTO.getBio() != null) userEntity.setBio(userDTO.getBio());&#13;&#10;&#13;&#10;        // Update role safely&#13;&#10;        if (userDTO.getRole() != null) {&#13;&#10;            try {&#13;&#10;                userEntity.setRole(Role.valueOf(userDTO.getRole()));&#13;&#10;            } catch (IllegalArgumentException e) {&#13;&#10;                // Keep existing role if invalid role provided&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        // Update student-specific fields&#13;&#10;        if (userDTO.getStudentId() != null) userEntity.setStudentId(userDTO.getStudentId());&#13;&#10;&#13;&#10;        // Update faculty-specific fields&#13;&#10;        if (userDTO.getStaffCode() != null) userEntity.setStaffCode(userDTO.getStaffCode());&#13;&#10;&#13;&#10;        // Update media fields&#13;&#10;        if (userDTO.getAvatarUrl() != null) userEntity.setAvatarUrl(userDTO.getAvatarUrl());&#13;&#10;        if (userDTO.getBackgroundUrl() != null) userEntity.setBackgroundUrl(userDTO.getBackgroundUrl());&#13;&#10;&#13;&#10;        // Update relationships - this fixes the duplicate relationship issue&#13;&#10;        if (userDTO.getMajorId() != null) {&#13;&#10;            updateUserMajor(userId, userDTO.getMajorId());&#13;&#10;        }&#13;&#10;        &#13;&#10;        if (userDTO.getBatchId() != null) {&#13;&#10;            updateUserBatch(userId, userDTO.getBatchId());&#13;&#10;        }&#13;&#10;        &#13;&#10;        if (userDTO.getGenderId() != null) {&#13;&#10;            updateUserGender(userId, userDTO.getGenderId());&#13;&#10;        }&#13;&#10;        &#13;&#10;        if (userDTO.getFacultyId() != null) {&#13;&#10;            if (userEntity.isStudent()) {&#13;&#10;                updateUserFaculty(userId, userDTO.getFacultyId());&#13;&#10;            } else {&#13;&#10;                updateUserWorkingFaculty(userId, userDTO.getFacultyId());&#13;&#10;            }&#13;&#10;        }&#13;&#10;        &#13;&#10;        if (userDTO.getCollegeId() != null) {&#13;&#10;            if (userEntity.isStudent()) {&#13;&#10;                updateUserCollege(userId, userDTO.getCollegeId());&#13;&#10;            } else {&#13;&#10;                updateUserWorkingCollege(userId, userDTO.getCollegeId());&#13;&#10;            }&#13;&#10;        }&#13;&#10;        &#13;&#10;        if (userDTO.getDegreeId() != null) {&#13;&#10;            updateUserDegree(userId, userDTO.getDegreeId());&#13;&#10;        }&#13;&#10;        &#13;&#10;        if (userDTO.getPositionId() != null) {&#13;&#10;            updateUserPosition(userId, userDTO.getPositionId());&#13;&#10;        }&#13;&#10;        &#13;&#10;        if (userDTO.getAcademicId() != null) {&#13;&#10;            updateUserAcademic(userId, userDTO.getAcademicId());&#13;&#10;        }&#13;&#10;&#13;&#10;        userEntity.setUpdatedAt(LocalDateTime.now());&#13;&#10;        UserEntity updatedUser = userRepository.save(userEntity);&#13;&#10;&#13;&#10;        // Publish user profile updated event&#13;&#10;        userEventPublisher.publishUserProfileUpdatedEvent(&#13;&#10;                userIdOrEmail,&#13;&#10;                updatedUser.getEmail(),&#13;&#10;                updatedUser.getFullName(),&#13;&#10;                updatedUser.getFullName(), // firstName - using fullName as we don't have separate first/last names&#13;&#10;                &quot;&quot;, // lastName - empty as we're using fullName&#13;&#10;                updatedUser.getBio(),&#13;&#10;                updatedUser.getAvatarUrl() != null ? updatedUser.getAvatarUrl() : &quot;&quot;&#13;&#10;        );&#13;&#10;&#13;&#10;        return mapToDTO(updatedUser);&#13;&#10;    }&#13;&#10;&#13;&#10;    // ========================= RELATIONSHIP UPDATE METHODS =========================&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Update user's major relationship (for students)&#13;&#10;     */&#13;&#10;    @Transactional&#13;&#10;    public void updateUserMajor(String userId, String majorId) {&#13;&#10;        // Verify user exists&#13;&#10;        userRepository.findById(userId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#13;&#10;        &#13;&#10;        // Verify major exists&#13;&#10;        majorRepository.findById(majorId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Major not found with id: &quot; + majorId));&#13;&#10;        &#13;&#10;        // Update relationship - this will delete old relationship and create new one&#13;&#10;        userRepository.updateUserMajor(userId, majorId);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Update user's batch relationship&#13;&#10;     */&#13;&#10;    @Transactional&#13;&#10;    public void updateUserBatch(String userId, String batchId) {&#13;&#10;        userRepository.findById(userId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#13;&#10;        &#13;&#10;        batchRepository.findById(batchId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Batch not found with id: &quot; + batchId));&#13;&#10;        &#13;&#10;        userRepository.updateUserBatch(userId, batchId);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Update user's gender relationship&#13;&#10;     */&#13;&#10;    @Transactional&#13;&#10;    public void updateUserGender(String userId, String genderId) {&#13;&#10;        userRepository.findById(userId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#13;&#10;        &#13;&#10;        genderRepository.findById(genderId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Gender not found with id: &quot; + genderId));&#13;&#10;        &#13;&#10;        userRepository.updateUserGender(userId, genderId);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Update user's faculty relationship (for students)&#13;&#10;     */&#13;&#10;    @Transactional&#13;&#10;    public void updateUserFaculty(String userId, String facultyId) {&#13;&#10;        userRepository.findById(userId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#13;&#10;        &#13;&#10;        facultyRepository.findById(facultyId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Faculty not found with id: &quot; + facultyId));&#13;&#10;        &#13;&#10;        userRepository.updateUserFaculty(userId, facultyId);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Update user's college relationship (for students)&#13;&#10;     */&#13;&#10;    @Transactional&#13;&#10;    public void updateUserCollege(String userId, String collegeId) {&#13;&#10;        userRepository.findById(userId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#13;&#10;        &#13;&#10;        collegeRepository.findById(collegeId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;College not found with id: &quot; + collegeId));&#13;&#10;        &#13;&#10;        userRepository.updateUserCollege(userId, collegeId);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Update user's working faculty relationship (for staff)&#13;&#10;     */&#13;&#10;    @Transactional&#13;&#10;    public void updateUserWorkingFaculty(String userId, String facultyId) {&#13;&#10;        userRepository.findById(userId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#13;&#10;        &#13;&#10;        facultyRepository.findById(facultyId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Faculty not found with id: &quot; + facultyId));&#13;&#10;        &#13;&#10;        userRepository.updateUserWorkingFaculty(userId, facultyId);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Update user's working college relationship (for staff)&#13;&#10;     */&#13;&#10;    @Transactional&#13;&#10;    public void updateUserWorkingCollege(String userId, String collegeId) {&#13;&#10;        userRepository.findById(userId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#13;&#10;        &#13;&#10;        collegeRepository.findById(collegeId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;College not found with id: &quot; + collegeId));&#13;&#10;        &#13;&#10;        userRepository.updateUserWorkingCollege(userId, collegeId);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Update user's degree relationship&#13;&#10;     */&#13;&#10;    @Transactional&#13;&#10;    public void updateUserDegree(String userId, String degreeId) {&#13;&#10;        userRepository.findById(userId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#13;&#10;        &#13;&#10;        degreeRepository.findById(degreeId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Degree not found with id: &quot; + degreeId));&#13;&#10;        &#13;&#10;        userRepository.updateUserDegree(userId, degreeId);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Update user's position relationship&#13;&#10;     */&#13;&#10;    @Transactional&#13;&#10;    public void updateUserPosition(String userId, String positionId) {&#13;&#10;        userRepository.findById(userId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#13;&#10;        &#13;&#10;        positionRepository.findById(positionId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Position not found with id: &quot; + positionId));&#13;&#10;        &#13;&#10;        userRepository.updateUserPosition(userId, positionId);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Update user's academic relationship&#13;&#10;     */&#13;&#10;    @Transactional&#13;&#10;    public void updateUserAcademic(String userId, String academicId) {&#13;&#10;        userRepository.findById(userId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#13;&#10;        &#13;&#10;        academicRepository.findById(academicId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Academic not found with id: &quot; + academicId));&#13;&#10;        &#13;&#10;        userRepository.updateUserAcademic(userId, academicId);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Send a friend request - GỬI LỜI MỜI KẾT BẠN&#13;&#10;     */&#13;&#10;    @Transactional&#13;&#10;    public void addFriend(String userId, String friendId) {&#13;&#10;        if (userId.equals(friendId)) {&#13;&#10;            throw new IllegalArgumentException(&quot;Cannot add yourself as a friend&quot;);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Kiểm tra user tồn tại&#13;&#10;        UserEntity user = userRepository.findById(userId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#13;&#10;&#13;&#10;        UserEntity friend = userRepository.findById(friendId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Friend not found with id: &quot; + friendId));&#13;&#10;&#13;&#10;        // Kiểm tra đã là bạn bè chưa&#13;&#10;        if (userRepository.areFriends(userId, friendId)) {&#13;&#10;            throw new IllegalStateException(&quot;Users are already friends&quot;);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Kiểm tra đã có friend request chưa&#13;&#10;        if (userRepository.hasPendingFriendRequest(userId, friendId)) {&#13;&#10;            throw new IllegalStateException(&quot;Friend request already sent&quot;);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Kiểm tra xem có friend request ngược lại không (để auto-accept)&#13;&#10;        if (userRepository.hasPendingFriendRequest(friendId, userId)) {&#13;&#10;            // Tự động chấp nhận nếu đã có request ngược lại&#13;&#10;            userRepository.acceptFriendRequest(friendId, userId);&#13;&#10;&#13;&#10;            // Publish friend accepted event&#13;&#10;            userEventPublisher.publishUserRelationshipChangedEvent(&#13;&#10;                    userId,&#13;&#10;                    friendId,&#13;&#10;                    &quot;FRIEND_ACCEPTED&quot;,&#13;&#10;                    &quot;UPDATED&quot;&#13;&#10;            );&#13;&#10;        } else {&#13;&#10;            // Gửi friend request mới&#13;&#10;            userRepository.sendFriendRequest(userId, friendId);&#13;&#10;&#13;&#10;            // Publish friend request event&#13;&#10;            userEventPublisher.publishUserRelationshipChangedEvent(&#13;&#10;                    userId,&#13;&#10;                    friendId,&#13;&#10;                    &quot;FRIEND_REQUEST&quot;,&#13;&#10;                    &quot;CREATED&quot;&#13;&#10;            );&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Get friend requests received by this user - LỜI MỜI KẾT BẠN NHẬN ĐƯỢC&#13;&#10;     */&#13;&#10;    public List&lt;UserDTO&gt; getFriendRequests(String userId) {&#13;&#10;        UserEntity user = userRepository.findById(userId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#13;&#10;&#13;&#10;        List&lt;UserEntity&gt; incomingRequests = userRepository.findIncomingFriendRequests(userId);&#13;&#10;        return incomingRequests.stream()&#13;&#10;                .map(this::mapToDTO)&#13;&#10;                .collect(Collectors.toList());&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Get friend requests sent by this user - LỜI MỜI KẾT BẠN ĐÃ GỬI&#13;&#10;     */&#13;&#10;    public List&lt;UserDTO&gt; getFriendRequested(String userId) {&#13;&#10;        UserEntity user = userRepository.findById(userId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#13;&#10;&#13;&#10;        List&lt;UserEntity&gt; outgoingRequests = userRepository.findOutgoingFriendRequests(userId);&#13;&#10;        return outgoingRequests.stream()&#13;&#10;                .map(this::mapToDTO)&#13;&#10;                .collect(Collectors.toList());&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Accept a friend request - CHẤP NHẬN LỜI MỜI KẾT BẠN&#13;&#10;     */&#13;&#10;    @Transactional&#13;&#10;    public void acceptFriendInvite(String userId, String friendId) {&#13;&#10;        UserEntity user = userRepository.findById(userId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#13;&#10;&#13;&#10;        UserEntity friend = userRepository.findById(friendId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Friend not found with id: &quot; + friendId));&#13;&#10;&#13;&#10;        // Kiểm tra có friend request từ friendId đến userId không&#13;&#10;        if (!userRepository.hasPendingFriendRequest(friendId, userId)) {&#13;&#10;            throw new IllegalStateException(&quot;No pending friend request from &quot; + friendId);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Chấp nhận friend request&#13;&#10;        userRepository.acceptFriendRequest(friendId, userId);&#13;&#10;&#13;&#10;        // Publish friend accepted event&#13;&#10;        userEventPublisher.publishUserRelationshipChangedEvent(&#13;&#10;                userId,&#13;&#10;                friendId,&#13;&#10;                &quot;FRIEND_ACCEPTED&quot;,&#13;&#10;                &quot;UPDATED&quot;&#13;&#10;        );&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Reject a friend request - TỪ CHỐI LỜI MỜI KẾT BẠN&#13;&#10;     */&#13;&#10;    @Transactional&#13;&#10;    public void rejectFriendInvite(String userId, String friendId) {&#13;&#10;        UserEntity user = userRepository.findById(userId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#13;&#10;&#13;&#10;        UserEntity friend = userRepository.findById(friendId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Friend not found with id: &quot; + friendId));&#13;&#10;&#13;&#10;        // Kiểm tra có friend request từ friendId đến userId không&#13;&#10;        if (!userRepository.hasPendingFriendRequest(friendId, userId)) {&#13;&#10;            throw new IllegalStateException(&quot;No pending friend request from &quot; + friendId);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Từ chối friend request&#13;&#10;        userRepository.rejectFriendRequest(friendId, userId);&#13;&#10;&#13;&#10;        // Publish friend rejected event&#13;&#10;        userEventPublisher.publishUserRelationshipChangedEvent(&#13;&#10;                userId,&#13;&#10;                friendId,&#13;&#10;                &quot;FRIEND_REQUEST&quot;,&#13;&#10;                &quot;REJECTED&quot;&#13;&#10;        );&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Remove a friend (unfriend) - HỦY KẾT BẠN&#13;&#10;     */&#13;&#10;    @Transactional&#13;&#10;    public void removeFriend(String userId, String friendId) {&#13;&#10;        UserEntity user = userRepository.findById(userId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#13;&#10;&#13;&#10;        UserEntity friend = userRepository.findById(friendId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Friend not found with id: &quot; + friendId));&#13;&#10;&#13;&#10;        // Kiểm tra có phải bạn bè không&#13;&#10;        if (!userRepository.areFriends(userId, friendId)) {&#13;&#10;            throw new IllegalStateException(&quot;Users are not friends&quot;);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Xóa friendship&#13;&#10;        userRepository.deleteFriendship(userId, friendId);&#13;&#10;&#13;&#10;        // Publish friend removed event&#13;&#10;        userEventPublisher.publishUserRelationshipChangedEvent(&#13;&#10;                userId,&#13;&#10;                friendId,&#13;&#10;                &quot;FRIEND_REMOVED&quot;,&#13;&#10;                &quot;DELETED&quot;&#13;&#10;        );&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Get all friends of a user - LẤY DANH SÁCH BẠN BÈ&#13;&#10;     */&#13;&#10;    public FriendsDTO getFriends(String userId) {&#13;&#10;        UserEntity user = userRepository.findById(userId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#13;&#10;&#13;&#10;        List&lt;UserEntity&gt; friends = userRepository.findFriends(userId);&#13;&#10;        List&lt;UserDTO&gt; friendDTOs = friends.stream()&#13;&#10;                .map(this::mapToDTO)&#13;&#10;                .collect(Collectors.toList());&#13;&#10;&#13;&#10;        return new FriendsDTO(friendDTOs);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Get mutual friends between two users - LẤY BẠN CHUNG&#13;&#10;     */&#13;&#10;    public FriendsDTO getMutualFriends(String userId, String otherUserId) {&#13;&#10;        UserEntity user = userRepository.findById(userId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#13;&#10;&#13;&#10;        UserEntity otherUser = userRepository.findById(otherUserId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;Other user not found with id: &quot; + otherUserId));&#13;&#10;&#13;&#10;        List&lt;UserEntity&gt; mutualFriends = userRepository.findMutualFriends(userId, otherUserId);&#13;&#10;        List&lt;UserDTO&gt; mutualFriendDTOs = mutualFriends.stream()&#13;&#10;                .map(this::mapToDTO)&#13;&#10;                .collect(Collectors.toList());&#13;&#10;&#13;&#10;        return FriendsDTO.ofMutualFriends(mutualFriendDTOs);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Get friend suggestions - GỢI Ý KẾT BẠN&#13;&#10;     */&#13;&#10;    public FriendsDTO getFriendSuggestions(String userId) {&#13;&#10;        UserEntity user = userRepository.findById(userId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#13;&#10;&#13;&#10;        List&lt;UserEntity&gt; suggestions = userRepository.findFriendSuggestions(userId);&#13;&#10;        List&lt;UserDTO&gt; suggestionDTOs = suggestions.stream()&#13;&#10;                .map(u -&gt; {&#13;&#10;                    UserDTO dto = mapToDTO(u);&#13;&#10;                    // Calculate mutual friends count&#13;&#10;                    List&lt;UserEntity&gt; mutualFriends = userRepository.findMutualFriends(userId, u.getId());&#13;&#10;                    dto.setMutualFriendsCount(mutualFriends.size());&#13;&#10;&#13;&#10;                    // Calculate similarity&#13;&#10;                    calculateSimilarityScore(user, u, dto);&#13;&#10;                    return dto;&#13;&#10;                })&#13;&#10;                .collect(Collectors.toList());&#13;&#10;&#13;&#10;        return FriendsDTO.ofSuggestions(suggestionDTOs);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Filter users by relationship criteria - LỌC NGƯỜI DÙNG THEO TIÊU CHÍ&#13;&#10;     */&#13;&#10;    public List&lt;UserDTO&gt; getUsersByRelationshipFilters(String userId, RelationshipFilterDTO filters) {&#13;&#10;        UserEntity user = userRepository.findById(userId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#13;&#10;&#13;&#10;        List&lt;UserEntity&gt; filteredUsers;&#13;&#10;&#13;&#10;        // Sử dụng Neo4j query để filter hiệu quả&#13;&#10;        if (filters.getCollege() != null || filters.getFaculty() != null ||&#13;&#10;                filters.getMajor() != null || filters.getBatch() != null) {&#13;&#10;&#13;&#10;            // Convert filters to boolean flags for Neo4j query&#13;&#10;            boolean isSameCollege = filters.getCollege() != null;&#13;&#10;            boolean isSameFaculty = filters.getFaculty() != null;&#13;&#10;            boolean isSameMajor = filters.getMajor() != null;&#13;&#10;            boolean isSameBatch = filters.getBatch() != null;&#13;&#10;&#13;&#10;            filteredUsers = userRepository.findUsersWithFilters(userId, isSameCollege, isSameFaculty, isSameMajor, isSameBatch);&#13;&#10;        } else {&#13;&#10;            // If no specific filters, get all users except self&#13;&#10;            filteredUsers = userRepository.findAll().stream()&#13;&#10;                    .filter(u -&gt; !u.getId().equals(userId))&#13;&#10;                    .collect(Collectors.toList());&#13;&#10;        }&#13;&#10;&#13;&#10;        return filteredUsers.stream()&#13;&#10;                .filter(u -&gt; matchesFilters(user, u, filters))&#13;&#10;                .map(this::mapToDTO)&#13;&#10;                .collect(Collectors.toList());&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Get all users (Admin only)&#13;&#10;     */&#13;&#10;    public List&lt;UserDTO&gt; getAllUsers() {&#13;&#10;        return userRepository.findAll().stream()&#13;&#10;                .map(this::mapToDTO)&#13;&#10;                .collect(Collectors.toList());&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Delete user (Admin only)&#13;&#10;     */&#13;&#10;    @Transactional&#13;&#10;    public void deleteUser(String userId) {&#13;&#10;        UserEntity user = userRepository.findById(userId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#13;&#10;&#13;&#10;        // Xóa tất cả friend relationships và friend requests&#13;&#10;        List&lt;UserEntity&gt; friends = userRepository.findFriends(userId);&#13;&#10;        for (UserEntity friend : friends) {&#13;&#10;            userRepository.deleteFriendship(userId, friend.getId());&#13;&#10;        }&#13;&#10;&#13;&#10;        // Xóa tất cả friend requests (incoming và outgoing)&#13;&#10;        List&lt;UserEntity&gt; incomingRequests = userRepository.findIncomingFriendRequests(userId);&#13;&#10;        for (UserEntity requester : incomingRequests) {&#13;&#10;            userRepository.rejectFriendRequest(requester.getId(), userId);&#13;&#10;        }&#13;&#10;&#13;&#10;        List&lt;UserEntity&gt; outgoingRequests = userRepository.findOutgoingFriendRequests(userId);&#13;&#10;        for (UserEntity receiver : outgoingRequests) {&#13;&#10;            userRepository.rejectFriendRequest(userId, receiver.getId());&#13;&#10;        }&#13;&#10;&#13;&#10;        // Delete the user&#13;&#10;        userRepository.deleteById(userId);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Calculate similarity score for friend suggestions&#13;&#10;     */&#13;&#10;    private void calculateSimilarityScore(UserEntity user, UserEntity candidate, UserDTO candidateDTO) {&#13;&#10;        // Check similarity attributes using proper getter methods&#13;&#10;        candidateDTO.setSameCollege(Objects.equals(user.getCollegeName(), candidate.getCollegeName()));&#13;&#10;        candidateDTO.setSameFaculty(Objects.equals(user.getFacultyName(), candidate.getFacultyName()));&#13;&#10;        candidateDTO.setSameMajor(Objects.equals(user.getMajorName(), candidate.getMajorName()));&#13;&#10;        candidateDTO.setSameBatch(Objects.equals(user.getBatchYear(), candidate.getBatchYear()));&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Check if user matches relationship filters&#13;&#10;     */&#13;&#10;    private boolean matchesFilters(UserEntity user, UserEntity candidate, RelationshipFilterDTO filters) {&#13;&#10;        if (filters.getCollege() != null &amp;&amp; !filters.getCollege().equals(candidate.getCollegeName())) {&#13;&#10;            return false;&#13;&#10;        }&#13;&#10;        if (filters.getFaculty() != null &amp;&amp; !filters.getFaculty().equals(candidate.getFacultyName())) {&#13;&#10;            return false;&#13;&#10;        }&#13;&#10;        if (filters.getMajor() != null &amp;&amp; !filters.getMajor().equals(candidate.getMajorName())) {&#13;&#10;            return false;&#13;&#10;        }&#13;&#10;        if (filters.getBatch() != null &amp;&amp; !filters.getBatch().equals(candidate.getBatchYear())) {&#13;&#10;            return false;&#13;&#10;        }&#13;&#10;        return filters.getGender() == null || filters.getGender().equals(candidate.getGenderName());&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Map UserEntity to UserDTO&#13;&#10;     */&#13;&#10;    private UserDTO mapToDTO(UserEntity entity) {&#13;&#10;        UserDTO dto = new UserDTO();&#13;&#10;        dto.setId(entity.getId());&#13;&#10;        dto.setEmail(entity.getEmail());&#13;&#10;        dto.setUsername(entity.getUsername());&#13;&#10;        dto.setFullName(entity.getFullName());&#13;&#10;        dto.setRole(entity.getRole() != null ? entity.getRole().toString() : null);&#13;&#10;        dto.setBio(entity.getBio());&#13;&#10;        dto.setIsActive(entity.getIsActive());&#13;&#10;        dto.setIsProfileCompleted(entity.getIsProfileCompleted());&#13;&#10;        dto.setCreatedAt(entity.getCreatedAt());&#13;&#10;        dto.setUpdatedAt(entity.getUpdatedAt());&#13;&#10;&#13;&#10;        // Student fields&#13;&#10;        dto.setStudentId(entity.getStudentId());&#13;&#10;        dto.setMajor(entity.getMajor());&#13;&#10;        dto.setBatch(entity.getBatch());&#13;&#10;        // Lecturer fields&#13;&#10;        dto.setStaffCode(entity.getStaffCode());&#13;&#10;        dto.setAcademic(entity.getAcademic());&#13;&#10;        dto.setDegree(entity.getDegree());&#13;&#10;        dto.setPosition(entity.getPosition());&#13;&#10;&#13;&#10;        // Common fields&#13;&#10;        dto.setFaculty(entity.getFaculty());&#13;&#10;        dto.setCollege(entity.getCollege());&#13;&#10;        dto.setGender(entity.getGender());&#13;&#10;&#13;&#10;        // Media fields&#13;&#10;        dto.setAvatarUrl(entity.getAvatarUrl());&#13;&#10;        dto.setBackgroundUrl(entity.getBackgroundUrl());&#13;&#10;&#13;&#10;        // Friends mapping&#13;&#10;        if (entity.getFriends() != null) {&#13;&#10;            dto.setFriendIds(&#13;&#10;                    entity.getFriends().stream()&#13;&#10;                            .map(UserEntity::getId)&#13;&#10;                            .collect(Collectors.toSet())&#13;&#10;            );&#13;&#10;        }&#13;&#10;&#13;&#10;        return dto;&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Map UserDTO to UserEntity&#13;&#10;     */&#13;&#10;    private UserEntity mapToEntity(UserDTO dto) {&#13;&#10;        UserEntity entity = new UserEntity();&#13;&#10;        entity.setId(dto.getId());&#13;&#10;        entity.setEmail(dto.getEmail());&#13;&#10;        entity.setUsername(dto.getUsername());&#13;&#10;        entity.setFullName(dto.getFullName());&#13;&#10;&#13;&#10;        // Handle role conversion safely&#13;&#10;        if (dto.getRole() != null) {&#13;&#10;            try {&#13;&#10;                entity.setRole(Role.valueOf(dto.getRole()));&#13;&#10;            } catch (IllegalArgumentException e) {&#13;&#10;                entity.setRole(Role.USER); // Default fallback&#13;&#10;            }&#13;&#10;        }&#13;&#10;&#13;&#10;        entity.setBio(dto.getBio());&#13;&#10;        entity.setIsActive(dto.getIsActive());&#13;&#10;&#13;&#10;        // Student fields&#13;&#10;        entity.setStudentId(dto.getStudentId());&#13;&#10;&#13;&#10;        // Faculty fields&#13;&#10;        entity.setStaffCode(dto.getStaffCode());&#13;&#10;&#13;&#10;        // Media fields&#13;&#10;        entity.setAvatarUrl(dto.getAvatarUrl());&#13;&#10;        entity.setBackgroundUrl(dto.getBackgroundUrl());&#13;&#10;&#13;&#10;        // Note: Relationship mappings (major, batch, gender, etc.) should be handled&#13;&#10;        // separately as they require database lookups to establish Neo4j relationships&#13;&#10;        // This method only handles direct field mappings&#13;&#10;&#13;&#10;        return entity;&#13;&#10;    }&#13;&#10;&#13;&#10;    public Boolean checkProfile(String currentUserId) {&#13;&#10;        UserEntity userEntity = userRepository.findById(currentUserId)&#13;&#10;                .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + currentUserId));&#13;&#10;&#13;&#10;        // Map to DTO&#13;&#10;        UserDTO userDTO = mapToDTO(userEntity);&#13;&#10;&#13;&#10;        return userDTO.getIsProfileCompleted();&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Update student profile with proper relationship mapping&#13;&#10;     */&#13;&#10;    @Transactional&#13;&#10;    public UserDTO updateStudentProfile(String userId, Object profileRequestObj) {&#13;&#10;        try {&#13;&#10;            // Convert Object to StudentProfileUpdateRequest&#13;&#10;            ObjectMapper mapper = new ObjectMapper();&#13;&#10;            StudentProfileUpdateRequest request = mapper.convertValue(profileRequestObj, StudentProfileUpdateRequest.class);&#13;&#10;&#13;&#10;            UserEntity userEntity = userRepository.findById(userId)&#13;&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#13;&#10;&#13;&#10;            // Update basic fields&#13;&#10;            userEntity.setFullName(request.getFullName());&#13;&#10;            userEntity.setBio(request.getBio());&#13;&#10;            userEntity.setStudentId(request.getStudentId());&#13;&#10;            userEntity.setAvatarUrl(request.getAvatarUrl());&#13;&#10;            userEntity.setBackgroundUrl(request.getBackgroundUrl());&#13;&#10;&#13;&#10;            // Update relationships&#13;&#10;            updateStudentRelationships(userEntity, request.getMajorCode(), request.getFacultyCode(), request.getCollegeCode(), request.getBatchYear(), request.getGenderCode());&#13;&#10;&#13;&#10;            userEntity.setIsProfileCompleted(true);&#13;&#10;            userEntity.updateTimestamp();&#13;&#10;&#13;&#10;            UserEntity savedUser = userRepository.save(userEntity);&#13;&#10;&#13;&#10;            // Publish user updated event&#13;&#10;//            userEventPublisher.publishUserUpdatedEvent(savedUser);&#13;&#10;&#13;&#10;            return mapToDTO(savedUser);&#13;&#10;        } catch (Exception e) {&#13;&#10;            throw new RuntimeException(&quot;Error updating student profile: &quot; + e.getMessage(), e);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void updateStudentRelationships(UserEntity userEntity, @NotBlank(message = &quot;Major is required&quot;) String majorCode, @NotBlank(message = &quot;Faculty is required&quot;) String facultyCode, @NotBlank(message = &quot;College is required&quot;) String collegeCode, @NotNull(message = &quot;Batch year is required&quot;) String batchYear, @NotBlank(message = &quot;Gender code is required&quot;) String genderCode) {&#13;&#10;&#13;&#10;        // Reset relationships to prevent duplicates - setting to null will cause Neo4j to delete the relationship&#13;&#10;        userEntity.setMajor(null);&#13;&#10;        userEntity.setFaculty(null);&#13;&#10;        userEntity.setCollege(null);&#13;&#10;        userEntity.setBatch(null);&#13;&#10;        userEntity.setGender(null);&#13;&#10;&#13;&#10;        // Save entity to delete existing relationships before creating new ones&#13;&#10;        userRepository.save(userEntity);&#13;&#10;&#13;&#10;        // Update major relationship&#13;&#10;        if (majorCode != null &amp;&amp; !majorCode.isEmpty()) {&#13;&#10;            majorRepository.findById(majorCode).ifPresentOrElse(&#13;&#10;                    userEntity::setMajor,&#13;&#10;                    () -&gt; {&#13;&#10;                        throw new RuntimeException(&quot;Major not found: &quot; + majorCode);&#13;&#10;                    }&#13;&#10;            );&#13;&#10;        }&#13;&#10;&#13;&#10;        // Update faculty relationship&#13;&#10;        if (facultyCode != null &amp;&amp; !facultyCode.isEmpty()) {&#13;&#10;            facultyRepository.findById(facultyCode).ifPresentOrElse(&#13;&#10;                    userEntity::setFaculty,&#13;&#10;                    () -&gt; {&#13;&#10;                        throw new RuntimeException(&quot;Faculty not found: &quot; + facultyCode);&#13;&#10;                    }&#13;&#10;            );&#13;&#10;        }&#13;&#10;&#13;&#10;        // Update college relationship&#13;&#10;        if (collegeCode != null &amp;&amp; !collegeCode.isEmpty()) {&#13;&#10;            collegeRepository.findById(collegeCode).ifPresentOrElse(&#13;&#10;                    userEntity::setCollege,&#13;&#10;                    () -&gt; {&#13;&#10;                        throw new RuntimeException(&quot;College not found: &quot; + collegeCode);&#13;&#10;                    }&#13;&#10;            );&#13;&#10;        }&#13;&#10;&#13;&#10;        // Update batch relationship&#13;&#10;        if (batchYear != null) {&#13;&#10;            batchRepository.findByYear(batchYear).ifPresentOrElse(&#13;&#10;                    userEntity::setBatch,&#13;&#10;                    () -&gt; {&#13;&#10;                        throw new RuntimeException(&quot;Batch not found: &quot; + batchYear);&#13;&#10;                    }&#13;&#10;            );&#13;&#10;        }&#13;&#10;&#13;&#10;        // Update gender relationship&#13;&#10;        if (genderCode != null &amp;&amp; !genderCode.isEmpty()) {&#13;&#10;            genderRepository.findById(genderCode).ifPresentOrElse(&#13;&#10;                    userEntity::setGender,&#13;&#10;                    () -&gt; {&#13;&#10;                        throw new RuntimeException(&quot;Gender not found: &quot; + genderCode);&#13;&#10;                    }&#13;&#10;            );&#13;&#10;        }&#13;&#10;&#13;&#10;        // Update&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Update faculty profile with proper relationship mapping&#13;&#10;     */&#13;&#10;    @Transactional&#13;&#10;    public UserDTO updateLecturerProfile(String userId, Object profileRequestObj) {&#13;&#10;        try {&#13;&#10;            // Convert Object to FacultyProfileUpdateRequest&#13;&#10;            ObjectMapper mapper = new ObjectMapper();&#13;&#10;            LecturerProfileUpdateRequest request = mapper.convertValue(profileRequestObj, LecturerProfileUpdateRequest.class);&#13;&#10;&#13;&#10;            UserEntity userEntity = userRepository.findById(userId)&#13;&#10;                    .orElseThrow(() -&gt; new RuntimeException(&quot;User not found with id: &quot; + userId));&#13;&#10;&#13;&#10;            // Update basic fields&#13;&#10;            userEntity.setFullName(request.getFullName());&#13;&#10;            userEntity.setBio(request.getBio());&#13;&#10;            userEntity.setStaffCode(request.getStaffCode());&#13;&#10;            userEntity.setAvatarUrl(request.getAvatarUrl());&#13;&#10;            userEntity.setBackgroundUrl(request.getBackgroundUrl());&#13;&#10;&#13;&#10;            // Update relationships&#13;&#10;&#13;&#10;            updateLecturerRelationships(userEntity, request.getDegreeCode(), request.getAcademicCode(), request.getPositionCode(), request.getFacultyCode(), request.getCollegeCode(), request.getGenderCode());&#13;&#10;&#13;&#10;            userEntity.setIsProfileCompleted(true);&#13;&#10;            userEntity.updateTimestamp();&#13;&#10;&#13;&#10;            UserEntity savedUser = userRepository.save(userEntity);&#13;&#10;&#13;&#10;            // Publish user updated event&#13;&#10;//            userEventPublisher.publishUserUpdatedEvent(savedUser);&#13;&#10;&#13;&#10;            return mapToDTO(savedUser);&#13;&#10;        } catch (Exception e) {&#13;&#10;            throw new RuntimeException(&quot;Error updating faculty profile: &quot; + e.getMessage(), e);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void updateLecturerRelationships(UserEntity userEntity, String degreeCode, String academicCode, @NotBlank(message = &quot;Position is required&quot;) String positionCode, @NotBlank(message = &quot;Working faculty name is required&quot;) String facultyCode, @NotBlank(message = &quot;Working college name is required&quot;) String collegeCode,@NotBlank(message = &quot;Gender code is required&quot;) String genderCode) {&#13;&#10;&#13;&#10;        // Reset relationships to prevent duplicates - setting to null will cause Neo4j to delete the relationship&#13;&#10;        userEntity.setDegree(null);&#13;&#10;        userEntity.setAcademic(null);&#13;&#10;        userEntity.setPosition(null);&#13;&#10;        userEntity.setWorkingFaculty(null);&#13;&#10;        userEntity.setWorkingCollege(null);&#13;&#10;        userEntity.setGender(null);&#13;&#10;&#13;&#10;        // Save entity to delete existing relationships before creating new ones&#13;&#10;        userRepository.save(userEntity);&#13;&#10;&#13;&#10;        // Update degree relationship&#13;&#10;        if (degreeCode != null &amp;&amp; !degreeCode.isEmpty()) {&#13;&#10;            degreeRepository.findById(degreeCode).ifPresentOrElse(&#13;&#10;                    userEntity::setDegree,&#13;&#10;                    () -&gt; {&#13;&#10;                        throw new RuntimeException(&quot;Degree not found: &quot; + degreeCode);&#13;&#10;                    }&#13;&#10;            );&#13;&#10;        }&#13;&#10;&#13;&#10;        // Update academic relationship&#13;&#10;        if (academicCode != null &amp;&amp; !academicCode.isEmpty()) {&#13;&#10;            academicRepository.findById(academicCode).ifPresentOrElse(&#13;&#10;                    userEntity::setAcademic,&#13;&#10;                    () -&gt; {&#13;&#10;                        throw new RuntimeException(&quot;Academic not found: &quot; + academicCode);&#13;&#10;                    }&#13;&#10;            );&#13;&#10;        }&#13;&#10;&#13;&#10;        // Update position relationship&#13;&#10;        if (positionCode != null &amp;&amp; !positionCode.isEmpty()) {&#13;&#10;            positionRepository.findById(positionCode).ifPresentOrElse(&#13;&#10;                    userEntity::setPosition,&#13;&#10;                    () -&gt; {&#13;&#10;                        throw new RuntimeException(&quot;Position not found: &quot; + positionCode);&#13;&#10;                    }&#13;&#10;            );&#13;&#10;        }&#13;&#10;&#13;&#10;        // Update faculty relationship&#13;&#10;        if (facultyCode != null &amp;&amp; !facultyCode.isEmpty()) {&#13;&#10;            facultyRepository.findById(facultyCode).ifPresentOrElse(&#13;&#10;                    userEntity::setWorkingFaculty,&#13;&#10;                    () -&gt; {&#13;&#10;                        throw new RuntimeException(&quot;Faculty not found: &quot; + facultyCode);&#13;&#10;                    }&#13;&#10;            );&#13;&#10;        }&#13;&#10;&#13;&#10;        // Update college relationship&#13;&#10;        if (collegeCode != null &amp;&amp; !collegeCode.isEmpty()) {&#13;&#10;            collegeRepository.findById(collegeCode).ifPresentOrElse(&#13;&#10;                    userEntity::setWorkingCollege,&#13;&#10;                    () -&gt; {&#13;&#10;                        throw new RuntimeException(&quot;College not found: &quot; + collegeCode);&#13;&#10;                    }&#13;&#10;            );&#13;&#10;        }&#13;&#10;&#13;&#10;        // Update gender relationship&#13;&#10;        if (genderCode != null &amp;&amp; !genderCode.isEmpty()) {&#13;&#10;            genderRepository.findById(genderCode).ifPresentOrElse(&#13;&#10;                    userEntity::setGender,&#13;&#10;                    () -&gt; {&#13;&#10;                        throw new RuntimeException(&quot;Gender not found: &quot; + genderCode);&#13;&#10;                    }&#13;&#10;            );&#13;&#10;        }&#13;&#10;&#13;&#10;        // Update&#13;&#10;    }&#13;&#10;&#13;&#10;&#13;&#10;&#13;&#10;}&#10;\" />\r\n            </PendingDiffInfo>\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/copilotDiffState.xml b/.idea/copilotDiffState.xml
--- a/.idea/copilotDiffState.xml	(revision f08f1d49d319bbab2efbea29650ac17cd6ac4cf8)
+++ b/.idea/copilotDiffState.xml	(date 1754053344127)
@@ -3,6 +3,111 @@
   <component name="CopilotDiffPersistence">
     <option name="pendingDiffs">
       <map>
+        <entry key="$PROJECT_DIR$/client-frontend/src/components/post/PostCard.tsx">
+          <value>
+            <PendingDiffInfo>
+              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/components/post/PostCard.tsx" />
+              <option name="updatedContent" value="'use client';&#10;&#10;import React, { useState } from 'react';&#10;import { Post, CreateCommentRequest } from '@/types';&#10;import { postService } from '@/services/postService';&#10;import { Button } from '@/components/ui/Button';&#10;import { Card } from '@/components/ui/Card';&#10;import { Textarea } from '@/components/ui/Textarea';&#10;import { LoadingSpinner } from '@/components/ui/LoadingSpinner';&#10;import { &#10;  Heart, &#10;  MessageCircle, &#10;  Share, &#10;  Bookmark, &#10;  MoreHorizontal,&#10;  Send,&#10;  Eye&#10;} from 'lucide-react';&#10;import { formatDistanceToNow } from 'date-fns';&#10;&#10;interface PostCardProps {&#10;  post: Post;&#10;  onPostUpdate?: (updatedPost: Post) =&gt; void;&#10;  onPostDelete?: (postId: string) =&gt; void;&#10;  className?: string;&#10;}&#10;&#10;export const PostCard: React.FC&lt;PostCardProps&gt; = ({&#10;  post,&#10;  onPostUpdate,&#10;  onPostDelete,&#10;  className = ''&#10;}) =&gt; {&#10;  const [isLiked, setIsLiked] = useState(false);&#10;  const [isBookmarked, setIsBookmarked] = useState(false);&#10;  const [showComments, setShowComments] = useState(false);&#10;  const [commentText, setCommentText] = useState('');&#10;  const [comments, setComments] = useState&lt;any[]&gt;([]);&#10;  const [isLoadingComments, setIsLoadingComments] = useState(false);&#10;  const [isSubmittingComment, setIsSubmittingComment] = useState(false);&#10;  const [isLoadingInteraction, setIsLoadingInteraction] = useState(false);&#10;&#10;  // Load comments when showing comments section&#10;  const handleShowComments = async () =&gt; {&#10;    if (!showComments &amp;&amp; comments.length === 0) {&#10;      setIsLoadingComments(true);&#10;      try {&#10;        const response = await postService.getComments(post.id);&#10;        setComments(response.content);&#10;      } catch (error) {&#10;        console.error('Failed to load comments:', error);&#10;      } finally {&#10;        setIsLoadingComments(false);&#10;      }&#10;    }&#10;    setShowComments(!showComments);&#10;  };&#10;&#10;  // Handle like/unlike&#10;  const handleLike = async () =&gt; {&#10;    if (isLoadingInteraction) return;&#10;    &#10;    setIsLoadingInteraction(true);&#10;    try {&#10;      await postService.toggleLike(post.id);&#10;      setIsLiked(!isLiked);&#10;      &#10;      // Update post stats optimistically&#10;      const updatedPost = {&#10;        ...post,&#10;        stats: {&#10;          ...post.stats,&#10;          likes: isLiked ? post.stats.likes - 1 : post.stats.likes + 1&#10;        }&#10;      };&#10;      onPostUpdate?.(updatedPost);&#10;    } catch (error) {&#10;      console.error('Failed to toggle like:', error);&#10;    } finally {&#10;      setIsLoadingInteraction(false);&#10;    }&#10;  };&#10;&#10;  // Handle bookmark&#10;  const handleBookmark = async () =&gt; {&#10;    if (isLoadingInteraction) return;&#10;    &#10;    setIsLoadingInteraction(true);&#10;    try {&#10;      await postService.toggleBookmark(post.id);&#10;      setIsBookmarked(!isBookmarked);&#10;      &#10;      // Update post stats optimistically&#10;      const updatedPost = {&#10;        ...post,&#10;        stats: {&#10;          ...post.stats,&#10;          bookmarks: isBookmarked ? post.stats.bookmarks - 1 : post.stats.bookmarks + 1&#10;        }&#10;      };&#10;      onPostUpdate?.(updatedPost);&#10;    } catch (error) {&#10;      console.error('Failed to toggle bookmark:', error);&#10;    } finally {&#10;      setIsLoadingInteraction(false);&#10;    }&#10;  };&#10;&#10;  // Handle share&#10;  const handleShare = async () =&gt; {&#10;    if (isLoadingInteraction) return;&#10;    &#10;    setIsLoadingInteraction(true);&#10;    try {&#10;      await postService.sharePost(post.id);&#10;      &#10;      // Update post stats optimistically&#10;      const updatedPost = {&#10;        ...post,&#10;        stats: {&#10;          ...post.stats,&#10;          shares: post.stats.shares + 1&#10;        }&#10;      };&#10;      onPostUpdate?.(updatedPost);&#10;      &#10;      // Copy link to clipboard&#10;      await navigator.clipboard.writeText(`${window.location.origin}/posts/${post.id}`);&#10;      alert('Post link copied to clipboard!');&#10;    } catch (error) {&#10;      console.error('Failed to share post:', error);&#10;    } finally {&#10;      setIsLoadingInteraction(false);&#10;    }&#10;  };&#10;&#10;  // Handle comment submission&#10;  const handleSubmitComment = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (!commentText.trim() || isSubmittingComment) return;&#10;    &#10;    setIsSubmittingComment(true);&#10;    try {&#10;      const commentData: CreateCommentRequest = {&#10;        content: commentText.trim()&#10;      };&#10;      &#10;      const newComment = await postService.createComment(post.id, commentData);&#10;      setComments(prev =&gt; [...prev, newComment]);&#10;      setCommentText('');&#10;      &#10;      // Update post stats&#10;      const updatedPost = {&#10;        ...post,&#10;        stats: {&#10;          ...post.stats,&#10;          comments: post.stats.comments + 1&#10;        }&#10;      };&#10;      onPostUpdate?.(updatedPost);&#10;    } catch (error) {&#10;      console.error('Failed to create comment:', error);&#10;    } finally {&#10;      setIsSubmittingComment(false);&#10;    }&#10;  };&#10;&#10;  const formatStats = (count: number): string =&gt; {&#10;    if (count &gt;= 1000000) return `${(count / 1000000).toFixed(1)}M`;&#10;    if (count &gt;= 1000) return `${(count / 1000).toFixed(1)}K`;&#10;    return count.toString();&#10;  };&#10;&#10;  return (&#10;    &lt;Card className={`post-card ${className}`}&gt;&#10;      {/* Post Header */}&#10;      &lt;div className=&quot;flex items-start justify-between p-4&quot;&gt;&#10;        &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;          &lt;div className=&quot;w-10 h-10 bg-gray-300 rounded-full flex items-center justify-center&quot;&gt;&#10;            {post.authorAvatar ? (&#10;              &lt;img &#10;                src={post.authorAvatar} &#10;                alt={post.authorName || 'Author'}&#10;                className=&quot;w-full h-full rounded-full object-cover&quot;&#10;              /&gt;&#10;            ) : (&#10;              &lt;span className=&quot;text-sm font-medium text-gray-600&quot;&gt;&#10;                {(post.authorName || 'Anonymous').charAt(0).toUpperCase()}&#10;              &lt;/span&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;          &lt;div&gt;&#10;            &lt;h3 className=&quot;font-semibold text-gray-900&quot;&gt;&#10;              {post.authorName || 'Anonymous'}&#10;            &lt;/h3&gt;&#10;            &lt;p className=&quot;text-sm text-gray-500&quot;&gt;&#10;              {formatDistanceToNow(new Date(post.createdAt), { addSuffix: true })}&#10;              {post.visibility &amp;&amp; post.visibility !== 'PUBLIC' &amp;&amp; (&#10;                &lt;span className=&quot;ml-2 px-2 py-0.5 bg-gray-100 rounded text-xs&quot;&gt;&#10;                  {post.visibility.toLowerCase()}&#10;                &lt;/span&gt;&#10;              )}&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot;&gt;&#10;          &lt;MoreHorizontal className=&quot;w-4 h-4&quot; /&gt;&#10;        &lt;/Button&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Post Content */}&#10;      &lt;div className=&quot;px-4 pb-3&quot;&gt;&#10;        {post.title &amp;&amp; (&#10;          &lt;h2 className=&quot;text-lg font-semibold mb-2&quot;&gt;{post.title}&lt;/h2&gt;&#10;        )}&#10;        &lt;p className=&quot;text-gray-900 whitespace-pre-wrap&quot;&gt;{post.content}&lt;/p&gt;&#10;        &#10;        {/* Tags */}&#10;        {post.tags &amp;&amp; post.tags.length &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;flex flex-wrap gap-2 mt-3&quot;&gt;&#10;            {post.tags.map((tag, index) =&gt; (&#10;              &lt;span &#10;                key={index}&#10;                className=&quot;inline-block px-2 py-1 bg-blue-100 text-blue-800 rounded-full text-sm&quot;&#10;              &gt;&#10;                #{tag}&#10;              &lt;/span&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Category */}&#10;        {post.category &amp;&amp; (&#10;          &lt;div className=&quot;mt-2&quot;&gt;&#10;            &lt;span className=&quot;inline-block px-2 py-1 bg-green-100 text-green-800 rounded text-sm&quot;&gt;&#10;              {post.category}&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      {/* Post Images */}&#10;      {post.images &amp;&amp; post.images.length &gt; 0 &amp;&amp; (&#10;        &lt;div className=&quot;px-4 pb-3&quot;&gt;&#10;          &lt;div className={`grid gap-2 ${&#10;            post.images.length === 1 ? 'grid-cols-1' : &#10;            post.images.length === 2 ? 'grid-cols-2' : &#10;            'grid-cols-2'&#10;          }`}&gt;&#10;            {post.images.slice(0, 4).map((image, index) =&gt; (&#10;              &lt;div key={index} className=&quot;relative&quot;&gt;&#10;                &lt;img &#10;                  src={image} &#10;                  alt={`Post image ${index + 1}`}&#10;                  className=&quot;w-full h-48 object-cover rounded-lg&quot;&#10;                /&gt;&#10;                {index === 3 &amp;&amp; post.images.length &gt; 4 &amp;&amp; (&#10;                  &lt;div className=&quot;absolute inset-0 bg-black bg-opacity-50 rounded-lg flex items-center justify-center&quot;&gt;&#10;                    &lt;span className=&quot;text-white text-lg font-semibold&quot;&gt;&#10;                      +{post.images.length - 4} more&#10;                    &lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {/* Post Stats */}&#10;      &lt;div className=&quot;px-4 py-2 border-t border-gray-100&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between text-sm text-gray-500&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;            &lt;span className=&quot;flex items-center space-x-1&quot;&gt;&#10;              &lt;Eye className=&quot;w-4 h-4&quot; /&gt;&#10;              &lt;span&gt;{formatStats(post.stats.views)}&lt;/span&gt;&#10;            &lt;/span&gt;&#10;            &lt;span className=&quot;flex items-center space-x-1&quot;&gt;&#10;              &lt;Heart className=&quot;w-4 h-4&quot; /&gt;&#10;              &lt;span&gt;{formatStats(post.stats.likes)}&lt;/span&gt;&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;            &lt;span&gt;{formatStats(post.stats.comments)} comments&lt;/span&gt;&#10;            &lt;span&gt;{formatStats(post.stats.shares)} shares&lt;/span&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Post Actions */}&#10;      &lt;div className=&quot;px-4 py-2 border-t border-gray-100&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;          &lt;Button&#10;            variant=&quot;ghost&quot;&#10;            size=&quot;sm&quot;&#10;            onClick={handleLike}&#10;            disabled={isLoadingInteraction}&#10;            className={`flex items-center space-x-2 ${isLiked ? 'text-red-500' : 'text-gray-500'}`}&#10;          &gt;&#10;            &lt;Heart className={`w-5 h-5 ${isLiked ? 'fill-current' : ''}`} /&gt;&#10;            &lt;span&gt;Like&lt;/span&gt;&#10;          &lt;/Button&gt;&#10;&#10;          &lt;Button&#10;            variant=&quot;ghost&quot;&#10;            size=&quot;sm&quot;&#10;            onClick={handleShowComments}&#10;            className=&quot;flex items-center space-x-2 text-gray-500&quot;&#10;          &gt;&#10;            &lt;MessageCircle className=&quot;w-5 h-5&quot; /&gt;&#10;            &lt;span&gt;Comment&lt;/span&gt;&#10;          &lt;/Button&gt;&#10;&#10;          &lt;Button&#10;            variant=&quot;ghost&quot;&#10;            size=&quot;sm&quot;&#10;            onClick={handleShare}&#10;            disabled={isLoadingInteraction}&#10;            className=&quot;flex items-center space-x-2 text-gray-500&quot;&#10;          &gt;&#10;            &lt;Share className=&quot;w-5 h-5&quot; /&gt;&#10;            &lt;span&gt;Share&lt;/span&gt;&#10;          &lt;/Button&gt;&#10;&#10;          &lt;Button&#10;            variant=&quot;ghost&quot;&#10;            size=&quot;sm&quot;&#10;            onClick={handleBookmark}&#10;            disabled={isLoadingInteraction}&#10;            className={`flex items-center space-x-2 ${isBookmarked ? 'text-blue-500' : 'text-gray-500'}`}&#10;          &gt;&#10;            &lt;Bookmark className={`w-5 h-5 ${isBookmarked ? 'fill-current' : ''}`} /&gt;&#10;            &lt;span&gt;Save&lt;/span&gt;&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Comments Section */}&#10;      {showComments &amp;&amp; (&#10;        &lt;div className=&quot;border-t border-gray-100&quot;&gt;&#10;          {/* Comment Form */}&#10;          &lt;form onSubmit={handleSubmitComment} className=&quot;p-4 border-b border-gray-100&quot;&gt;&#10;            &lt;div className=&quot;flex space-x-3&quot;&gt;&#10;              &lt;div className=&quot;w-8 h-8 bg-gray-300 rounded-full flex-shrink-0&quot;&gt;&lt;/div&gt;&#10;              &lt;div className=&quot;flex-1&quot;&gt;&#10;                &lt;Textarea&#10;                  placeholder=&quot;Write a comment...&quot;&#10;                  value={commentText}&#10;                  onChange={(e) =&gt; setCommentText(e.target.value)}&#10;                  minRows={1}&#10;                  maxRows={4}&#10;                  className=&quot;w-full resize-none&quot;&#10;                /&gt;&#10;                &lt;div className=&quot;flex justify-end mt-2&quot;&gt;&#10;                  &lt;Button&#10;                    type=&quot;submit&quot;&#10;                    size=&quot;sm&quot;&#10;                    disabled={!commentText.trim() || isSubmittingComment}&#10;                    className=&quot;flex items-center space-x-2&quot;&#10;                  &gt;&#10;                    {isSubmittingComment ? (&#10;                      &lt;LoadingSpinner size=&quot;sm&quot; /&gt;&#10;                    ) : (&#10;                      &lt;Send className=&quot;w-4 h-4&quot; /&gt;&#10;                    )}&#10;                    &lt;span&gt;Post&lt;/span&gt;&#10;                  &lt;/Button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/form&gt;&#10;&#10;          {/* Comments List */}&#10;          &lt;div className=&quot;p-4&quot;&gt;&#10;            {isLoadingComments ? (&#10;              &lt;div className=&quot;flex justify-center py-4&quot;&gt;&#10;                &lt;LoadingSpinner /&gt;&#10;              &lt;/div&gt;&#10;            ) : comments.length === 0 ? (&#10;              &lt;p className=&quot;text-gray-500 text-center py-4&quot;&gt;No comments yet&lt;/p&gt;&#10;            ) : (&#10;              &lt;div className=&quot;space-y-4&quot;&gt;&#10;                {comments.map((comment) =&gt; (&#10;                  &lt;div key={comment.id} className=&quot;flex space-x-3&quot;&gt;&#10;                    &lt;div className=&quot;w-8 h-8 bg-gray-300 rounded-full flex-shrink-0&quot;&gt;&#10;                      {comment.authorAvatar ? (&#10;                        &lt;img &#10;                          src={comment.authorAvatar} &#10;                          alt={comment.authorName}&#10;                          className=&quot;w-full h-full rounded-full object-cover&quot;&#10;                        /&gt;&#10;                      ) : (&#10;                        &lt;span className=&quot;text-xs font-medium text-gray-600 flex items-center justify-center w-full h-full&quot;&gt;&#10;                          {(comment.authorName || 'A').charAt(0).toUpperCase()}&#10;                        &lt;/span&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;flex-1&quot;&gt;&#10;                      &lt;div className=&quot;bg-gray-100 rounded-lg px-3 py-2&quot;&gt;&#10;                        &lt;p className=&quot;font-semibold text-sm&quot;&gt;{comment.authorName || 'Anonymous'}&lt;/p&gt;&#10;                        &lt;p className=&quot;text-gray-900&quot;&gt;{comment.content}&lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                      &lt;p className=&quot;text-xs text-gray-500 mt-1&quot;&gt;&#10;                        {formatDistanceToNow(new Date(comment.createdAt), { addSuffix: true })}&#10;                      &lt;/p&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                ))}&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/Card&gt;&#10;  );&#10;};" />
+            </PendingDiffInfo>
+          </value>
+        </entry>
+        <entry key="$PROJECT_DIR$/client-frontend/src/components/post/PostFeed.tsx">
+          <value>
+            <PendingDiffInfo>
+              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/components/post/PostFeed.tsx" />
+              <option name="updatedContent" value="'use client';&#10;&#10;import React, { useState, useEffect, useCallback } from 'react';&#10;import { Post, PaginatedResponse } from '@/types';&#10;import { postService } from '@/services/postService';&#10;import { PostCard } from './PostCard';&#10;import { CreatePost } from './CreatePost';&#10;import { LoadingSpinner } from '@/components/ui/LoadingSpinner';&#10;import { ErrorAlert } from '@/components/ui/ErrorAlert';&#10;import { Button } from '@/components/ui/Button';&#10;import { RefreshCw, Plus, TrendingUp, Eye, Heart } from 'lucide-react';&#10;&#10;interface PostFeedProps {&#10;  authorId?: string;&#10;  category?: string;&#10;  search?: string;&#10;  className?: string;&#10;}&#10;&#10;export const PostFeed: React.FC&lt;PostFeedProps&gt; = ({&#10;  authorId,&#10;  category,&#10;  search,&#10;  className = ''&#10;}) =&gt; {&#10;  const [posts, setPosts] = useState&lt;Post[]&gt;([]);&#10;  const [isLoading, setIsLoading] = useState(true);&#10;  const [isLoadingMore, setIsLoadingMore] = useState(false);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [hasMore, setHasMore] = useState(true);&#10;  const [currentPage, setCurrentPage] = useState(0);&#10;  const [showCreatePost, setShowCreatePost] = useState(false);&#10;  const [activeTab, setActiveTab] = useState&lt;'latest' | 'trending' | 'top-liked'&gt;('latest');&#10;&#10;  const loadPosts = useCallback(async (page = 0, append = false) =&gt; {&#10;    try {&#10;      if (!append) {&#10;        setIsLoading(true);&#10;        setError(null);&#10;      } else {&#10;        setIsLoadingMore(true);&#10;      }&#10;&#10;      let response: PaginatedResponse&lt;Post&gt;;&#10;&#10;      if (activeTab === 'trending') {&#10;        const trendingPosts = await postService.getTopViewedPosts();&#10;        response = {&#10;          content: trendingPosts,&#10;          totalElements: trendingPosts.length,&#10;          totalPages: 1,&#10;          size: trendingPosts.length,&#10;          number: 0,&#10;          first: true,&#10;          last: true&#10;        };&#10;      } else if (activeTab === 'top-liked') {&#10;        const topLikedPosts = await postService.getTopLikedPosts();&#10;        response = {&#10;          content: topLikedPosts,&#10;          totalElements: topLikedPosts.length,&#10;          totalPages: 1,&#10;          size: topLikedPosts.length,&#10;          number: 0,&#10;          first: true,&#10;          last: true&#10;        };&#10;      } else {&#10;        response = await postService.getPosts(&#10;          page,&#10;          10,&#10;          'createdAt',&#10;          'desc',&#10;          authorId,&#10;          category,&#10;          search&#10;        );&#10;      }&#10;&#10;      if (append) {&#10;        setPosts(prev =&gt; [...prev, ...response.content]);&#10;      } else {&#10;        setPosts(response.content);&#10;      }&#10;&#10;      setHasMore(!response.last &amp;&amp; response.content.length &gt; 0);&#10;      setCurrentPage(page);&#10;    } catch (err: any) {&#10;      console.error('Failed to load posts:', err);&#10;      setError(err.response?.data?.message || err.message || 'Failed to load posts');&#10;    } finally {&#10;      setIsLoading(false);&#10;      setIsLoadingMore(false);&#10;    }&#10;  }, [authorId, category, search, activeTab]);&#10;&#10;  // Initial load and reload when filters change&#10;  useEffect(() =&gt; {&#10;    setCurrentPage(0);&#10;    loadPosts(0, false);&#10;  }, [loadPosts]);&#10;&#10;  const handleLoadMore = () =&gt; {&#10;    if (hasMore &amp;&amp; !isLoadingMore) {&#10;      loadPosts(currentPage + 1, true);&#10;    }&#10;  };&#10;&#10;  const handleRefresh = () =&gt; {&#10;    setCurrentPage(0);&#10;    loadPosts(0, false);&#10;  };&#10;&#10;  const handlePostCreated = (newPost: Post) =&gt; {&#10;    setPosts(prev =&gt; [newPost, ...prev]);&#10;    setShowCreatePost(false);&#10;  };&#10;&#10;  const handlePostUpdate = (updatedPost: Post) =&gt; {&#10;    setPosts(prev =&gt; prev.map(post =&gt; &#10;      post.id === updatedPost.id ? updatedPost : post&#10;    ));&#10;  };&#10;&#10;  const handlePostDelete = (postId: string) =&gt; {&#10;    setPosts(prev =&gt; prev.filter(post =&gt; post.id !== postId));&#10;  };&#10;&#10;  const handleTabChange = (tab: 'latest' | 'trending' | 'top-liked') =&gt; {&#10;    setActiveTab(tab);&#10;    setCurrentPage(0);&#10;  };&#10;&#10;  if (isLoading) {&#10;    return (&#10;      &lt;div className=&quot;flex justify-center py-8&quot;&gt;&#10;        &lt;LoadingSpinner size=&quot;lg&quot; /&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className={`post-feed ${className}`}&gt;&#10;      {/* Feed Header */}&#10;      &lt;div className=&quot;bg-white rounded-lg shadow-sm border p-4 mb-6&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;          &lt;h2 className=&quot;text-xl font-semibold&quot;&gt;&#10;            {search ? `Search results for &quot;${search}&quot;` :&#10;             category ? `Posts in ${category}` :&#10;             authorId ? 'User Posts' : 'Latest Posts'}&#10;          &lt;/h2&gt;&#10;          &#10;          &lt;div className=&quot;flex items-center gap-2&quot;&gt;&#10;            &lt;Button&#10;              variant=&quot;secondary&quot;&#10;              size=&quot;sm&quot;&#10;              onClick={handleRefresh}&#10;              disabled={isLoading}&#10;              className=&quot;flex items-center gap-2&quot;&#10;            &gt;&#10;              &lt;RefreshCw className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} /&gt;&#10;              Refresh&#10;            &lt;/Button&gt;&#10;            &#10;            {!authorId &amp;&amp; (&#10;              &lt;Button&#10;                size=&quot;sm&quot;&#10;                onClick={() =&gt; setShowCreatePost(true)}&#10;                className=&quot;flex items-center gap-2&quot;&#10;              &gt;&#10;                &lt;Plus className=&quot;w-4 h-4&quot; /&gt;&#10;                Create Post&#10;              &lt;/Button&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Feed Tabs */}&#10;        {!search &amp;&amp; !category &amp;&amp; !authorId &amp;&amp; (&#10;          &lt;div className=&quot;flex gap-2&quot;&gt;&#10;            &lt;Button&#10;              variant={activeTab === 'latest' ? 'primary' : 'secondary'}&#10;              size=&quot;sm&quot;&#10;              onClick={() =&gt; handleTabChange('latest')}&#10;              className=&quot;flex items-center gap-2&quot;&#10;            &gt;&#10;              &lt;RefreshCw className=&quot;w-4 h-4&quot; /&gt;&#10;              Latest&#10;            &lt;/Button&gt;&#10;            &lt;Button&#10;              variant={activeTab === 'trending' ? 'primary' : 'secondary'}&#10;              size=&quot;sm&quot;&#10;              onClick={() =&gt; handleTabChange('trending')}&#10;              className=&quot;flex items-center gap-2&quot;&#10;            &gt;&#10;              &lt;Eye className=&quot;w-4 h-4&quot; /&gt;&#10;              Trending&#10;            &lt;/Button&gt;&#10;            &lt;Button&#10;              variant={activeTab === 'top-liked' ? 'primary' : 'secondary'}&#10;              size=&quot;sm&quot;&#10;              onClick={() =&gt; handleTabChange('top-liked')}&#10;              className=&quot;flex items-center gap-2&quot;&#10;            &gt;&#10;              &lt;Heart className=&quot;w-4 h-4&quot; /&gt;&#10;              Most Liked&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      {/* Create Post Modal/Inline */}&#10;      {showCreatePost &amp;&amp; (&#10;        &lt;div className=&quot;bg-white rounded-lg shadow-sm border p-6 mb-6&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;            &lt;h3 className=&quot;text-lg font-semibold&quot;&gt;Create New Post&lt;/h3&gt;&#10;            &lt;Button&#10;              variant=&quot;ghost&quot;&#10;              size=&quot;sm&quot;&#10;              onClick={() =&gt; setShowCreatePost(false)}&#10;            &gt;&#10;              Cancel&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;          &lt;CreatePost&#10;            onPostCreated={handlePostCreated}&#10;            onCancel={() =&gt; setShowCreatePost(false)}&#10;          /&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {/* Error Display */}&#10;      {error &amp;&amp; (&#10;        &lt;div className=&quot;mb-6&quot;&gt;&#10;          &lt;ErrorAlert message={error} /&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {/* Posts List */}&#10;      {posts.length === 0 ? (&#10;        &lt;div className=&quot;text-center py-12&quot;&gt;&#10;          &lt;div className=&quot;text-gray-400 mb-4&quot;&gt;&#10;            &lt;TrendingUp className=&quot;w-16 h-16 mx-auto&quot; /&gt;&#10;          &lt;/div&gt;&#10;          &lt;h3 className=&quot;text-lg font-medium text-gray-900 mb-2&quot;&gt;No posts found&lt;/h3&gt;&#10;          &lt;p className=&quot;text-gray-500 mb-4&quot;&gt;&#10;            {search ? 'Try adjusting your search terms' :&#10;             category ? 'No posts in this category yet' :&#10;             'Be the first to create a post!'}&#10;          &lt;/p&gt;&#10;          {!authorId &amp;&amp; !search &amp;&amp; !category &amp;&amp; (&#10;            &lt;Button onClick={() =&gt; setShowCreatePost(true)}&gt;&#10;              Create First Post&#10;            &lt;/Button&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      ) : (&#10;        &lt;div className=&quot;space-y-6&quot;&gt;&#10;          {posts.map((post) =&gt; (&#10;            &lt;PostCard&#10;              key={post.id}&#10;              post={post}&#10;              onPostUpdate={handlePostUpdate}&#10;              onPostDelete={handlePostDelete}&#10;            /&gt;&#10;          ))}&#10;&#10;          {/* Load More Button */}&#10;          {hasMore &amp;&amp; (&#10;            &lt;div className=&quot;text-center py-6&quot;&gt;&#10;              &lt;Button&#10;                variant=&quot;secondary&quot;&#10;                onClick={handleLoadMore}&#10;                disabled={isLoadingMore}&#10;                className=&quot;flex items-center gap-2&quot;&#10;              &gt;&#10;                {isLoadingMore &amp;&amp; &lt;LoadingSpinner size=&quot;sm&quot; /&gt;}&#10;                {isLoadingMore ? 'Loading...' : 'Load More Posts'}&#10;              &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* End of Feed Message */}&#10;          {!hasMore &amp;&amp; posts.length &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;text-center py-6 text-gray-500&quot;&gt;&#10;              &lt;p&gt;You've reached the end of the feed&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;};" />
+            </PendingDiffInfo>
+          </value>
+        </entry>
+        <entry key="$PROJECT_DIR$/client-frontend/src/components/post/index.ts">
+          <value>
+            <PendingDiffInfo>
+              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/components/post/index.ts" />
+              <option name="updatedContent" value="export { CreatePost } from './CreatePost';&#10;export { PostCard } from './PostCard';&#10;export { PostFeed } from './PostFeed';" />
+            </PendingDiffInfo>
+          </value>
+        </entry>
+        <entry key="$PROJECT_DIR$/client-frontend/src/services/postService.ts">
+          <value>
+            <PendingDiffInfo>
+              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/services/postService.ts" />
+              <option name="originalContent" value="import api from '@/lib/api';&#10;import { Post, Comment, ApiResponse, PaginatedResponse } from '@/types';&#10;&#10;    }&#10;&#10;  async getPosts(page = 0, size = 10): Promise&lt;PaginatedResponse&lt;Post&gt;&gt; {&#10;    const response = await api.get(`/posts?page=${page}&amp;size=${size}`);&#10;    return response.data;&#10;  },&#10;&#10;  async getPost(postId: string): Promise&lt;Post&gt; {&#10;    const response = await api.get(`/posts/${postId}`);&#10;    return response.data;&#10;  },&#10;&#10;      const response = await api.post('/posts', post);&#10;  async likePost(postId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#10;    const response = await api.post(`/posts/${postId}/like`);&#10;    return response.data;&#10;  },&#10;&#10;  async unlikePost(postId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#10;    const response = await api.delete(`/posts/${postId}/like`);&#10;    return response.data;&#10;  },&#10;    } catch (error) {&#10;      console.error('Error creating post:', error);&#10;  },&#10;&#10;  async createComment(postId: string, content: string): Promise&lt;Comment&gt; {&#10;    const response = await api.post(`/posts/${postId}/comments`, { content });&#10;    return response.data;&#10;  },&#10;&#10;  async getComments(postId: string, page = 0, size = 10): Promise&lt;PaginatedResponse&lt;Comment&gt;&gt; {&#10;    const response = await api.get(`/posts/${postId}/comments?page=${page}&amp;size=${size}`);&#10;    return response.data;&#10;  },&#10;&#10;  async likeComment(commentId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#10;    const response = await api.post(`/comments/${commentId}/like`);&#10;    return response.data;&#10;  },&#10;&#10;  async unlikeComment(commentId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#10;    const response = await api.delete(`/comments/${commentId}/like`);&#10;    return response.data;&#10;  },&#10;&#10;  async deleteComment(commentId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#10;    const response = await api.delete(`/comments/${commentId}`);&#10;    return response.data;&#10;  }&#10;};&#10;" />
+              <option name="updatedContent" value="import api from '@/lib/api';&#13;&#10;import { &#13;&#10;  Post, &#13;&#10;  Comment, &#13;&#10;  CreatePostRequest, &#13;&#10;  UpdatePostRequest, &#13;&#10;  CreateCommentRequest,&#13;&#10;  CreateInteractionRequest,&#13;&#10;  Interaction,&#13;&#10;  PaginatedResponse,&#13;&#10;  InteractionType,&#13;&#10;  ReactionType&#13;&#10;} from '@/types';&#13;&#10;&#13;&#10;export const postService = {&#13;&#10;  // Create post with proper structure matching backend&#13;&#10;  async createPost(postData: CreatePostRequest, files?: File[]): Promise&lt;Post&gt; {&#13;&#10;    if (files &amp;&amp; files.length &gt; 0) {&#13;&#10;      // Use multipart form data for posts with files&#13;&#10;      const formData = new FormData();&#13;&#10;      &#13;&#10;      // Create post JSON and append as part&#13;&#10;      const postBlob = new Blob([JSON.stringify(postData)], { &#13;&#10;        type: 'application/json' &#13;&#10;      });&#13;&#10;      formData.append('post', postBlob);&#13;&#10;      &#13;&#10;      // Append files&#13;&#10;      files.forEach((file) =&gt; {&#13;&#10;        formData.append('files', file);&#13;&#10;      });&#13;&#10;&#13;&#10;      const response = await api.post('/posts', formData, {&#13;&#10;        headers: {&#13;&#10;          'Content-Type': 'multipart/form-data',&#13;&#10;        },&#13;&#10;      });&#13;&#10;      return response.data;&#13;&#10;    } else {&#13;&#10;      // Use simple JSON endpoint for text-only posts&#13;&#10;      const response = await api.post('/posts/simple', postData, {&#13;&#10;        headers: {&#13;&#10;          'Content-Type': 'application/json',&#13;&#10;        },&#13;&#10;      });&#13;&#10;      return response.data;&#13;&#10;    }&#13;&#10;  },&#13;&#10;&#13;&#10;  // Get paginated posts&#13;&#10;  async getPosts(&#13;&#10;    page = 0, &#13;&#10;    size = 10, &#13;&#10;    sortBy = 'createdAt',&#13;&#10;    sortDir = 'desc',&#13;&#10;    authorId?: string,&#13;&#10;    category?: string,&#13;&#10;    search?: string&#13;&#10;  ): Promise&lt;PaginatedResponse&lt;Post&gt;&gt; {&#13;&#10;    const params = new URLSearchParams({&#13;&#10;      page: page.toString(),&#13;&#10;      size: size.toString(),&#13;&#10;      sortBy,&#13;&#10;      sortDir,&#13;&#10;    });&#13;&#10;&#13;&#10;    if (authorId) params.append('authorId', authorId);&#13;&#10;    if (category) params.append('category', category);&#13;&#10;    if (search) params.append('search', search);&#13;&#10;&#13;&#10;    const response = await api.get(`/posts?${params.toString()}`);&#13;&#10;    return response.data;&#13;&#10;  },&#13;&#10;&#13;&#10;  // Get single post by ID&#13;&#10;  async getPost(postId: string): Promise&lt;Post&gt; {&#13;&#10;    const response = await api.get(`/posts/${postId}`);&#13;&#10;    return response.data;&#13;&#10;  },&#13;&#10;&#13;&#10;  // Get posts by author&#13;&#10;  async getUserPosts(authorId: string, page = 0, size = 10): Promise&lt;PaginatedResponse&lt;Post&gt;&gt; {&#13;&#10;    return this.getPosts(page, size, 'createdAt', 'desc', authorId);&#13;&#10;  },&#13;&#10;&#13;&#10;  // Update post&#13;&#10;  async updatePost(postId: string, updateData: UpdatePostRequest): Promise&lt;Post&gt; {&#13;&#10;    const response = await api.put(`/posts/${postId}`, updateData);&#13;&#10;    return response.data;&#13;&#10;  },&#13;&#10;&#13;&#10;  // Delete post&#13;&#10;  async deletePost(postId: string): Promise&lt;void&gt; {&#13;&#10;    await api.delete(`/posts/${postId}`);&#13;&#10;  },&#13;&#10;&#13;&#10;  // Search posts&#13;&#10;  async searchPosts(query: string, page = 0, size = 10): Promise&lt;PaginatedResponse&lt;Post&gt;&gt; {&#13;&#10;    return this.getPosts(page, size, 'createdAt', 'desc', undefined, undefined, query);&#13;&#10;  },&#13;&#10;&#13;&#10;  // Get posts by category&#13;&#10;  async getPostsByCategory(category: string, page = 0, size = 10): Promise&lt;PaginatedResponse&lt;Post&gt;&gt; {&#13;&#10;    return this.getPosts(page, size, 'createdAt', 'desc', undefined, category);&#13;&#10;  },&#13;&#10;&#13;&#10;  // INTERACTION METHODS&#13;&#10;  &#13;&#10;  // Create interaction (like, share, bookmark)&#13;&#10;  async createInteraction(postId: string, interactionData: CreateInteractionRequest): Promise&lt;Interaction | null&gt; {&#13;&#10;    const response = await api.post(`/posts/${postId}/interactions`, interactionData);&#13;&#10;    return response.data;&#13;&#10;  },&#13;&#10;&#13;&#10;  // Like/Unlike post&#13;&#10;  async toggleLike(postId: string): Promise&lt;Interaction | null&gt; {&#13;&#10;    return this.createInteraction(postId, {&#13;&#10;      type: InteractionType.LIKE,&#13;&#10;      reactionType: ReactionType.LIKE&#13;&#10;    });&#13;&#10;  },&#13;&#10;&#13;&#10;  // Share post&#13;&#10;  async sharePost(postId: string): Promise&lt;Interaction | null&gt; {&#13;&#10;    return this.createInteraction(postId, {&#13;&#10;      type: InteractionType.SHARE&#13;&#10;    });&#13;&#10;  },&#13;&#10;&#13;&#10;  // Bookmark post&#13;&#10;  async toggleBookmark(postId: string): Promise&lt;Interaction | null&gt; {&#13;&#10;    return this.createInteraction(postId, {&#13;&#10;      type: InteractionType.BOOKMARK,&#13;&#10;      reactionType: ReactionType.BOOKMARK&#13;&#10;    });&#13;&#10;  },&#13;&#10;&#13;&#10;  // Check if user has liked post&#13;&#10;  async hasUserLikedPost(postId: string): Promise&lt;boolean&gt; {&#13;&#10;    const response = await api.get(`/posts/${postId}/likes/check`);&#13;&#10;    return response.data;&#13;&#10;  },&#13;&#10;&#13;&#10;  // COMMENT METHODS&#13;&#10;&#13;&#10;  // Get comments for post&#13;&#10;  async getComments(postId: string, page = 0, size = 10): Promise&lt;PaginatedResponse&lt;Comment&gt;&gt; {&#13;&#10;    const response = await api.get(`/posts/${postId}/comments?page=${page}&amp;size=${size}`);&#13;&#10;    return response.data;&#13;&#10;  },&#13;&#10;&#13;&#10;  // Create comment&#13;&#10;  async createComment(postId: string, commentData: CreateCommentRequest): Promise&lt;Comment&gt; {&#13;&#10;    const response = await api.post(`/posts/${postId}/comments`, commentData);&#13;&#10;    return response.data;&#13;&#10;  },&#13;&#10;&#13;&#10;  // UTILITY METHODS&#13;&#10;&#13;&#10;  // Get trending posts&#13;&#10;  async getTrendingPosts(): Promise&lt;Post[]&gt; {&#13;&#10;    const response = await api.get('/posts/trending');&#13;&#10;    return response.data;&#13;&#10;  },&#13;&#10;&#13;&#10;  // Get top viewed posts&#13;&#10;  async getTopViewedPosts(): Promise&lt;Post[]&gt; {&#13;&#10;    const response = await api.get('/posts/top-viewed');&#13;&#10;    return response.data;&#13;&#10;  },&#13;&#10;&#13;&#10;  // Get top liked posts&#13;&#10;  async getTopLikedPosts(): Promise&lt;Post[]&gt; {&#13;&#10;    const response = await api.get('/posts/top-liked');&#13;&#10;    return response.data;&#13;&#10;  }&#13;&#10;};" />
+            </PendingDiffInfo>
+          </value>
+        </entry>
+        <entry key="$PROJECT_DIR$/client-frontend/src/types/index.ts">
+          <value>
+            <PendingDiffInfo>
+              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/types/index.ts" />
+              <option name="originalContent" value="// Types for API responses and entities&#10;&#10;export interface User {&#10;  id: string;&#10;  email: string;&#10;  username: string;&#10;  fullName?: string;&#10;  bio?: string;&#10;  studentId?: string;&#10;  yearOfStudy?: number;&#10;  isVerified: boolean;&#10;  isOnline?: boolean;&#10;  createdAt?: string;&#10;  updatedAt?: string;&#10;  // Enhanced profile fields&#10;  role: 'STUDENT' | 'LECTURER' | 'ADMIN' | 'USER';&#10;  isProfileCompleted?: boolean;&#10;  avatarUrl?: string | null; // Changed from avatar to avatarUrl&#10;  backgroundUrl?: string | null; // Added backgroundUrl&#10;&#10;  // Working fields&#10;  college?: CollegeInfo; // Changed from collegeCode to college&#10;  faculty?: FacultyInfo; // Changed from workingFacultyCode to faculty&#10;&#10;  // Student specific fields&#10;  major?: MajorInfo;&#10;  batch?: BatchInfo;&#10;  gender?: GenderInfo;&#10;&#10;  // Faculty specific fields&#10;  staffCode?: string;&#10;  position?: PositionInfo;&#10;  academic?: AcademicInfo;&#10;  degree?: DegreeInfo;&#10;&#10;}&#10;&#10;export interface Post {&#10;  id: string;&#10;  content: string;&#10;  images?: string[];&#10;  authorId: string;&#10;  author: User;&#10;  likes: number;&#10;  comments: number;&#10;  isLiked: boolean;&#10;  createdAt: string;&#10;  updatedAt: string;&#10;}&#10;&#10;export interface Comment {&#10;  id: string;&#10;  content: string;&#10;  postId: string;&#10;  authorId: string;&#10;  author: User;&#10;  likes: number;&#10;  isLiked: boolean;&#10;  createdAt: string;&#10;  updatedAt: string;&#10;}&#10;&#10;export interface ChatMessage {&#10;  id: string;&#10;  content: string;&#10;  senderId: string;&#10;  receiverId: string;&#10;  sender: User;&#10;  receiver: User;&#10;  isRead: boolean;&#10;  createdAt: string;&#10;}&#10;&#10;export interface ChatRoom {&#10;  id: string;&#10;  participants: User[];&#10;  lastMessage?: ChatMessage;&#10;  unreadCount: number;&#10;  createdAt: string;&#10;  updatedAt: string;&#10;}&#10;&#10;export interface LoginRequest {&#10;  email?: string;&#10;  username?: string;&#10;  password: string;&#10;  recaptchaToken?: string;&#10;}&#10;&#10;export interface RegisterRequest {&#10;  email: string;&#10;  username: string;&#10;  password: string;&#10;  recaptchaToken?: string;&#10;}&#10;&#10;export interface AuthResponse {&#10;  token: string;&#10;  user: User;&#10;}&#10;&#10;export interface ApiResponse&lt;T&gt; {&#10;  success: boolean;&#10;  data?: T;&#10;  message?: string;&#10;  error?: string;&#10;  errorCode?: string;&#10;}&#10;&#10;export interface ApiError {&#10;  success: false;&#10;  message: string;&#10;  errorCode?: string;&#10;  errors?: { [key: string]: string };&#10;}&#10;&#10;export interface PaginatedResponse&lt;T&gt; {&#10;  content: T[];&#10;  totalElements: number;&#10;  totalPages: number;&#10;  size: number;&#10;  number: number;&#10;  first: boolean;&#10;  last: boolean;&#10;}&#10;&#10;export interface MajorInfo {&#10;  name: string; // Sử dụng name làm identifier chính&#10;  code?: string; // Code tùy chọn&#10;  faculty?: FacultyInfo;&#10;}&#10;&#10;export interface FacultyInfo {&#10;  name: string; // Sử dụng name làm identifier chính&#10;  code?: string; // Code tùy chọn&#10;  college?: CollegeInfo;&#10;}&#10;&#10;export interface CollegeInfo {&#10;  name: string; // Sử dụng name làm identifier chính&#10;  code?: string; // Code tùy chọn&#10;}&#10;&#10;export interface BatchInfo {&#10;  year: string;&#10;}&#10;&#10;export interface GenderInfo {&#10;  code: string;&#10;  name: string;&#10;}&#10;&#10;export interface PositionInfo {&#10;    code: string;&#10;    name: string;&#10;}&#10;&#10;export interface AcademicInfo {&#10;  code: string;&#10;  name: string;&#10;}&#10;&#10;export interface DegreeInfo {&#10;  code: string;&#10;  name: string;&#10;}&#10;&#10;export interface StudentProfileUpdateRequest {&#10;  fullName: string;&#10;  bio?: string;&#10;  studentId: string;&#10;  collegeCode: string; // Đổi từ collegeCode sang collegeName&#10;  facultyCode: string; // Đổi từ workingFacultyCode sang facultyName&#10;  majorCode: string; // Đổi từ majorCode sang majorName&#10;  batchYear: string;&#10;  genderCode: string;&#10;  avatarUrl?: string;&#10;  backgroundUrl?: string;&#10;}&#10;&#10;export interface LecturerProfileUpdateRequest {&#10;  fullName: string;&#10;  bio?: string;&#10;  staffCode: string;&#10;  positionCode: string;&#10;  academicCode?: string;&#10;  degreeCode?: string;&#10;  facultyCode: string; // Đổi từ workingFacultyCode sang workingFacultyName&#10;  genderCode: string;&#10;  avatarUrl?: string;&#10;  backgroundUrl?: string;&#10;}&#10;&#10;export interface ProfileCompletionStatus {&#10;  isCompleted: boolean;&#10;  missingFields?: string[];&#10;}&#10;&#10;export interface CollegeWithHierarchyInfo {&#10;  name: string; // Sử dụng name làm identifier chính&#10;  code?: string; // Code tùy chọn&#10;  faculties: FacultyWithMajorsInfo[];&#10;}&#10;&#10;export interface FacultyWithMajorsInfo {&#10;  name: string; // Sử dụng name làm identifier chính&#10;  code?: string; // Code tùy chọn&#10;  collegeName: string; // Tên college&#10;  majors: MajorInfo[];&#10;}&#10;&#10;// Updated interface for hierarchical categories&#10;export interface HierarchicalCategories {&#10;  degrees?: DegreeInfo[];&#10;  academics?: AcademicInfo[];&#10;  positions?: PositionInfo[];&#10;  colleges: CollegeWithHierarchyInfo[];&#10;  batches?: BatchInfo[];&#10;  genders: GenderInfo[];&#10;}&#10;" />
+              <option name="updatedContent" value="// Types for API responses and entities&#13;&#10;&#13;&#10;export interface User {&#13;&#10;  id: string;&#13;&#10;  email: string;&#13;&#10;  username: string;&#13;&#10;  fullName?: string;&#13;&#10;  bio?: string;&#13;&#10;  studentId?: string;&#13;&#10;  yearOfStudy?: number;&#13;&#10;  isVerified: boolean;&#13;&#10;  isOnline?: boolean;&#13;&#10;  createdAt?: string;&#13;&#10;  updatedAt?: string;&#13;&#10;  // Enhanced profile fields&#13;&#10;  role: 'STUDENT' | 'LECTURER' | 'ADMIN' | 'USER';&#13;&#10;  isProfileCompleted?: boolean;&#13;&#10;  avatarUrl?: string | null;&#13;&#10;  backgroundUrl?: string | null;&#13;&#10;&#13;&#10;  // Working fields&#13;&#10;  college?: CollegeInfo;&#13;&#10;  faculty?: FacultyInfo;&#13;&#10;&#13;&#10;  // Student specific fields&#13;&#10;  major?: MajorInfo;&#13;&#10;  batch?: BatchInfo;&#13;&#10;  gender?: GenderInfo;&#13;&#10;&#13;&#10;  // Faculty specific fields&#13;&#10;  staffCode?: string;&#13;&#10;  position?: PositionInfo;&#13;&#10;  academic?: AcademicInfo;&#13;&#10;  degree?: DegreeInfo;&#13;&#10;}&#13;&#10;&#13;&#10;// Updated Post interface to match backend PostResponse&#13;&#10;export interface Post {&#13;&#10;  id: string;&#13;&#10;  title?: string;&#13;&#10;  content: string;&#13;&#10;  authorId: string;&#13;&#10;  authorName?: string;&#13;&#10;  authorAvatar?: string;&#13;&#10;  images?: string[];&#13;&#10;  tags?: string[];&#13;&#10;  category?: string;&#13;&#10;  visibility?: string;&#13;&#10;  stats: PostStats;&#13;&#10;  createdAt: string;&#13;&#10;  updatedAt: string;&#13;&#10;}&#13;&#10;&#13;&#10;export interface PostStats {&#13;&#10;  views: number;&#13;&#10;  likes: number;&#13;&#10;  shares: number;&#13;&#10;  comments: number;&#13;&#10;  bookmarks: number;&#13;&#10;  reactions?: { [key: string]: number };&#13;&#10;}&#13;&#10;&#13;&#10;// Post creation request to match backend PostRequest&#13;&#10;export interface CreatePostRequest {&#13;&#10;  title?: string;&#13;&#10;  content: string;&#13;&#10;  tags?: string[];&#13;&#10;  category?: string;&#13;&#10;  visibility?: 'PUBLIC' | 'FRIENDS' | 'PRIVATE';&#13;&#10;}&#13;&#10;&#13;&#10;// Post update request&#13;&#10;export interface UpdatePostRequest {&#13;&#10;  title?: string;&#13;&#10;  content?: string;&#13;&#10;  tags?: string[];&#13;&#10;  category?: string;&#13;&#10;  visibility?: 'PUBLIC' | 'FRIENDS' | 'PRIVATE';&#13;&#10;}&#13;&#10;&#13;&#10;export interface Comment {&#13;&#10;  id: string;&#13;&#10;  content: string;&#13;&#10;  postId: string;&#13;&#10;  authorId: string;&#13;&#10;  authorName?: string;&#13;&#10;  authorAvatar?: string;&#13;&#10;  stats?: CommentStats;&#13;&#10;  createdAt: string;&#13;&#10;  updatedAt: string;&#13;&#10;}&#13;&#10;&#13;&#10;export interface CommentStats {&#13;&#10;  likes: number;&#13;&#10;  replies: number;&#13;&#10;}&#13;&#10;&#13;&#10;export interface CreateCommentRequest {&#13;&#10;  content: string;&#13;&#10;  parentId?: string; // For reply comments&#13;&#10;}&#13;&#10;&#13;&#10;export interface Interaction {&#13;&#10;  id: string;&#13;&#10;  postId: string;&#13;&#10;  authorId: string;&#13;&#10;  type: InteractionType;&#13;&#10;  reactionType?: ReactionType;&#13;&#10;  createdAt: string;&#13;&#10;}&#13;&#10;&#13;&#10;export enum InteractionType {&#13;&#10;  LIKE = 'LIKE',&#13;&#10;  SHARE = 'SHARE',&#13;&#10;  BOOKMARK = 'BOOKMARK',&#13;&#10;  VIEW = 'VIEW'&#13;&#10;}&#13;&#10;&#13;&#10;export enum ReactionType {&#13;&#10;  LIKE = 'LIKE',&#13;&#10;  LOVE = 'LOVE',&#13;&#10;  HAHA = 'HAHA',&#13;&#10;  WOW = 'WOW',&#13;&#10;  SAD = 'SAD',&#13;&#10;  ANGRY = 'ANGRY',&#13;&#10;  BOOKMARK = 'BOOKMARK'&#13;&#10;}&#13;&#10;&#13;&#10;export interface CreateInteractionRequest {&#13;&#10;  type: InteractionType;&#13;&#10;  reactionType?: ReactionType;&#13;&#10;}&#13;&#10;&#13;&#10;export interface LoginRequest {&#13;&#10;  email?: string;&#13;&#10;  username?: string;&#13;&#10;  password: string;&#13;&#10;  recaptchaToken?: string;&#13;&#10;}&#13;&#10;&#13;&#10;export interface RegisterRequest {&#13;&#10;  email: string;&#13;&#10;  username: string;&#13;&#10;  password: string;&#13;&#10;  recaptchaToken?: string;&#13;&#10;}&#13;&#10;&#13;&#10;export interface AuthResponse {&#13;&#10;  token: string;&#13;&#10;  user: User;&#13;&#10;}&#13;&#10;&#13;&#10;export interface ApiResponse&lt;T&gt; {&#13;&#10;  success: boolean;&#13;&#10;  data?: T;&#13;&#10;  message?: string;&#13;&#10;  error?: string;&#13;&#10;  errorCode?: string;&#13;&#10;}&#13;&#10;&#13;&#10;export interface ApiError {&#13;&#10;  success: false;&#13;&#10;  message: string;&#13;&#10;  errorCode?: string;&#13;&#10;  errors?: { [key: string]: string };&#13;&#10;}&#13;&#10;&#13;&#10;export interface PaginatedResponse&lt;T&gt; {&#13;&#10;  content: T[];&#13;&#10;  totalElements: number;&#13;&#10;  totalPages: number;&#13;&#10;  size: number;&#13;&#10;  number: number;&#13;&#10;  first: boolean;&#13;&#10;  last: boolean;&#13;&#10;}&#13;&#10;&#13;&#10;export interface MajorInfo {&#13;&#10;  name: string; // Sử dụng name làm identifier chính&#13;&#10;  code?: string; // Code tùy chọn&#13;&#10;  faculty?: FacultyInfo;&#13;&#10;}&#13;&#10;&#13;&#10;export interface FacultyInfo {&#13;&#10;  name: string; // Sử dụng name làm identifier chính&#13;&#10;  code?: string; // Code tùy chọn&#13;&#10;  college?: CollegeInfo;&#13;&#10;}&#13;&#10;&#13;&#10;export interface CollegeInfo {&#13;&#10;  name: string; // Sử dụng name làm identifier chính&#13;&#10;  code?: string; // Code tùy chọn&#13;&#10;}&#13;&#10;&#13;&#10;export interface BatchInfo {&#13;&#10;  year: string;&#13;&#10;}&#13;&#10;&#13;&#10;export interface GenderInfo {&#13;&#10;  code: string;&#13;&#10;  name: string;&#13;&#10;}&#13;&#10;&#13;&#10;export interface PositionInfo {&#13;&#10;    code: string;&#13;&#10;    name: string;&#13;&#10;}&#13;&#10;&#13;&#10;export interface AcademicInfo {&#13;&#10;  code: string;&#13;&#10;  name: string;&#13;&#10;}&#13;&#10;&#13;&#10;export interface DegreeInfo {&#13;&#10;  code: string;&#13;&#10;  name: string;&#13;&#10;}&#13;&#10;&#13;&#10;export interface StudentProfileUpdateRequest {&#13;&#10;  fullName: string;&#13;&#10;  bio?: string;&#13;&#10;  studentId: string;&#13;&#10;  collegeCode: string; // Đổi từ collegeCode sang collegeName&#13;&#10;  facultyCode: string; // Đổi từ workingFacultyCode sang facultyName&#13;&#10;  majorCode: string; // Đổi từ majorCode sang majorName&#13;&#10;  batchYear: string;&#13;&#10;  genderCode: string;&#13;&#10;  avatarUrl?: string;&#13;&#10;  backgroundUrl?: string;&#13;&#10;}&#13;&#10;&#13;&#10;export interface LecturerProfileUpdateRequest {&#13;&#10;  fullName: string;&#13;&#10;  bio?: string;&#13;&#10;  staffCode: string;&#13;&#10;  positionCode: string;&#13;&#10;  academicCode?: string;&#13;&#10;  degreeCode?: string;&#13;&#10;  facultyCode: string; // Đổi từ workingFacultyCode sang workingFacultyName&#13;&#10;  genderCode: string;&#13;&#10;  avatarUrl?: string;&#13;&#10;  backgroundUrl?: string;&#13;&#10;}&#13;&#10;&#13;&#10;export interface ProfileCompletionStatus {&#13;&#10;  isCompleted: boolean;&#13;&#10;  missingFields?: string[];&#13;&#10;}&#13;&#10;&#13;&#10;export interface CollegeWithHierarchyInfo {&#13;&#10;  name: string; // Sử dụng name làm identifier chính&#13;&#10;  code?: string; // Code tùy chọn&#13;&#10;  faculties: FacultyWithMajorsInfo[];&#13;&#10;}&#13;&#10;&#13;&#10;export interface FacultyWithMajorsInfo {&#13;&#10;  name: string; // Sử dụng name làm identifier chính&#13;&#10;  code?: string; // Code tùy chọn&#13;&#10;  collegeName: string; // Tên college&#13;&#10;  majors: MajorInfo[];&#13;&#10;}&#13;&#10;&#13;&#10;// Updated interface for hierarchical categories&#13;&#10;export interface HierarchicalCategories {&#13;&#10;  degrees?: DegreeInfo[];&#13;&#10;  academics?: AcademicInfo[];&#13;&#10;  positions?: PositionInfo[];&#13;&#10;  colleges: CollegeWithHierarchyInfo[];&#13;&#10;  batches?: BatchInfo[];&#13;&#10;  genders: GenderInfo[];&#13;&#10;}" />
+            </PendingDiffInfo>
+          </value>
+        </entry>
+        <entry key="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/controller/PostController.java">
+          <value>
+            <PendingDiffInfo>
+              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/controller/PostController.java" />
+              <option name="originalContent" value="package vn.ctu.edu.postservice.controller;&#10;&#10;import jakarta.validation.Valid;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.domain.Sort;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.web.multipart.MultipartFile;&#10;import vn.ctu.edu.postservice.dto.request.CommentRequest;&#10;import vn.ctu.edu.postservice.dto.request.InteractionRequest;&#10;import vn.ctu.edu.postservice.dto.request.PostRequest;&#10;import vn.ctu.edu.postservice.dto.response.CommentResponse;&#10;import vn.ctu.edu.postservice.dto.response.InteractionResponse;&#10;import vn.ctu.edu.postservice.dto.response.PostResponse;&#10;import vn.ctu.edu.postservice.security.SecurityContextHolder;&#10;import vn.ctu.edu.postservice.security.annotation.RequireAuth;&#10;import vn.ctu.edu.postservice.service.CommentService;&#10;import vn.ctu.edu.postservice.service.InteractionService;&#10;import vn.ctu.edu.postservice.service.PostService;&#10;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/posts&quot;)&#10;@CrossOrigin(origins = {&quot;http://localhost:3000&quot;, &quot;http://localhost:3001&quot;}, allowCredentials = &quot;true&quot;)&#10;public class PostController {&#10;&#10;    @Autowired&#10;    private PostService postService;&#10;&#10;    @Autowired&#10;    private CommentService commentService;&#10;&#10;    @Autowired&#10;    private InteractionService interactionService;&#10;&#10;    // Create post&#10;    @PostMapping&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; createPost(&#10;            @Valid @RequestPart(&quot;post&quot;) PostRequest request,&#10;            @RequestPart(value = &quot;files&quot;, required = false) List&lt;MultipartFile&gt; files) {&#10;        &#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            PostResponse response = postService.createPost(request, files, currentUserId);&#10;            return ResponseEntity.status(HttpStatus.CREATED).body(response);&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Authentication required&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.status(HttpStatus.BAD_REQUEST)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to create post&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Internal server error&quot;, &quot;message&quot;, &quot;Failed to create post&quot;));&#10;        }&#10;    }&#10;&#10;    // Alternative endpoint for JSON-only post creation (without files)&#10;    @PostMapping(&quot;/simple&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; createSimplePost(@Valid @RequestBody PostRequest request) {&#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            PostResponse response = postService.createPost(request, null, currentUserId);&#10;            return ResponseEntity.status(HttpStatus.CREATED).body(response);&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Authentication required&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.status(HttpStatus.BAD_REQUEST)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to create post&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Internal server error&quot;, &quot;message&quot;, &quot;Failed to create post&quot;));&#10;        }&#10;    }&#10;&#10;    // Get all posts with pagination&#10;    @GetMapping&#10;    public ResponseEntity&lt;?&gt; getAllPosts(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size,&#10;            @RequestParam(defaultValue = &quot;createdAt&quot;) String sortBy,&#10;            @RequestParam(defaultValue = &quot;desc&quot;) String sortDir,&#10;            @RequestParam(required = false) String authorId,&#10;            @RequestParam(required = false) String category,&#10;            @RequestParam(required = false) String search) {&#10;&#10;        try {&#10;            Sort sort = sortDir.equalsIgnoreCase(&quot;desc&quot;) ?&#10;                Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();&#10;            Pageable pageable = PageRequest.of(page, size, sort);&#10;&#10;            Page&lt;PostResponse&gt; posts;&#10;&#10;            if (search != null &amp;&amp; !search.trim().isEmpty()) {&#10;                posts = postService.searchPosts(search.trim(), pageable);&#10;            } else if (authorId != null &amp;&amp; !authorId.trim().isEmpty()) {&#10;                posts = postService.getPostsByAuthor(authorId.trim(), pageable);&#10;            } else if (category != null &amp;&amp; !category.trim().isEmpty()) {&#10;                posts = postService.getPostsByCategory(category.trim(), pageable);&#10;            } else {&#10;                posts = postService.getAllPosts(pageable);&#10;            }&#10;&#10;            return ResponseEntity.ok(posts);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to retrieve posts&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    // Get post by ID (auto-record VIEW interaction)&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;?&gt; getPostById(@PathVariable String id) {&#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserId();&#10;            PostResponse post = postService.getPostById(id, currentUserId);&#10;            return ResponseEntity.ok(post);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.status(HttpStatus.NOT_FOUND)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Post not found&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to retrieve post&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    // Update post (author only)&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; updatePost(&#10;            @PathVariable String id,&#10;            @Valid @RequestBody PostRequest request) {&#10;        try {&#10;            String authorId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            PostResponse updatedPost = postService.updatePost(id, request, authorId);&#10;            return ResponseEntity.ok(updatedPost);&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Authentication required&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (RuntimeException e) {&#10;            String message = e.getMessage();&#10;            if (message.contains(&quot;Only the author&quot;)) {&#10;                return ResponseEntity.status(HttpStatus.FORBIDDEN)&#10;                        .body(Map.of(&quot;error&quot;, &quot;Access denied&quot;, &quot;message&quot;, message));&#10;            }&#10;            return ResponseEntity.status(HttpStatus.NOT_FOUND)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Post not found&quot;, &quot;message&quot;, message));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to update post&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    // Delete post (author only)&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; deletePost(@PathVariable String id) {&#10;        try {&#10;            String authorId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            postService.deletePost(id, authorId);&#10;            return ResponseEntity.noContent().build();&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Authentication required&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (RuntimeException e) {&#10;            String message = e.getMessage();&#10;            if (message.contains(&quot;Only the author&quot;)) {&#10;                return ResponseEntity.status(HttpStatus.FORBIDDEN)&#10;                        .body(Map.of(&quot;error&quot;, &quot;Access denied&quot;, &quot;message&quot;, message));&#10;            }&#10;            return ResponseEntity.status(HttpStatus.NOT_FOUND)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Post not found&quot;, &quot;message&quot;, message));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to delete post&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    // Add comment to post&#10;    @PostMapping(&quot;/{id}/comments&quot;)&#10;    public ResponseEntity&lt;CommentResponse&gt; addComment(&#10;            @PathVariable String id,&#10;            @Valid @RequestBody CommentRequest request) {&#10;        String currentUserId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;        try {&#10;            CommentResponse comment = commentService.createComment(id, request, currentUserId);&#10;            return ResponseEntity.status(HttpStatus.CREATED).body(comment);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;    }&#10;&#10;    // Get comments for post&#10;    @GetMapping(&quot;/{id}/comments&quot;)&#10;    public ResponseEntity&lt;Page&lt;CommentResponse&gt;&gt; getComments(&#10;            @PathVariable String id,&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size) {&#10;&#10;        Pageable pageable = PageRequest.of(page, size, Sort.by(&quot;createdAt&quot;).ascending());&#10;        Page&lt;CommentResponse&gt; comments = commentService.getCommentsByPost(id, pageable);&#10;        return ResponseEntity.ok(comments);&#10;    }&#10;&#10;    // Record interaction (LIKE/SHARE/BOOKMARK)&#10;    @PostMapping(&quot;/{id}/interactions&quot;)&#10;    public ResponseEntity&lt;InteractionResponse&gt; recordInteraction(&#10;            @PathVariable String id,&#10;            @Valid @RequestBody InteractionRequest request) {&#10;        String userId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;        try {&#10;            InteractionResponse interaction = interactionService.createInteraction(id, request, userId);&#10;            if (interaction == null) {&#10;                // Interaction was removed (e.g., unlike)&#10;                return ResponseEntity.noContent().build();&#10;            }&#10;            return ResponseEntity.status(HttpStatus.CREATED).body(interaction);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;    }&#10;&#10;    // Check if user has liked post&#10;    @GetMapping(&quot;/{id}/likes/check&quot;)&#10;    public ResponseEntity&lt;Boolean&gt; hasUserLikedPost(&#10;            @PathVariable String id) {&#10;        String userId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;        boolean hasLiked = interactionService.hasUserReacted(id, userId);&#10;        return ResponseEntity.ok(hasLiked);&#10;    }&#10;&#10;}&#10;" />
+              <option name="updatedContent" value="package vn.ctu.edu.postservice.controller;&#10;&#10;import jakarta.validation.Valid;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.domain.Sort;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.web.multipart.MultipartFile;&#10;import vn.ctu.edu.postservice.dto.request.CommentRequest;&#10;import vn.ctu.edu.postservice.dto.request.InteractionRequest;&#10;import vn.ctu.edu.postservice.dto.request.PostRequest;&#10;import vn.ctu.edu.postservice.dto.response.CommentResponse;&#10;import vn.ctu.edu.postservice.dto.response.InteractionResponse;&#10;import vn.ctu.edu.postservice.dto.response.PostResponse;&#10;import vn.ctu.edu.postservice.security.SecurityContextHolder;&#10;import vn.ctu.edu.postservice.security.annotation.RequireAuth;&#10;import vn.ctu.edu.postservice.service.CommentService;&#10;import vn.ctu.edu.postservice.service.InteractionService;&#10;import vn.ctu.edu.postservice.service.PostService;&#10;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/posts&quot;)&#10;@CrossOrigin(origins = {&quot;http://localhost:3000&quot;, &quot;http://localhost:3001&quot;}, allowCredentials = &quot;true&quot;)&#10;public class PostController {&#10;&#10;    @Autowired&#10;    private PostService postService;&#10;&#10;    @Autowired&#10;    private CommentService commentService;&#10;&#10;    @Autowired&#10;    private InteractionService interactionService;&#10;&#10;    // Create post&#10;    @PostMapping&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; createPost(&#10;            @Valid @RequestPart(&quot;post&quot;) PostRequest request,&#10;            @RequestPart(value = &quot;files&quot;, required = false) List&lt;MultipartFile&gt; files) {&#10;        &#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            PostResponse response = postService.createPost(request, files, currentUserId);&#10;            return ResponseEntity.status(HttpStatus.CREATED).body(response);&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Authentication required&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.status(HttpStatus.BAD_REQUEST)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to create post&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Internal server error&quot;, &quot;message&quot;, &quot;Failed to create post&quot;));&#10;        }&#10;    }&#10;&#10;    // Alternative endpoint for JSON-only post creation (without files)&#10;    @PostMapping(&quot;/simple&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; createSimplePost(@Valid @RequestBody PostRequest request) {&#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            PostResponse response = postService.createPost(request, null, currentUserId);&#10;            return ResponseEntity.status(HttpStatus.CREATED).body(response);&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Authentication required&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.status(HttpStatus.BAD_REQUEST)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to create post&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Internal server error&quot;, &quot;message&quot;, &quot;Failed to create post&quot;));&#10;        }&#10;    }&#10;&#10;    // Get all posts with pagination&#10;    @GetMapping&#10;    public ResponseEntity&lt;?&gt; getAllPosts(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size,&#10;            @RequestParam(defaultValue = &quot;createdAt&quot;) String sortBy,&#10;            @RequestParam(defaultValue = &quot;desc&quot;) String sortDir,&#10;            @RequestParam(required = false) String authorId,&#10;            @RequestParam(required = false) String category,&#10;            @RequestParam(required = false) String search) {&#10;&#10;        try {&#10;            Sort sort = sortDir.equalsIgnoreCase(&quot;desc&quot;) ?&#10;                Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();&#10;            Pageable pageable = PageRequest.of(page, size, sort);&#10;&#10;            Page&lt;PostResponse&gt; posts;&#10;&#10;            if (search != null &amp;&amp; !search.trim().isEmpty()) {&#10;                posts = postService.searchPosts(search.trim(), pageable);&#10;            } else if (authorId != null &amp;&amp; !authorId.trim().isEmpty()) {&#10;                posts = postService.getPostsByAuthor(authorId.trim(), pageable);&#10;            } else if (category != null &amp;&amp; !category.trim().isEmpty()) {&#10;                posts = postService.getPostsByCategory(category.trim(), pageable);&#10;            } else {&#10;                posts = postService.getAllPosts(pageable);&#10;            }&#10;&#10;            return ResponseEntity.ok(posts);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to retrieve posts&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    // Get post by ID (auto-record VIEW interaction)&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;?&gt; getPostById(@PathVariable String id) {&#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserId();&#10;            PostResponse post = postService.getPostById(id, currentUserId);&#10;            return ResponseEntity.ok(post);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.status(HttpStatus.NOT_FOUND)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Post not found&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to retrieve post&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    // Update post (author only)&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; updatePost(&#10;            @PathVariable String id,&#10;            @Valid @RequestBody PostRequest request) {&#10;        try {&#10;            String authorId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            PostResponse updatedPost = postService.updatePost(id, request, authorId);&#10;            return ResponseEntity.ok(updatedPost);&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Authentication required&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (RuntimeException e) {&#10;            String message = e.getMessage();&#10;            if (message.contains(&quot;Only the author&quot;)) {&#10;                return ResponseEntity.status(HttpStatus.FORBIDDEN)&#10;                        .body(Map.of(&quot;error&quot;, &quot;Access denied&quot;, &quot;message&quot;, message));&#10;            }&#10;            return ResponseEntity.status(HttpStatus.NOT_FOUND)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Post not found&quot;, &quot;message&quot;, message));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to update post&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    // Delete post (author only)&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; deletePost(@PathVariable String id) {&#10;        try {&#10;            String authorId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            postService.deletePost(id, authorId);&#10;            return ResponseEntity.noContent().build();&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Authentication required&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (RuntimeException e) {&#10;            String message = e.getMessage();&#10;            if (message.contains(&quot;Only the author&quot;)) {&#10;                return ResponseEntity.status(HttpStatus.FORBIDDEN)&#10;                        .body(Map.of(&quot;error&quot;, &quot;Access denied&quot;, &quot;message&quot;, message));&#10;            }&#10;            return ResponseEntity.status(HttpStatus.NOT_FOUND)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Post not found&quot;, &quot;message&quot;, message));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to delete post&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    // Add comment to post&#10;    @PostMapping(&quot;/{id}/comments&quot;)&#10;    public ResponseEntity&lt;CommentResponse&gt; addComment(&#10;            @PathVariable String id,&#10;            @Valid @RequestBody CommentRequest request) {&#10;        String currentUserId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;        try {&#10;            CommentResponse comment = commentService.createComment(id, request, currentUserId);&#10;            return ResponseEntity.status(HttpStatus.CREATED).body(comment);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;    }&#10;&#10;    // Get comments for post&#10;    @GetMapping(&quot;/{id}/comments&quot;)&#10;    public ResponseEntity&lt;Page&lt;CommentResponse&gt;&gt; getComments(&#10;            @PathVariable String id,&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size) {&#10;&#10;        Pageable pageable = PageRequest.of(page, size, Sort.by(&quot;createdAt&quot;).ascending());&#10;        Page&lt;CommentResponse&gt; comments = commentService.getCommentsByPost(id, pageable);&#10;        return ResponseEntity.ok(comments);&#10;    }&#10;&#10;    // Record interaction (LIKE/SHARE/BOOKMARK)&#10;    @PostMapping(&quot;/{id}/interactions&quot;)&#10;    public ResponseEntity&lt;InteractionResponse&gt; recordInteraction(&#10;            @PathVariable String id,&#10;            @Valid @RequestBody InteractionRequest request) {&#10;        String userId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;        try {&#10;            InteractionResponse interaction = interactionService.createInteraction(id, request, userId);&#10;            if (interaction == null) {&#10;                // Interaction was removed (e.g., unlike)&#10;                return ResponseEntity.noContent().build();&#10;            }&#10;            return ResponseEntity.status(HttpStatus.CREATED).body(interaction);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;    }&#10;&#10;    // Check if user has liked post&#10;    @GetMapping(&quot;/{id}/likes/check&quot;)&#10;    public ResponseEntity&lt;Boolean&gt; hasUserLikedPost(&#10;            @PathVariable String id) {&#10;        String userId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;        boolean hasLiked = interactionService.hasUserReacted(id, userId);&#10;        return ResponseEntity.ok(hasLiked);&#10;    }&#10;&#10;    // Get trending posts&#10;    @GetMapping(&quot;/trending&quot;)&#10;    public ResponseEntity&lt;?&gt; getTrendingPosts() {&#10;        try {&#10;            List&lt;PostResponse&gt; posts = postService.getTopViewedPosts();&#10;            return ResponseEntity.ok(posts);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to retrieve trending posts&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    // Get top viewed posts&#10;    @GetMapping(&quot;/top-viewed&quot;)&#10;    public ResponseEntity&lt;?&gt; getTopViewedPosts() {&#10;        try {&#10;            List&lt;PostResponse&gt; posts = postService.getTopViewedPosts();&#10;            return ResponseEntity.ok(posts);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to retrieve top viewed posts&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    // Get top liked posts&#10;    @GetMapping(&quot;/top-liked&quot;)&#10;    public ResponseEntity&lt;?&gt; getTopLikedPosts() {&#10;        try {&#10;            List&lt;PostResponse&gt; posts = postService.getTopLikedPosts();&#10;            return ResponseEntity.ok(posts);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to retrieve top liked posts&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;}" />
+            </PendingDiffInfo>
+          </value>
+        </entry>
+        <entry key="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/dto/request/PostRequest.java">
+          <value>
+            <PendingDiffInfo>
+              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/dto/request/PostRequest.java" />
+              <option name="originalContent" value="package vn.ctu.edu.postservice.dto.request;&#10;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Size;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;@Data&#10;@AllArgsConstructor&#10;@NoArgsConstructor&#10;@Builder&#10;public class PostRequest {&#10;    @NotBlank(message = &quot;Content is required&quot;)&#10;    @Size(max = 5000, message = &quot;Content cannot exceed 5000 characters&quot;)&#10;    private String content;&#10;&#10;&#10;    private List&lt;String&gt; tags = new ArrayList&lt;&gt;();&#10;&#10;    private String category;&#10;&#10;&#10;}&#10;" />
+              <option name="updatedContent" value="package vn.ctu.edu.postservice.dto.request;&#10;&#10;import jakarta.validation.constraints.NotBlank;&#10;import jakarta.validation.constraints.Size;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;@Data&#10;@AllArgsConstructor&#10;@NoArgsConstructor&#10;@Builder&#10;public class PostRequest {&#10;    @Size(max = 200, message = &quot;Title cannot exceed 200 characters&quot;)&#10;    private String title;&#10;&#10;    @NotBlank(message = &quot;Content is required&quot;)&#10;    @Size(max = 5000, message = &quot;Content cannot exceed 5000 characters&quot;)&#10;    private String content;&#10;&#10;    @Builder.Default&#10;    private List&lt;String&gt; tags = new ArrayList&lt;&gt;();&#10;&#10;    private String category;&#10;&#10;    private String visibility = &quot;PUBLIC&quot;; // PUBLIC, FRIENDS, PRIVATE&#10;}" />
+            </PendingDiffInfo>
+          </value>
+        </entry>
+        <entry key="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/dto/response/PostResponse.java">
+          <value>
+            <PendingDiffInfo>
+              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/dto/response/PostResponse.java" />
+              <option name="originalContent" value="package vn.ctu.edu.postservice.dto.response;&#10;&#10;import vn.ctu.edu.postservice.entity.PostEntity;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.List;&#10;&#10;public class PostResponse {&#10;&#10;    private String id;&#10;    private String title;&#10;    private String content;&#10;    private String authorId;&#10;    private List&lt;String&gt; images;&#10;    private List&lt;String&gt; tags;&#10;    private String category;&#10;    private PostStatsResponse stats;&#10;    private LocalDateTime createdAt;&#10;    private LocalDateTime updatedAt;&#10;&#10;    // Constructors&#10;    public PostResponse() {}&#10;&#10;    public PostResponse(PostEntity post) {&#10;        this.id = post.getId();&#10;        this.title = post.getTitle();&#10;        this.content = post.getContent();&#10;        this.authorId = post.getAuthorId();&#10;        this.images = post.getImages();&#10;        this.tags = post.getTags();&#10;        this.category = post.getCategory();&#10;        this.stats = new PostStatsResponse(post.getStats());&#10;        this.createdAt = post.getCreatedAt();&#10;        this.updatedAt = post.getUpdatedAt();&#10;    }&#10;&#10;    // Getters and Setters&#10;    public String getId() {&#10;        return id;&#10;    }&#10;&#10;    public void setId(String id) {&#10;        this.id = id;&#10;    }&#10;&#10;    public String getTitle() {&#10;        return title;&#10;    }&#10;&#10;    public void setTitle(String title) {&#10;        this.title = title;&#10;    }&#10;&#10;    public String getContent() {&#10;        return content;&#10;    }&#10;&#10;    public void setContent(String content) {&#10;        this.content = content;&#10;    }&#10;&#10;    public String getAuthorId() {&#10;        return authorId;&#10;    }&#10;&#10;    public void setAuthorId(String authorId) {&#10;        this.authorId = authorId;&#10;    }&#10;&#10;    public List&lt;String&gt; getImages() {&#10;        return images;&#10;    }&#10;&#10;    public void setImages(List&lt;String&gt; images) {&#10;        this.images = images;&#10;    }&#10;&#10;    public List&lt;String&gt; getTags() {&#10;        return tags;&#10;    }&#10;&#10;    public void setTags(List&lt;String&gt; tags) {&#10;        this.tags = tags;&#10;    }&#10;&#10;    public String getCategory() {&#10;        return category;&#10;    }&#10;&#10;    public void setCategory(String category) {&#10;        this.category = category;&#10;    }&#10;&#10;    public PostStatsResponse getStats() {&#10;        return stats;&#10;    }&#10;&#10;    public void setStats(PostStatsResponse stats) {&#10;        this.stats = stats;&#10;    }&#10;&#10;    public LocalDateTime getCreatedAt() {&#10;        return createdAt;&#10;    }&#10;&#10;    public void setCreatedAt(LocalDateTime createdAt) {&#10;        this.createdAt = createdAt;&#10;    }&#10;&#10;    public LocalDateTime getUpdatedAt() {&#10;        return updatedAt;&#10;    }&#10;&#10;    public void setUpdatedAt(LocalDateTime updatedAt) {&#10;        this.updatedAt = updatedAt;&#10;    }&#10;&#10;    public static class PostStatsResponse {&#10;        private long views;&#10;        private long likes;&#10;        private long shares;&#10;        private long comments;&#10;&#10;        public PostStatsResponse() {}&#10;&#10;        public PostStatsResponse(PostEntity.PostStats stats) {&#10;            this.views = stats.getViews();&#10;            this.likes = stats.getLikes();&#10;            this.shares = stats.getShares();&#10;            this.comments = stats.getComments();&#10;        }&#10;&#10;        public long getViews() {&#10;            return views;&#10;        }&#10;&#10;        public void setViews(long views) {&#10;            this.views = views;&#10;        }&#10;&#10;        public long getLikes() {&#10;            return likes;&#10;        }&#10;&#10;        public void setLikes(long likes) {&#10;            this.likes = likes;&#10;        }&#10;&#10;        public long getShares() {&#10;            return shares;&#10;        }&#10;&#10;        public void setShares(long shares) {&#10;            this.shares = shares;&#10;        }&#10;&#10;        public long getComments() {&#10;            return comments;&#10;        }&#10;&#10;        public void setComments(long comments) {&#10;            this.comments = comments;&#10;        }&#10;    }&#10;}&#10;" />
+              <option name="updatedContent" value="package vn.ctu.edu.postservice.dto.response;&#13;&#10;&#13;&#10;import vn.ctu.edu.postservice.dto.AuthorInfo;&#13;&#10;import vn.ctu.edu.postservice.entity.PostEntity;&#13;&#10;import vn.ctu.edu.postservice.entity.InteractionEntity;&#13;&#10;&#13;&#10;import java.time.LocalDateTime;&#13;&#10;import java.util.List;&#13;&#10;import java.util.Map;&#13;&#10;&#13;&#10;public class PostResponse {&#13;&#10;    private String id;&#13;&#10;    private String title;&#13;&#10;    private String content;&#13;&#10;    private String authorId;&#13;&#10;    private String authorName;&#13;&#10;    private String authorAvatar;&#13;&#10;    private List&lt;String&gt; images;&#13;&#10;    private List&lt;String&gt; tags;&#13;&#10;    private String category;&#13;&#10;    private String visibility;&#13;&#10;    private PostStatsResponse stats;&#13;&#10;    private LocalDateTime createdAt;&#13;&#10;    private LocalDateTime updatedAt;&#13;&#10;&#13;&#10;    // Constructors&#13;&#10;    public PostResponse() {}&#13;&#10;&#13;&#10;    public PostResponse(PostEntity post) {&#13;&#10;        this.id = post.getId();&#13;&#10;        this.title = post.getTitle();&#13;&#10;        this.content = post.getContent();&#13;&#10;        &#13;&#10;        // Handle AuthorInfo properly&#13;&#10;        if (post.getAuthor() != null) {&#13;&#10;            this.authorId = post.getAuthor().getId();&#13;&#10;            this.authorName = post.getAuthor().getName();&#13;&#10;            this.authorAvatar = post.getAuthor().getAvatar();&#13;&#10;        }&#13;&#10;        &#13;&#10;        this.images = post.getImages();&#13;&#10;        this.tags = post.getTags();&#13;&#10;        this.category = post.getCategory();&#13;&#10;        this.visibility = post.getVisibility();&#13;&#10;        this.stats = new PostStatsResponse(post.getStats());&#13;&#10;        this.createdAt = post.getCreatedAt();&#13;&#10;        this.updatedAt = post.getUpdatedAt();&#13;&#10;    }&#13;&#10;&#13;&#10;    // Getters and Setters&#13;&#10;    public String getId() { return id; }&#13;&#10;    public void setId(String id) { this.id = id; }&#13;&#10;&#13;&#10;    public String getTitle() { return title; }&#13;&#10;    public void setTitle(String title) { this.title = title; }&#13;&#10;&#13;&#10;    public String getContent() { return content; }&#13;&#10;    public void setContent(String content) { this.content = content; }&#13;&#10;&#13;&#10;    public String getAuthorId() { return authorId; }&#13;&#10;    public void setAuthorId(String authorId) { this.authorId = authorId; }&#13;&#10;&#13;&#10;    public String getAuthorName() { return authorName; }&#13;&#10;    public void setAuthorName(String authorName) { this.authorName = authorName; }&#13;&#10;&#13;&#10;    public String getAuthorAvatar() { return authorAvatar; }&#13;&#10;    public void setAuthorAvatar(String authorAvatar) { this.authorAvatar = authorAvatar; }&#13;&#10;&#13;&#10;    public List&lt;String&gt; getImages() { return images; }&#13;&#10;    public void setImages(List&lt;String&gt; images) { this.images = images; }&#13;&#10;&#13;&#10;    public List&lt;String&gt; getTags() { return tags; }&#13;&#10;    public void setTags(List&lt;String&gt; tags) { this.tags = tags; }&#13;&#10;&#13;&#10;    public String getCategory() { return category; }&#13;&#10;    public void setCategory(String category) { this.category = category; }&#13;&#10;&#13;&#10;    public String getVisibility() { return visibility; }&#13;&#10;    public void setVisibility(String visibility) { this.visibility = visibility; }&#13;&#10;&#13;&#10;    public PostStatsResponse getStats() { return stats; }&#13;&#10;    public void setStats(PostStatsResponse stats) { this.stats = stats; }&#13;&#10;&#13;&#10;    public LocalDateTime getCreatedAt() { return createdAt; }&#13;&#10;    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }&#13;&#10;&#13;&#10;    public LocalDateTime getUpdatedAt() { return updatedAt; }&#13;&#10;    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }&#13;&#10;&#13;&#10;    public static class PostStatsResponse {&#13;&#10;        private long views;&#13;&#10;        private long likes;&#13;&#10;        private long shares;&#13;&#10;        private long comments;&#13;&#10;        private long bookmarks;&#13;&#10;        private Map&lt;InteractionEntity.InteractionType.ReactionType, Integer&gt; reactions;&#13;&#10;&#13;&#10;        public PostStatsResponse() {}&#13;&#10;&#13;&#10;        public PostStatsResponse(PostEntity.PostStats stats) {&#13;&#10;            this.views = stats.getViews();&#13;&#10;            this.shares = stats.getShares();&#13;&#10;            this.comments = stats.getComments();&#13;&#10;            this.reactions = stats.getReactions();&#13;&#10;            &#13;&#10;            // Calculate total likes from reactions&#13;&#10;            this.likes = reactions.values().stream().mapToInt(Integer::intValue).sum();&#13;&#10;            &#13;&#10;            // Set bookmarks if available&#13;&#10;            this.bookmarks = reactions.getOrDefault(&#13;&#10;                InteractionEntity.InteractionType.ReactionType.BOOKMARK, 0&#13;&#10;            );&#13;&#10;        }&#13;&#10;&#13;&#10;        // Getters and Setters&#13;&#10;        public long getViews() { return views; }&#13;&#10;        public void setViews(long views) { this.views = views; }&#13;&#10;&#13;&#10;        public long getLikes() { return likes; }&#13;&#10;        public void setLikes(long likes) { this.likes = likes; }&#13;&#10;&#13;&#10;        public long getShares() { return shares; }&#13;&#10;        public void setShares(long shares) { this.shares = shares; }&#13;&#10;&#13;&#10;        public long getComments() { return comments; }&#13;&#10;        public void setComments(long comments) { this.comments = comments; }&#13;&#10;&#13;&#10;        public long getBookmarks() { return bookmarks; }&#13;&#10;        public void setBookmarks(long bookmarks) { this.bookmarks = bookmarks; }&#13;&#10;&#13;&#10;        public Map&lt;InteractionEntity.InteractionType.ReactionType, Integer&gt; getReactions() {&#13;&#10;            return reactions;&#13;&#10;        }&#13;&#10;        public void setReactions(Map&lt;InteractionEntity.InteractionType.ReactionType, Integer&gt; reactions) {&#13;&#10;            this.reactions = reactions;&#13;&#10;        }&#13;&#10;    }&#13;&#10;}" />
+            </PendingDiffInfo>
+          </value>
+        </entry>
+        <entry key="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/entity/PostEntity.java">
+          <value>
+            <PendingDiffInfo>
+              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/entity/PostEntity.java" />
+              <option name="originalContent" value="package vn.ctu.edu.postservice.entity;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;import org.springframework.data.annotation.CreatedDate;&#10;import org.springframework.data.annotation.Id;&#10;import org.springframework.data.annotation.LastModifiedDate;&#10;import org.springframework.data.mongodb.core.mapping.Document;&#10;import org.springframework.data.mongodb.core.mapping.Field;&#10;import vn.ctu.edu.postservice.dto.AuthorInfo;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;@Data&#10;@AllArgsConstructor&#10;@NoArgsConstructor&#10;@Builder&#10;@Document(collection = &quot;posts&quot;)&#10;public class PostEntity {&#10;&#10;    @Id&#10;    private String id;&#10;&#10;    private String content;&#10;&#10;    @Field(&quot;author&quot;)&#10;    private AuthorInfo author;&#10;&#10;    private List&lt;String&gt; images = new ArrayList&lt;&gt;();&#10;&#10;    private List&lt;String&gt; tags = new ArrayList&lt;&gt;();&#10;&#10;    private String category;&#10;&#10;    private PostStats stats = new PostStats();&#10;&#10;    @Field(&quot;created_at&quot;)&#10;    @CreatedDate&#10;    private LocalDateTime createdAt;&#10;&#10;    @LastModifiedDate&#10;    @Field(&quot;updated_at&quot;)&#10;    private LocalDateTime updatedAt;&#10;&#10;    // Nested class for statistics&#10;    @Data&#10;    @AllArgsConstructor&#10;    @NoArgsConstructor&#10;    @Builder&#10;    public static class PostStats {&#10;        private long views = 0;&#10;        private long shares = 0;&#10;        private long comments = 0;&#10;        private Map&lt;InteractionEntity.InteractionType.ReactionType, Integer&gt; reactions = new HashMap&lt;&gt;();&#10;&#10;        public void incrementReaction(InteractionEntity.InteractionType.ReactionType reaction) {&#10;            reactions.merge(reaction, 1, Integer::sum);&#10;        }&#10;&#10;        public void decrementReaction(InteractionEntity.InteractionType.ReactionType reaction) {&#10;            reactions.computeIfPresent(reaction, (k, v) -&gt; Math.max(0, v - 1));&#10;        }&#10;        public void incrementViews() {&#10;            this.views++;&#10;        }&#10;&#10;&#10;        public void incrementShares() {&#10;            this.shares++;&#10;        }&#10;&#10;        public void incrementComments() {&#10;            this.comments++;&#10;        }&#10;&#10;        public void decrementComments() {&#10;            this.comments = Math.max(0, this.comments - 1);&#10;        }&#10;&#10;        public void decrementShares() {&#10;            this.shares = Math.max(0, this.shares - 1);&#10;        }&#10;&#10;    }&#10;}&#10;" />
+              <option name="updatedContent" value="package vn.ctu.edu.postservice.entity;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;import org.springframework.data.annotation.CreatedDate;&#10;import org.springframework.data.annotation.Id;&#10;import org.springframework.data.annotation.LastModifiedDate;&#10;import org.springframework.data.mongodb.core.mapping.Document;&#10;import org.springframework.data.mongodb.core.mapping.Field;&#10;import vn.ctu.edu.postservice.dto.AuthorInfo;&#10;&#10;import java.time.LocalDateTime;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;@Data&#10;@AllArgsConstructor&#10;@NoArgsConstructor&#10;@Builder&#10;@Document(collection = &quot;posts&quot;)&#10;public class PostEntity {&#10;&#10;    @Id&#10;    private String id;&#10;&#10;    private String title;&#10;&#10;    private String content;&#10;&#10;    @Field(&quot;author&quot;)&#10;    private AuthorInfo author;&#10;&#10;    @Builder.Default&#10;    private List&lt;String&gt; images = new ArrayList&lt;&gt;();&#10;&#10;    @Builder.Default&#10;    private List&lt;String&gt; tags = new ArrayList&lt;&gt;();&#10;&#10;    private String category;&#10;&#10;    @Builder.Default&#10;    private String visibility = &quot;PUBLIC&quot;; // PUBLIC, FRIENDS, PRIVATE&#10;&#10;    @Builder.Default&#10;    private PostStats stats = new PostStats();&#10;&#10;    @Field(&quot;created_at&quot;)&#10;    @CreatedDate&#10;    private LocalDateTime createdAt;&#10;&#10;    @LastModifiedDate&#10;    @Field(&quot;updated_at&quot;)&#10;    private LocalDateTime updatedAt;&#10;&#10;    // Convenience method to get authorId&#10;    public String getAuthorId() {&#10;        return author != null ? author.getId() : null;&#10;    }&#10;&#10;    // Nested class for statistics&#10;    @Data&#10;    @AllArgsConstructor&#10;    @NoArgsConstructor&#10;    @Builder&#10;    public static class PostStats {&#10;        @Builder.Default&#10;        private long views = 0;&#10;        @Builder.Default&#10;        private long shares = 0;&#10;        @Builder.Default&#10;        private long comments = 0;&#10;        @Builder.Default&#10;        private Map&lt;InteractionEntity.InteractionType.ReactionType, Integer&gt; reactions = new HashMap&lt;&gt;();&#10;&#10;        public void incrementReaction(InteractionEntity.InteractionType.ReactionType reaction) {&#10;            reactions.merge(reaction, 1, Integer::sum);&#10;        }&#10;&#10;        public void decrementReaction(InteractionEntity.InteractionType.ReactionType reaction) {&#10;            reactions.computeIfPresent(reaction, (k, v) -&gt; Math.max(0, v - 1));&#10;        }&#10;&#10;        public void incrementViews() {&#10;            this.views++;&#10;        }&#10;&#10;        public void incrementShares() {&#10;            this.shares++;&#10;        }&#10;&#10;        public void incrementComments() {&#10;            this.comments++;&#10;        }&#10;&#10;        public void decrementComments() {&#10;            this.comments = Math.max(0, this.comments - 1);&#10;        }&#10;&#10;        public void decrementShares() {&#10;            this.shares = Math.max(0, this.shares - 1);&#10;        }&#10;&#10;        // Get total likes from all reaction types&#10;        public long getLikes() {&#10;            return reactions.values().stream().mapToInt(Integer::intValue).sum();&#10;        }&#10;    }&#10;}" />
+            </PendingDiffInfo>
+          </value>
+        </entry>
+        <entry key="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/repository/InteractionRepository.java">
+          <value>
+            <PendingDiffInfo>
+              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/repository/InteractionRepository.java" />
+              <option name="originalContent" value="package vn.ctu.edu.postservice.repository;&#10;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.mongodb.repository.MongoRepository;&#10;import org.springframework.stereotype.Repository;&#10;import vn.ctu.edu.postservice.dto.AuthorInfo;&#10;import vn.ctu.edu.postservice.entity.InteractionEntity;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Repository&#10;public interface InteractionRepository extends MongoRepository&lt;InteractionEntity, String&gt; {&#10;&#10;    Optional&lt;InteractionEntity&gt; findByPostIdAndUserIdAndType(String postId, String userId, InteractionEntity.InteractionType type);&#10;&#10;    Optional&lt;InteractionEntity&gt; findByPostIdAndAuthorAndType(String postId, AuthorInfo author, InteractionEntity.InteractionType type);&#10;&#10;    List&lt;InteractionEntity&gt; findByPostId(String postId);&#10;&#10;    List&lt;InteractionEntity&gt; findByUserId(String userId);&#10;&#10;    Page&lt;InteractionEntity&gt; findByPostIdAndType(String postId, InteractionEntity.InteractionType type, Pageable pageable);&#10;&#10;    long countByPostIdAndType(String postId, InteractionEntity.InteractionType type);&#10;&#10;    long countByUserIdAndType(String userId, InteractionEntity.InteractionType type);&#10;&#10;    void deleteByPostId(String postId);&#10;}&#10;" />
+              <option name="updatedContent" value="package vn.ctu.edu.postservice.repository;&#13;&#10;&#13;&#10;import org.springframework.data.domain.Page;&#13;&#10;import org.springframework.data.domain.Pageable;&#13;&#10;import org.springframework.data.mongodb.repository.MongoRepository;&#13;&#10;import org.springframework.data.mongodb.repository.Query;&#13;&#10;import org.springframework.stereotype.Repository;&#13;&#10;import vn.ctu.edu.postservice.dto.AuthorInfo;&#13;&#10;import vn.ctu.edu.postservice.entity.InteractionEntity;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;import java.util.Optional;&#13;&#10;&#13;&#10;@Repository&#13;&#10;public interface InteractionRepository extends MongoRepository&lt;InteractionEntity, String&gt; {&#13;&#10;&#13;&#10;    // Find by postId and author.id and type&#13;&#10;    @Query(&quot;{ 'postId': ?0, 'author.id': ?1, 'type': ?2 }&quot;)&#13;&#10;    Optional&lt;InteractionEntity&gt; findByPostIdAndAuthor_IdAndType(String postId, String authorId, InteractionEntity.InteractionType type);&#13;&#10;&#13;&#10;    // Find by postId and author object and type&#13;&#10;    Optional&lt;InteractionEntity&gt; findByPostIdAndAuthorAndType(String postId, AuthorInfo author, InteractionEntity.InteractionType type);&#13;&#10;&#13;&#10;    List&lt;InteractionEntity&gt; findByPostId(String postId);&#13;&#10;&#13;&#10;    @Query(&quot;{ 'author.id': ?0 }&quot;)&#13;&#10;    List&lt;InteractionEntity&gt; findByAuthor_Id(String authorId);&#13;&#10;&#13;&#10;    Page&lt;InteractionEntity&gt; findByPostIdAndType(String postId, InteractionEntity.InteractionType type, Pageable pageable);&#13;&#10;&#13;&#10;    long countByPostIdAndType(String postId, InteractionEntity.InteractionType type);&#13;&#10;&#13;&#10;    @Query(value = &quot;{ 'author.id': ?0, 'type': ?1 }&quot;, count = true)&#13;&#10;    long countByAuthor_IdAndType(String authorId, InteractionEntity.InteractionType type);&#13;&#10;&#13;&#10;    void deleteByPostId(String postId);&#13;&#10;&#13;&#10;    // Additional useful queries&#13;&#10;    @Query(&quot;{ 'postId': ?0, 'type': 'LIKE' }&quot;)&#13;&#10;    List&lt;InteractionEntity&gt; findLikesByPostId(String postId);&#13;&#10;&#13;&#10;    @Query(&quot;{ 'author.id': ?0, 'type': 'LIKE' }&quot;)&#13;&#10;    List&lt;InteractionEntity&gt; findLikesByAuthor_Id(String authorId);&#13;&#10;&#13;&#10;    @Query(&quot;{ 'postId': ?0, 'author.id': ?1 }&quot;)&#13;&#10;    List&lt;InteractionEntity&gt; findByPostIdAndAuthor_Id(String postId, String authorId);&#13;&#10;}" />
+            </PendingDiffInfo>
+          </value>
+        </entry>
+        <entry key="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/repository/PostRepository.java">
+          <value>
+            <PendingDiffInfo>
+              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/repository/PostRepository.java" />
+              <option name="originalContent" value="package vn.ctu.edu.postservice.repository;&#10;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.mongodb.repository.MongoRepository;&#10;import org.springframework.data.mongodb.repository.Query;&#10;import org.springframework.stereotype.Repository;&#10;import vn.ctu.edu.postservice.entity.PostEntity;&#10;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface PostRepository extends MongoRepository&lt;PostEntity, String&gt; {&#10;&#10;    Page&lt;PostEntity&gt; findByAuthorId(String authorId, Pageable pageable);&#10;&#10;    Page&lt;PostEntity&gt; findByCategory(String category, Pageable pageable);&#10;&#10;    Page&lt;PostEntity&gt; findByTagsIn(List&lt;String&gt; tags, Pageable pageable);&#10;&#10;    @Query(&quot;{ 'title': { $regex: ?0, $options: 'i' } }&quot;)&#10;    Page&lt;PostEntity&gt; findByTitleContainingIgnoreCase(String title, Pageable pageable);&#10;&#10;    @Query(&quot;{ '$or': [ { 'title': { $regex: ?0, $options: 'i' } }, { 'content': { $regex: ?0, $options: 'i' } } ] }&quot;)&#10;    Page&lt;PostEntity&gt; findByTitleOrContentContaining(String searchTerm, Pageable pageable);&#10;&#10;    List&lt;PostEntity&gt; findTop10ByOrderByStatsViewsDesc();&#10;&#10;    List&lt;PostEntity&gt; findTop10ByOrderByStatsLikesDesc();&#10;&#10;    long countByAuthorId(String authorId);&#10;}&#10;" />
+              <option name="updatedContent" value="package vn.ctu.edu.postservice.repository;&#13;&#10;&#13;&#10;import org.springframework.data.domain.Page;&#13;&#10;import org.springframework.data.domain.Pageable;&#13;&#10;import org.springframework.data.mongodb.repository.MongoRepository;&#13;&#10;import org.springframework.data.mongodb.repository.Query;&#13;&#10;import org.springframework.stereotype.Repository;&#13;&#10;import vn.ctu.edu.postservice.entity.PostEntity;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;@Repository&#13;&#10;public interface PostRepository extends MongoRepository&lt;PostEntity, String&gt; {&#13;&#10;&#13;&#10;    // Find by author ID (using nested author object)&#13;&#10;    @Query(&quot;{ 'author.id': ?0 }&quot;)&#13;&#10;    Page&lt;PostEntity&gt; findByAuthor_Id(String authorId, Pageable pageable);&#13;&#10;&#13;&#10;    Page&lt;PostEntity&gt; findByCategory(String category, Pageable pageable);&#13;&#10;&#13;&#10;    Page&lt;PostEntity&gt; findByTagsIn(List&lt;String&gt; tags, Pageable pageable);&#13;&#10;&#13;&#10;    @Query(&quot;{ 'title': { $regex: ?0, $options: 'i' } }&quot;)&#13;&#10;    Page&lt;PostEntity&gt; findByTitleContainingIgnoreCase(String title, Pageable pageable);&#13;&#10;&#13;&#10;    @Query(&quot;{ '$or': [ { 'title': { $regex: ?0, $options: 'i' } }, { 'content': { $regex: ?1, $options: 'i' } } ] }&quot;)&#13;&#10;    Page&lt;PostEntity&gt; findByTitleContainingOrContentContaining(String titleTerm, String contentTerm, Pageable pageable);&#13;&#10;&#13;&#10;    // Find by visibility&#13;&#10;    Page&lt;PostEntity&gt; findByVisibility(String visibility, Pageable pageable);&#13;&#10;&#13;&#10;    // Find by author and visibility&#13;&#10;    @Query(&quot;{ 'author.id': ?0, 'visibility': ?1 }&quot;)&#13;&#10;    Page&lt;PostEntity&gt; findByAuthor_IdAndVisibility(String authorId, String visibility, Pageable pageable);&#13;&#10;&#13;&#10;    List&lt;PostEntity&gt; findTop10ByOrderByStatsViewsDesc();&#13;&#10;&#13;&#10;    List&lt;PostEntity&gt; findTop10ByOrderByStatsLikesDesc();&#13;&#10;&#13;&#10;    @Query(&quot;{ 'author.id': ?0 }&quot;)&#13;&#10;    long countByAuthor_Id(String authorId);&#13;&#10;}" />
+            </PendingDiffInfo>
+          </value>
+        </entry>
+        <entry key="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/service/PostService.java">
+          <value>
+            <PendingDiffInfo>
+              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/vn/ctu/edu/postservice/service/PostService.java" />
+              <option name="originalContent" value="package vn.ctu.edu.postservice.service;&#10;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.web.multipart.MultipartFile;&#10;import vn.ctu.edu.postservice.client.MediaServiceClient;&#10;import vn.ctu.edu.postservice.client.UserServiceClient;&#10;import vn.ctu.edu.postservice.dto.AuthorInfo;&#10;import vn.ctu.edu.postservice.dto.request.PostRequest;&#10;import vn.ctu.edu.postservice.dto.response.PostResponse;&#10;import vn.ctu.edu.postservice.entity.InteractionEntity;&#10;import vn.ctu.edu.postservice.entity.PostEntity;&#10;import vn.ctu.edu.postservice.repository.CommentRepository;&#10;import vn.ctu.edu.postservice.repository.InteractionRepository;&#10;import vn.ctu.edu.postservice.repository.PostRepository;&#10;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;@Service&#10;public class PostService {&#10;&#10;    @Autowired&#10;    private PostRepository postRepository;&#10;&#10;    @Autowired&#10;    private CommentRepository commentRepository;&#10;&#10;    @Autowired&#10;    private InteractionRepository interactionRepository;&#10;&#10;    @Autowired&#10;    private MediaServiceClient mediaServiceClient;&#10;&#10;    @Autowired&#10;    private UserServiceClient userServiceClient;&#10;&#10;    @Autowired&#10;    private EventService eventService;&#10;&#10;    public PostResponse createPost(PostRequest request, List&lt;MultipartFile&gt; files, String authorId) {&#10;        AuthorInfo author = userServiceClient.getAuthorInfo(authorId);&#10;        PostEntity post = new PostEntity();&#10;        post.setContent(request.getContent());&#10;        post.setAuthor(author);&#10;        post.setImages(new ArrayList&lt;&gt;());&#10;        post.setTags(request.getTags());&#10;        post.setCategory(request.getCategory());&#10;&#10;        // Upload files to media-service&#10;        if (files != null &amp;&amp; !files.isEmpty()) {&#10;            List&lt;String&gt; imageUrls = new ArrayList&lt;&gt;();&#10;            for (MultipartFile file : files) {&#10;                if (!file.isEmpty()) {&#10;                    try {&#10;                        MediaServiceClient.MediaUploadResponse uploadResponse =&#10;                            mediaServiceClient.uploadFile(file, getFileType(file));&#10;                        imageUrls.add(uploadResponse.getFileUrl());&#10;                    } catch (Exception e) {&#10;                        // Log error but continue processing&#10;                        System.err.println(&quot;Failed to upload file: &quot; + e.getMessage());&#10;                    }&#10;                }&#10;            }&#10;            post.setImages(imageUrls);&#10;        }&#10;&#10;        PostEntity savedPost = postRepository.save(post);&#10;&#10;        // Publish event&#10;        eventService.publishPostEvent(&quot;POST_CREATED&quot;, savedPost.getId(), savedPost.getAuthor().getId(), savedPost);&#10;&#10;        return new PostResponse(savedPost);&#10;    }&#10;&#10;    public Page&lt;PostResponse&gt; getAllPosts(Pageable pageable) {&#10;        return postRepository.findAll(pageable)&#10;                .map(PostResponse::new);&#10;    }&#10;&#10;    public Page&lt;PostResponse&gt; getPostsByAuthor(String authorId, Pageable pageable) {&#10;        return postRepository.findByAuthorId(authorId, pageable)&#10;                .map(PostResponse::new);&#10;    }&#10;&#10;    public Page&lt;PostResponse&gt; getPostsByCategory(String category, Pageable pageable) {&#10;        return postRepository.findByCategory(category, pageable)&#10;                .map(PostResponse::new);&#10;    }&#10;&#10;    public Page&lt;PostResponse&gt; searchPosts(String searchTerm, Pageable pageable) {&#10;        return postRepository.findByTitleOrContentContaining(searchTerm, pageable)&#10;                .map(PostResponse::new);&#10;    }&#10;&#10;    public PostResponse getPostById(String id, String authorId) {&#10;        AuthorInfo author = userServiceClient.getAuthorInfo(authorId);&#10;        Optional&lt;PostEntity&gt; postOpt = postRepository.findById(id);&#10;        if (postOpt.isPresent()) {&#10;            PostEntity post = postOpt.get();&#10;            String userId = author != null ? author.getId() : null;&#10;            // Record view interaction if userId is provided&#10;            if (userId != null &amp;&amp; !userId.equals(post.getAuthor().getId())) {&#10;                recordViewInteraction(post.getId(), author);&#10;            }&#10;&#10;            return new PostResponse(post);&#10;        }&#10;        throw new RuntimeException(&quot;Post not found with id: &quot; + id);&#10;    }&#10;&#10;    public PostResponse updatePost(String id, PostRequest request, String authorId) {&#10;&#10;        Optional&lt;PostEntity&gt; postOpt = postRepository.findById(id);&#10;        if (postOpt.isPresent()) {&#10;            PostEntity post = postOpt.get();&#10;&#10;            // Check if user is the author&#10;            if (!post.getAuthor().getId().equals(authorId)) {&#10;                throw new RuntimeException(&quot;Only the author can update this post&quot;);&#10;            }&#10;&#10;            if (request.getContent() != null) {&#10;                post.setContent(request.getContent());&#10;            }&#10;            if (request.getTags() != null) {&#10;                post.setTags(request.getTags());&#10;            }&#10;            if (request.getCategory() != null) {&#10;                post.setCategory(request.getCategory());&#10;            }&#10;&#10;            PostEntity savedPost = postRepository.save(post);&#10;&#10;            // Publish event&#10;            eventService.publishPostEvent(&quot;POST_UPDATED&quot;, savedPost.getId(), savedPost.getAuthor().getId(), savedPost);&#10;&#10;            return new PostResponse(savedPost);&#10;        }&#10;        throw new RuntimeException(&quot;Post not found with id: &quot; + id);&#10;    }&#10;&#10;    public void deletePost(String id, String authorId) {&#10;        Optional&lt;PostEntity&gt; postOpt = postRepository.findById(id);&#10;        if (postOpt.isPresent()) {&#10;            PostEntity post = postOpt.get();&#10;&#10;            // Check if user is the author&#10;            if (!post.getAuthor().getId().equals(authorId)) {&#10;                throw new RuntimeException(&quot;Only the author can delete this post&quot;);&#10;            }&#10;&#10;            // Delete associated comments and interactions&#10;            commentRepository.deleteByPostId(id);&#10;            interactionRepository.deleteByPostId(id);&#10;&#10;            // Delete the post&#10;            postRepository.deleteById(id);&#10;&#10;            // Publish event&#10;            eventService.publishPostEvent(&quot;POST_DELETED&quot;, id, authorId, post);&#10;        } else {&#10;            throw new RuntimeException(&quot;Post not found with id: &quot; + id);&#10;        }&#10;    }&#10;&#10;    private void recordViewInteraction(String postId, AuthorInfo author) {&#10;        // Check if user already viewed this post recently&#10;        Optional&lt;InteractionEntity&gt; existingView = interactionRepository&#10;                .findByPostIdAndAuthorAndType(postId, author, InteractionEntity.InteractionType.VIEW);&#10;&#10;        if (existingView.isEmpty()) {&#10;            // Create view interaction&#10;            InteractionEntity viewInteraction = new InteractionEntity(postId, author, InteractionEntity.InteractionType.VIEW);&#10;            interactionRepository.save(viewInteraction);&#10;&#10;            // Update post stats&#10;            Optional&lt;PostEntity&gt; postOpt = postRepository.findById(postId);&#10;            if (postOpt.isPresent()) {&#10;                PostEntity post = postOpt.get();&#10;                post.getStats().incrementViews();&#10;                postRepository.save(post);&#10;            }&#10;&#10;            // Publish interaction event&#10;            eventService.publishInteractionEvent(postId, author.getId(), &quot;VIEW&quot;);&#10;        }&#10;    }&#10;&#10;    private String getFileType(MultipartFile file) {&#10;        String contentType = file.getContentType();&#10;        if (contentType != null) {&#10;            if (contentType.startsWith(&quot;image/&quot;)) return &quot;IMAGE&quot;;&#10;            if (contentType.startsWith(&quot;video/&quot;)) return &quot;VIDEO&quot;;&#10;            if (contentType.startsWith(&quot;audio/&quot;)) return &quot;AUDIO&quot;;&#10;            if (contentType.equals(&quot;application/pdf&quot;)) return &quot;PDF&quot;;&#10;        }&#10;        return &quot;DOCUMENT&quot;;&#10;    }&#10;&#10;    public List&lt;PostResponse&gt; getTopViewedPosts() {&#10;        return postRepository.findTop10ByOrderByStatsViewsDesc()&#10;                .stream()&#10;                .map(PostResponse::new)&#10;                .toList();&#10;    }&#10;&#10;    public List&lt;PostResponse&gt; getTopLikedPosts() {&#10;        return postRepository.findTop10ByOrderByStatsLikesDesc()&#10;                .stream()&#10;                .map(PostResponse::new)&#10;                .toList();&#10;    }&#10;}&#10;" />
+              <option name="updatedContent" value="package vn.ctu.edu.postservice.service;&#13;&#10;&#13;&#10;import org.springframework.beans.factory.annotation.Autowired;&#13;&#10;import org.springframework.data.domain.Page;&#13;&#10;import org.springframework.data.domain.Pageable;&#13;&#10;import org.springframework.stereotype.Service;&#13;&#10;import org.springframework.web.multipart.MultipartFile;&#13;&#10;import vn.ctu.edu.postservice.client.MediaServiceClient;&#13;&#10;import vn.ctu.edu.postservice.client.UserServiceClient;&#13;&#10;import vn.ctu.edu.postservice.dto.AuthorInfo;&#13;&#10;import vn.ctu.edu.postservice.dto.request.PostRequest;&#13;&#10;import vn.ctu.edu.postservice.dto.response.PostResponse;&#13;&#10;import vn.ctu.edu.postservice.entity.InteractionEntity;&#13;&#10;import vn.ctu.edu.postservice.entity.PostEntity;&#13;&#10;import vn.ctu.edu.postservice.repository.CommentRepository;&#13;&#10;import vn.ctu.edu.postservice.repository.InteractionRepository;&#13;&#10;import vn.ctu.edu.postservice.repository.PostRepository;&#13;&#10;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.List;&#13;&#10;import java.util.Optional;&#13;&#10;&#13;&#10;@Service&#13;&#10;public class PostService {&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private PostRepository postRepository;&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private CommentRepository commentRepository;&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private InteractionRepository interactionRepository;&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private MediaServiceClient mediaServiceClient;&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private UserServiceClient userServiceClient;&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private EventService eventService;&#13;&#10;&#13;&#10;    public PostResponse createPost(PostRequest request, List&lt;MultipartFile&gt; files, String authorId) {&#13;&#10;        AuthorInfo author = userServiceClient.getAuthorInfo(authorId);&#13;&#10;        if (author == null) {&#13;&#10;            throw new RuntimeException(&quot;Author not found with id: &quot; + authorId);&#13;&#10;        }&#13;&#10;        &#13;&#10;        PostEntity post = PostEntity.builder()&#13;&#10;                .title(request.getTitle())&#13;&#10;                .content(request.getContent())&#13;&#10;                .author(author)&#13;&#10;                .images(new ArrayList&lt;&gt;())&#13;&#10;                .tags(request.getTags() != null ? request.getTags() : new ArrayList&lt;&gt;())&#13;&#10;                .category(request.getCategory())&#13;&#10;                .visibility(request.getVisibility() != null ? request.getVisibility() : &quot;PUBLIC&quot;)&#13;&#10;                .stats(new PostEntity.PostStats())&#13;&#10;                .build();&#13;&#10;&#13;&#10;        // Upload files to media-service&#13;&#10;        if (files != null &amp;&amp; !files.isEmpty()) {&#13;&#10;            List&lt;String&gt; imageUrls = new ArrayList&lt;&gt;();&#13;&#10;            for (MultipartFile file : files) {&#13;&#10;                if (!file.isEmpty()) {&#13;&#10;                    try {&#13;&#10;                        MediaServiceClient.MediaUploadResponse uploadResponse =&#13;&#10;                            mediaServiceClient.uploadFile(file, getFileType(file));&#13;&#10;                        imageUrls.add(uploadResponse.getFileUrl());&#13;&#10;                    } catch (Exception e) {&#13;&#10;                        // Log error but continue processing&#13;&#10;                        System.err.println(&quot;Failed to upload file: &quot; + e.getMessage());&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;            post.setImages(imageUrls);&#13;&#10;        }&#13;&#10;&#13;&#10;        PostEntity savedPost = postRepository.save(post);&#13;&#10;&#13;&#10;        // Publish event&#13;&#10;        eventService.publishPostEvent(&quot;POST_CREATED&quot;, savedPost.getId(), savedPost.getAuthorId(), savedPost);&#13;&#10;&#13;&#10;        return new PostResponse(savedPost);&#13;&#10;    }&#13;&#10;&#13;&#10;    public Page&lt;PostResponse&gt; getAllPosts(Pageable pageable) {&#13;&#10;        return postRepository.findAll(pageable)&#13;&#10;                .map(PostResponse::new);&#13;&#10;    }&#13;&#10;&#13;&#10;    public Page&lt;PostResponse&gt; getPostsByAuthor(String authorId, Pageable pageable) {&#13;&#10;        return postRepository.findByAuthor_Id(authorId, pageable)&#13;&#10;                .map(PostResponse::new);&#13;&#10;    }&#13;&#10;&#13;&#10;    public Page&lt;PostResponse&gt; getPostsByCategory(String category, Pageable pageable) {&#13;&#10;        return postRepository.findByCategory(category, pageable)&#13;&#10;                .map(PostResponse::new);&#13;&#10;    }&#13;&#10;&#13;&#10;    public Page&lt;PostResponse&gt; searchPosts(String searchTerm, Pageable pageable) {&#13;&#10;        return postRepository.findByTitleContainingOrContentContaining(searchTerm, searchTerm, pageable)&#13;&#10;                .map(PostResponse::new);&#13;&#10;    }&#13;&#10;&#13;&#10;    public PostResponse getPostById(String id, String currentUserId) {&#13;&#10;        Optional&lt;PostEntity&gt; postOpt = postRepository.findById(id);&#13;&#10;        if (postOpt.isPresent()) {&#13;&#10;            PostEntity post = postOpt.get();&#13;&#10;            &#13;&#10;            // Record view interaction if user is different from author&#13;&#10;            if (currentUserId != null &amp;&amp; !currentUserId.equals(post.getAuthorId())) {&#13;&#10;                recordViewInteraction(post.getId(), currentUserId);&#13;&#10;            }&#13;&#10;&#13;&#10;            return new PostResponse(post);&#13;&#10;        }&#13;&#10;        throw new RuntimeException(&quot;Post not found with id: &quot; + id);&#13;&#10;    }&#13;&#10;&#13;&#10;    public PostResponse updatePost(String id, PostRequest request, String authorId) {&#13;&#10;        Optional&lt;PostEntity&gt; postOpt = postRepository.findById(id);&#13;&#10;        if (postOpt.isPresent()) {&#13;&#10;            PostEntity post = postOpt.get();&#13;&#10;&#13;&#10;            // Check if user is the author&#13;&#10;            if (!post.getAuthorId().equals(authorId)) {&#13;&#10;                throw new RuntimeException(&quot;Only the author can update this post&quot;);&#13;&#10;            }&#13;&#10;&#13;&#10;            if (request.getTitle() != null) {&#13;&#10;                post.setTitle(request.getTitle());&#13;&#10;            }&#13;&#10;            if (request.getContent() != null) {&#13;&#10;                post.setContent(request.getContent());&#13;&#10;            }&#13;&#10;            if (request.getTags() != null) {&#13;&#10;                post.setTags(request.getTags());&#13;&#10;            }&#13;&#10;            if (request.getCategory() != null) {&#13;&#10;                post.setCategory(request.getCategory());&#13;&#10;            }&#13;&#10;            if (request.getVisibility() != null) {&#13;&#10;                post.setVisibility(request.getVisibility());&#13;&#10;            }&#13;&#10;&#13;&#10;            PostEntity savedPost = postRepository.save(post);&#13;&#10;&#13;&#10;            // Publish event&#13;&#10;            eventService.publishPostEvent(&quot;POST_UPDATED&quot;, savedPost.getId(), savedPost.getAuthorId(), savedPost);&#13;&#10;&#13;&#10;            return new PostResponse(savedPost);&#13;&#10;        }&#13;&#10;        throw new RuntimeException(&quot;Post not found with id: &quot; + id);&#13;&#10;    }&#13;&#10;&#13;&#10;    public void deletePost(String id, String authorId) {&#13;&#10;        Optional&lt;PostEntity&gt; postOpt = postRepository.findById(id);&#13;&#10;        if (postOpt.isPresent()) {&#13;&#10;            PostEntity post = postOpt.get();&#13;&#10;&#13;&#10;            // Check if user is the author&#13;&#10;            if (!post.getAuthorId().equals(authorId)) {&#13;&#10;                throw new RuntimeException(&quot;Only the author can delete this post&quot;);&#13;&#10;            }&#13;&#10;&#13;&#10;            // Delete associated comments and interactions&#13;&#10;            commentRepository.deleteByPostId(id);&#13;&#10;            interactionRepository.deleteByPostId(id);&#13;&#10;&#13;&#10;            // Delete the post&#13;&#10;            postRepository.deleteById(id);&#13;&#10;&#13;&#10;            // Publish event&#13;&#10;            eventService.publishPostEvent(&quot;POST_DELETED&quot;, id, authorId, post);&#13;&#10;        } else {&#13;&#10;            throw new RuntimeException(&quot;Post not found with id: &quot; + id);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void recordViewInteraction(String postId, String userId) {&#13;&#10;        try {&#13;&#10;            AuthorInfo author = userServiceClient.getAuthorInfo(userId);&#13;&#10;            if (author == null) return;&#13;&#10;            &#13;&#10;            // Check if user already viewed this post recently (within last hour)&#13;&#10;            Optional&lt;InteractionEntity&gt; existingView = interactionRepository&#13;&#10;                    .findByPostIdAndAuthor_IdAndType(postId, userId, InteractionEntity.InteractionType.VIEW);&#13;&#10;&#13;&#10;            if (existingView.isEmpty()) {&#13;&#10;                // Create view interaction&#13;&#10;                InteractionEntity viewInteraction = new InteractionEntity(postId, author, InteractionEntity.InteractionType.VIEW);&#13;&#10;                interactionRepository.save(viewInteraction);&#13;&#10;&#13;&#10;                // Update post stats&#13;&#10;                Optional&lt;PostEntity&gt; postOpt = postRepository.findById(postId);&#13;&#10;                if (postOpt.isPresent()) {&#13;&#10;                    PostEntity post = postOpt.get();&#13;&#10;                    post.getStats().incrementViews();&#13;&#10;                    postRepository.save(post);&#13;&#10;                }&#13;&#10;&#13;&#10;                // Publish interaction event&#13;&#10;                eventService.publishInteractionEvent(postId, userId, &quot;VIEW&quot;);&#13;&#10;            }&#13;&#10;        } catch (Exception e) {&#13;&#10;            // Log error but don't fail the main operation&#13;&#10;            System.err.println(&quot;Failed to record view interaction: &quot; + e.getMessage());&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private String getFileType(MultipartFile file) {&#13;&#10;        String contentType = file.getContentType();&#13;&#10;        if (contentType != null) {&#13;&#10;            if (contentType.startsWith(&quot;image/&quot;)) return &quot;IMAGE&quot;;&#13;&#10;            if (contentType.startsWith(&quot;video/&quot;)) return &quot;VIDEO&quot;;&#13;&#10;            if (contentType.startsWith(&quot;audio/&quot;)) return &quot;AUDIO&quot;;&#13;&#10;            if (contentType.equals(&quot;application/pdf&quot;)) return &quot;PDF&quot;;&#13;&#10;        }&#13;&#10;        return &quot;DOCUMENT&quot;;&#13;&#10;    }&#13;&#10;&#13;&#10;    public List&lt;PostResponse&gt; getTopViewedPosts() {&#13;&#10;        return postRepository.findTop10ByOrderByStatsViewsDesc()&#13;&#10;                .stream()&#13;&#10;                .map(PostResponse::new)&#13;&#10;                .toList();&#13;&#10;    }&#13;&#10;&#13;&#10;    public List&lt;PostResponse&gt; getTopLikedPosts() {&#13;&#10;        return postRepository.findTop10ByOrderByStatsLikesDesc()&#13;&#10;                .stream()&#13;&#10;                .map(PostResponse::new)&#13;&#10;                .toList();&#13;&#10;    }&#13;&#10;}" />
+            </PendingDiffInfo>
+          </value>
+        </entry>
         <entry key="$PROJECT_DIR$/user-service/src/main/java/com/ctuconnect/repository/UserRepository.java">
           <value>
             <PendingDiffInfo>
Index: post-service/src/main/java/vn/ctu/edu/postservice/dto/response/PostResponse.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package vn.ctu.edu.postservice.dto.response;\r\n\r\nimport vn.ctu.edu.postservice.dto.AuthorInfo;\r\nimport vn.ctu.edu.postservice.entity.PostEntity;\r\nimport vn.ctu.edu.postservice.entity.InteractionEntity;\r\n\r\nimport java.time.LocalDateTime;\r\nimport java.util.List;\r\nimport java.util.Map;\r\n\r\npublic class PostResponse {\r\n    private String id;\r\n    private String title;\r\n    private String content;\r\n    private String authorId;\r\n    private String authorName;\r\n    private String authorAvatar;\r\n    private List<String> images;\r\n    private List<String> tags;\r\n    private String category;\r\n    private String visibility;\r\n    private PostStatsResponse stats;\r\n    private LocalDateTime createdAt;\r\n    private LocalDateTime updatedAt;\r\n\r\n    // Constructors\r\n    public PostResponse() {}\r\n\r\n    public PostResponse(PostEntity post) {\r\n        this.id = post.getId();\r\n        this.title = post.getTitle();\r\n        this.content = post.getContent();\r\n\r\n        // Handle AuthorInfo properly\r\n        if (post.getAuthor() != null) {\r\n            this.authorId = post.getAuthor().getId();\r\n            this.authorName = post.getAuthor().getName();\r\n            this.authorAvatar = post.getAuthor().getAvatar();\r\n        }\r\n\r\n        this.images = post.getImages();\r\n        this.tags = post.getTags();\r\n        this.category = post.getCategory();\r\n        this.visibility = post.getVisibility();\r\n        this.stats = new PostStatsResponse(post.getStats());\r\n        this.createdAt = post.getCreatedAt();\r\n        this.updatedAt = post.getUpdatedAt();\r\n    }\r\n\r\n    // Getters and Setters\r\n    public String getId() { return id; }\r\n    public void setId(String id) { this.id = id; }\r\n\r\n    public String getTitle() { return title; }\r\n    public void setTitle(String title) { this.title = title; }\r\n\r\n    public String getContent() { return content; }\r\n    public void setContent(String content) { this.content = content; }\r\n\r\n    public String getAuthorId() { return authorId; }\r\n    public void setAuthorId(String authorId) { this.authorId = authorId; }\r\n\r\n    public String getAuthorName() { return authorName; }\r\n    public void setAuthorName(String authorName) { this.authorName = authorName; }\r\n\r\n    public String getAuthorAvatar() { return authorAvatar; }\r\n    public void setAuthorAvatar(String authorAvatar) { this.authorAvatar = authorAvatar; }\r\n\r\n    public List<String> getImages() { return images; }\r\n    public void setImages(List<String> images) { this.images = images; }\r\n\r\n    public List<String> getTags() { return tags; }\r\n    public void setTags(List<String> tags) { this.tags = tags; }\r\n\r\n    public String getCategory() { return category; }\r\n    public void setCategory(String category) { this.category = category; }\r\n\r\n    public String getVisibility() { return visibility; }\r\n    public void setVisibility(String visibility) { this.visibility = visibility; }\r\n\r\n    public PostStatsResponse getStats() { return stats; }\r\n    public void setStats(PostStatsResponse stats) { this.stats = stats; }\r\n\r\n    public LocalDateTime getCreatedAt() { return createdAt; }\r\n    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }\r\n\r\n    public LocalDateTime getUpdatedAt() { return updatedAt; }\r\n    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }\r\n\r\n    public static class PostStatsResponse {\r\n        private long views;\r\n        private long likes;\r\n        private long shares;\r\n        private long comments;\r\n        private long bookmarks;\r\n        private Map<InteractionEntity.InteractionType.ReactionType, Integer> reactions;\r\n\r\n        public PostStatsResponse() {}\r\n\r\n        public PostStatsResponse(PostEntity.PostStats stats) {\r\n            this.views = stats.getViews();\r\n            this.shares = stats.getShares();\r\n            this.comments = stats.getComments();\r\n            this.reactions = stats.getReactions();\r\n\r\n            // Calculate total likes from reactions\r\n            this.likes = reactions.values().stream().mapToInt(Integer::intValue).sum();\r\n\r\n            // Set bookmarks if available\r\n            this.bookmarks = reactions.getOrDefault(\r\n                InteractionEntity.InteractionType.ReactionType.BOOKMARK, 0\r\n            );\r\n        }\r\n\r\n        // Getters and Setters\r\n        public long getViews() { return views; }\r\n        public void setViews(long views) { this.views = views; }\r\n\r\n        public long getLikes() { return likes; }\r\n        public void setLikes(long likes) { this.likes = likes; }\r\n\r\n        public long getShares() { return shares; }\r\n        public void setShares(long shares) { this.shares = shares; }\r\n\r\n        public long getComments() { return comments; }\r\n        public void setComments(long comments) { this.comments = comments; }\r\n\r\n        public long getBookmarks() { return bookmarks; }\r\n        public void setBookmarks(long bookmarks) { this.bookmarks = bookmarks; }\r\n\r\n        public Map<InteractionEntity.InteractionType.ReactionType, Integer> getReactions() {\r\n            return reactions;\r\n        }\r\n        public void setReactions(Map<InteractionEntity.InteractionType.ReactionType, Integer> reactions) {\r\n            this.reactions = reactions;\r\n        }\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/post-service/src/main/java/vn/ctu/edu/postservice/dto/response/PostResponse.java b/post-service/src/main/java/vn/ctu/edu/postservice/dto/response/PostResponse.java
--- a/post-service/src/main/java/vn/ctu/edu/postservice/dto/response/PostResponse.java	(revision f08f1d49d319bbab2efbea29650ac17cd6ac4cf8)
+++ b/post-service/src/main/java/vn/ctu/edu/postservice/dto/response/PostResponse.java	(date 1754053522334)
@@ -1,5 +1,6 @@
 package vn.ctu.edu.postservice.dto.response;
 
+import lombok.Data;
 import vn.ctu.edu.postservice.dto.AuthorInfo;
 import vn.ctu.edu.postservice.entity.PostEntity;
 import vn.ctu.edu.postservice.entity.InteractionEntity;
@@ -8,9 +9,10 @@
 import java.util.List;
 import java.util.Map;
 
+@Data
 public class PostResponse {
+    // Getters and Setters
     private String id;
-    private String title;
     private String content;
     private String authorId;
     private String authorName;
@@ -47,47 +49,9 @@
         this.updatedAt = post.getUpdatedAt();
     }
 
-    // Getters and Setters
-    public String getId() { return id; }
-    public void setId(String id) { this.id = id; }
-
-    public String getTitle() { return title; }
-    public void setTitle(String title) { this.title = title; }
-
-    public String getContent() { return content; }
-    public void setContent(String content) { this.content = content; }
-
-    public String getAuthorId() { return authorId; }
-    public void setAuthorId(String authorId) { this.authorId = authorId; }
-
-    public String getAuthorName() { return authorName; }
-    public void setAuthorName(String authorName) { this.authorName = authorName; }
-
-    public String getAuthorAvatar() { return authorAvatar; }
-    public void setAuthorAvatar(String authorAvatar) { this.authorAvatar = authorAvatar; }
-
-    public List<String> getImages() { return images; }
-    public void setImages(List<String> images) { this.images = images; }
-
-    public List<String> getTags() { return tags; }
-    public void setTags(List<String> tags) { this.tags = tags; }
-
-    public String getCategory() { return category; }
-    public void setCategory(String category) { this.category = category; }
-
-    public String getVisibility() { return visibility; }
-    public void setVisibility(String visibility) { this.visibility = visibility; }
-
-    public PostStatsResponse getStats() { return stats; }
-    public void setStats(PostStatsResponse stats) { this.stats = stats; }
-
-    public LocalDateTime getCreatedAt() { return createdAt; }
-    public void setCreatedAt(LocalDateTime createdAt) { this.createdAt = createdAt; }
-
-    public LocalDateTime getUpdatedAt() { return updatedAt; }
-    public void setUpdatedAt(LocalDateTime updatedAt) { this.updatedAt = updatedAt; }
-
+    @Data
     public static class PostStatsResponse {
+        // Getters and Setters
         private long views;
         private long likes;
         private long shares;
@@ -112,25 +76,16 @@
             );
         }
 
-        // Getters and Setters
-        public long getViews() { return views; }
         public void setViews(long views) { this.views = views; }
 
-        public long getLikes() { return likes; }
         public void setLikes(long likes) { this.likes = likes; }
 
-        public long getShares() { return shares; }
         public void setShares(long shares) { this.shares = shares; }
 
-        public long getComments() { return comments; }
         public void setComments(long comments) { this.comments = comments; }
 
-        public long getBookmarks() { return bookmarks; }
         public void setBookmarks(long bookmarks) { this.bookmarks = bookmarks; }
 
-        public Map<InteractionEntity.InteractionType.ReactionType, Integer> getReactions() {
-            return reactions;
-        }
         public void setReactions(Map<InteractionEntity.InteractionType.ReactionType, Integer> reactions) {
             this.reactions = reactions;
         }
