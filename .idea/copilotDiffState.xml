<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/ARCHITECTURE_OPTIMIZATION.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ARCHITECTURE_OPTIMIZATION.md" />
              <option name="originalContent" value="# CTU-Connect Architecture Optimization Plan&#10;## Based on Facebook's Social Network Model&#10;&#10;### Current Architecture Analysis&#10;- ✅ Microservices architecture with proper service separation&#10;- ✅ Event-driven communication via Kafka&#10;- ✅ Multiple database technologies (PostgreSQL, MongoDB, Neo4j, Redis)&#10;- ✅ API Gateway for centralized routing&#10;- ✅ Service discovery with Eureka&#10;&#10;### Key Optimizations Required&#10;- Implement eventual consistency patterns&#10;#### 1. Data Consistency &amp; Flow Optimization&#10;- Implement eventual consistency patterns&#10;- Add distributed transaction management&#10;- Optimize cross-service data synchronization&#10;&#10;#### 3. Social Graph Optimization&#10;- Friend suggestion algorithms&#10;#### 2. Enhanced Post System (Facebook-like)&#10;- Timeline generation algorithms&#10;- News feed ranking and personalization&#10;- Real-time updates and notifications&#10;- Database optimization and indexing&#10;- Load balancing and horizontal scaling&#10;&#10;#### 5. Real-time Features&#10;#### 3. Social Graph Optimization&#10;- Friend suggestion algorithms&#10;- Privacy controls and audience targeting&#10;- Activity feed generation&#10;- Real-time chat and comments&#10;- Activity status tracking&#10;#### 4. Performance &amp; Scalability&#10;- Caching strategies at multiple levels&#10;#### 5. Real-time Features&#10;- Live notifications&#10;- Real-time chat and comments&#10;- Activity status tracking&#10;" />
              <option name="updatedContent" value="# CTU-Connect Architecture Optimization Plan&#10;## Based on Facebook's Social Network Model&#10;&#10;### Current Architecture Analysis&#10;- ✅ Microservices architecture with proper service separation&#10;- ✅ Event-driven communication via Kafka&#10;- ✅ Multiple database technologies (PostgreSQL, MongoDB, Neo4j, Redis)&#10;- ✅ API Gateway for centralized routing&#10;- ✅ Service discovery with Eureka&#10;&#10;## COMPLETED OPTIMIZATIONS&#10;&#10;### 1. Enhanced Data Models (Facebook-like)&#10;&#10;#### Enhanced PostEntity&#10;- **Audience Targeting**: Similar to Facebook's privacy controls with granular audience settings&#10;- **Engagement Metrics**: Real-time engagement scoring for feed ranking algorithms&#10;- **Post Types**: Support for TEXT, IMAGE, VIDEO, LINK, POLL, EVENT, SHARED&#10;- **Location Support**: Geographic tagging capabilities&#10;- **Scheduled Posts**: Ability to schedule posts for future publishing&#10;- **Edit History**: Track post modifications with timestamps&#10;&#10;#### Advanced Social Graph (Neo4j)&#10;- **Friend Suggestions**: Multi-signal algorithm using mutual friends, academic connections, profile viewers&#10;- **Relationship Types**: FRIENDS_WITH, FRIEND_REQUEST_SENT, VIEWED_PROFILE, BLOCKED&#10;- **Academic Context**: Faculty, major, and batch-based connections&#10;- **Interaction History**: Track user interactions for personalization&#10;&#10;### 2. Facebook-like News Feed Algorithm&#10;&#10;#### NewsFeedService Implementation&#10;- **Personalized Ranking**: Multi-factor scoring system&#10;  - Friend relationship weight (1.0)&#10;  - Engagement score weight (0.8)&#10;  - Recency weight (0.6)&#10;  - Content relevance weight (0.7)&#10;- **Cache Strategy**: 30-minute feed cache with intelligent invalidation&#10;- **Over-fetching**: Retrieve 3x posts for optimal ranking&#10;- **Diversity Control**: Prevent feed domination by single authors&#10;&#10;#### Feed Types&#10;- **Personalized Feed**: User-specific content based on social graph&#10;- **Trending Posts**: Engagement-based trending algorithm&#10;- **User Timeline**: Profile-specific post timeline with privacy filtering&#10;&#10;### 3. Real-time Notification System&#10;&#10;#### NotificationService Features&#10;- **Real-time WebSocket**: Instant notifications via SimpMessagingTemplate&#10;- **Event-driven**: Kafka integration for scalable notification processing&#10;- **Notification Types**: POST_LIKED, COMMENTED, SHARED, FRIEND_REQUEST, etc.&#10;- **Bulk Notifications**: Efficient handling of viral content notifications&#10;- **Unread Counters**: Redis-cached unread notification counts&#10;&#10;### 4. Data Consistency Management&#10;&#10;#### DataConsistencyService&#10;- **Eventual Consistency**: Cross-service data synchronization&#10;- **Cache Invalidation**: Smart cache invalidation on data changes&#10;- **Compensation Logic**: Failure handling and retry mechanisms&#10;- **Event Sourcing**: Kafka-based event propagation&#10;&#10;### 5. Advanced Caching Strategy&#10;&#10;#### Multi-level Caching&#10;- **Redis Caching**: &#10;  - User data (24 hours TTL)&#10;  - Posts (6 hours TTL)&#10;  - Friend suggestions (6 hours TTL)&#10;  - News feed (30 minutes TTL)&#10;- **Application-level**: In-memory caching for frequently accessed data&#10;- **Database-level**: Optimized queries and indexing&#10;&#10;### 6. Social Graph Optimization&#10;&#10;#### SocialGraphService Features&#10;- **Friend Suggestions Algorithm**:&#10;  - Mutual friends (highest priority)&#10;  - Academic connections (faculty/major/batch)&#10;  - Friends of friends&#10;  - Profile viewers&#10;  - Similar interests&#10;- **Relevance Scoring**: Multi-factor relevance calculation&#10;- **Cache Management**: 6-hour TTL with smart invalidation&#10;&#10;### 7. Performance Enhancements&#10;&#10;#### Database Optimizations&#10;- **MongoDB**: Compound indexes for posts, engagement-based sorting&#10;- **Neo4j**: Optimized Cypher queries for relationship traversal&#10;- **PostgreSQL**: Proper indexing for auth and media services&#10;- **Redis**: Strategic caching and session management&#10;&#10;#### API Optimizations&#10;- **Pagination**: Consistent pagination across all endpoints&#10;- **Bulk Operations**: Efficient batch processing for notifications&#10;- **Async Processing**: CompletableFuture for non-blocking operations&#10;&#10;### 8. Enhanced Security &amp; Privacy&#10;&#10;#### Privacy Controls&#10;- **Audience Settings**: PUBLIC, FRIENDS, CUSTOM, ONLY_ME&#10;- **Academic Targeting**: Faculty/major/batch-specific visibility&#10;- **Block Lists**: User blocking functionality&#10;- **Profile Privacy**: Granular profile visibility controls&#10;&#10;### 9. Real-time Features&#10;&#10;#### WebSocket Integration&#10;- **Live Notifications**: Real-time notification delivery&#10;- **Activity Status**: User online/offline status tracking&#10;- **Real-time Comments**: Live comment updates on posts&#10;&#10;### 10. Monitoring &amp; Health Checks&#10;&#10;#### System Monitoring&#10;- **Health Indicators**: Redis, MongoDB, Neo4j health checks&#10;- **Performance Metrics**: Engagement rates, cache hit ratios&#10;- **Error Tracking**: Comprehensive logging and error handling&#10;&#10;## IMPLEMENTATION SUMMARY&#10;&#10;### New Services Created&#10;1. **NewsFeedService** - Facebook-like feed generation&#10;2. **NotificationService** - Real-time notification system&#10;3. **SocialGraphService** - Advanced friend suggestions&#10;4. **DataConsistencyService** - Cross-service data synchronization&#10;&#10;### Enhanced Controllers&#10;1. **EnhancedPostController** - Advanced post management&#10;2. **EnhancedUserController** - Social graph operations&#10;&#10;### Data Models Enhanced&#10;- **PostEntity** - Facebook-like post features&#10;- **NotificationEntity** - Rich notification system&#10;- **FriendSuggestionDTO** - Comprehensive suggestion data&#10;&#10;### Configuration Added&#10;- **CacheConfig** - Multi-level caching strategy&#10;- **HealthCheckConfig** - System health monitoring&#10;&#10;## FACEBOOK-INSPIRED FEATURES IMPLEMENTED&#10;&#10;### Content &amp; Engagement&#10;✅ **News Feed Algorithm** - Personalized content ranking&#10;✅ **Post Types** - Text, image, video, link, poll support&#10;✅ **Reactions System** - Like, love, laugh, etc.&#10;✅ **Comments &amp; Replies** - Threaded comment system&#10;✅ **Share Functionality** - Post sharing with attribution&#10;✅ **Trending Posts** - Viral content discovery&#10;&#10;### Social Features&#10;✅ **Friend Suggestions** - Multi-signal recommendation engine&#10;✅ **Mutual Friends** - Connection discovery&#10;✅ **Academic Networks** - University-specific connections&#10;✅ **People You May Know** - Profile viewer suggestions&#10;✅ **Friend Requests** - Connection management&#10;&#10;### Privacy &amp; Security&#10;✅ **Audience Controls** - Granular post visibility&#10;✅ **Academic Targeting** - Faculty/major-based sharing&#10;✅ **Block/Unblock** - User blocking system&#10;✅ **Profile Privacy** - Customizable profile visibility&#10;&#10;### Real-time Features&#10;✅ **Live Notifications** - Instant activity updates  &#10;✅ **Real-time Comments** - Live comment updates&#10;✅ **Activity Status** - Online presence tracking&#10;✅ **WebSocket Integration** - Real-time communication&#10;&#10;### Performance &amp; Scale&#10;✅ **Multi-level Caching** - Redis + application caching&#10;✅ **Event-driven Architecture** - Kafka message streaming&#10;✅ **Database Optimization** - Proper indexing and queries&#10;✅ **Load Balancing Ready** - Horizontal scaling support&#10;&#10;## DEPLOYMENT RECOMMENDATIONS&#10;&#10;### 1. Database Scaling&#10;- **MongoDB Sharding** for post data&#10;- **Neo4j Clustering** for social graph&#10;- **Redis Clustering** for caching layer&#10;&#10;### 2. Performance Monitoring&#10;- Implement APM tools (New Relic, DataDog)&#10;- Set up alerts for cache hit ratios&#10;- Monitor database query performance&#10;&#10;### 3. Content Delivery&#10;- Integrate CDN for media files&#10;- Implement image/video optimization&#10;- Add progressive loading for feeds&#10;&#10;### 4. Security Enhancements&#10;- Rate limiting on API endpoints&#10;- Content moderation system&#10;- Spam detection algorithms&#10;&#10;This comprehensive optimization transforms your CTU-Connect platform into a robust, scalable social network with Facebook-like capabilities while maintaining the academic focus of your original vision." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/app/profile/[userId]/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/app/profile/[userId]/page.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import React from 'react';&#10;import { useParams } from 'next/navigation';&#10;import { useAuth } from '@/contexts/AuthContext';&#10;import Layout from '@/components/layout/Layout';&#10;import UserProfile from '@/components/user/UserProfile';&#10;import { useRouter } from 'next/navigation';&#10;import { useEffect } from 'react';&#10;&#10;export default function ProfilePage() {&#10;  const { user, loading } = useAuth();&#10;  const router = useRouter();&#10;  const params = useParams();&#10;  const userId = params.userId as string;&#10;&#10;  useEffect(() =&gt; {&#10;    if (!loading &amp;&amp; !user) {&#10;      router.push('/login');&#10;    }&#10;  }, [user, loading, router]);&#10;&#10;  if (loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen flex items-center justify-center bg-gray-50&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;div className=&quot;animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4&quot;&gt;&lt;/div&gt;&#10;          &lt;p className=&quot;text-gray-600 vietnamese-text&quot;&gt;Đang tải trang cá nhân...&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  if (!user) {&#10;    return null;&#10;  }&#10;&#10;  return (&#10;    &lt;Layout&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;        &lt;UserProfile userId={userId} /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/Layout&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React from 'react';&#10;import { useParams } from 'next/navigation';&#10;import { useAuth } from '@/contexts/AuthContext';&#10;import Layout from '@/components/layout/Layout';&#10;import UserProfile from '@/components/user/UserProfile';&#10;import { useRouter } from 'next/navigation';&#10;import { useEffect } from 'react';&#10;&#10;export default function OtherUserProfilePage() {&#10;  const { user, loading } = useAuth();&#10;  const router = useRouter();&#10;  const params = useParams();&#10;  const userId = params.userId as string;&#10;&#10;  useEffect(() =&gt; {&#10;    if (!loading &amp;&amp; !user) {&#10;      router.push('/login');&#10;      return;&#10;    }&#10;&#10;    // If the userId matches current user's ID, redirect to /profile/me&#10;    if (user &amp;&amp; user.id === userId) {&#10;      router.push('/profile/me');&#10;      return;&#10;    }&#10;  }, [user, loading, router, userId]);&#10;&#10;  if (loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen flex items-center justify-center bg-gray-50&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;div className=&quot;animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4&quot;&gt;&lt;/div&gt;&#10;          &lt;p className=&quot;text-gray-600 vietnamese-text&quot;&gt;Đang tải trang cá nhân...&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  if (!user) {&#10;    return null;&#10;  }&#10;&#10;  // Don't render if this is current user's profile (will be redirected)&#10;  if (user.id === userId) {&#10;    return null;&#10;  }&#10;&#10;  return (&#10;    &lt;Layout&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;        &lt;UserProfile userId={userId} /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/Layout&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/app/profile/me/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/app/profile/me/page.tsx" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React from 'react';&#10;import { useAuth } from '@/contexts/AuthContext';&#10;import Layout from '@/components/layout/Layout';&#10;import UserProfile from '@/components/user/UserProfile';&#10;import { useRouter } from 'next/navigation';&#10;import { useEffect } from 'react';&#10;&#10;export default function MyProfilePage() {&#10;  const { user, loading } = useAuth();&#10;  const router = useRouter();&#10;&#10;  useEffect(() =&gt; {&#10;    if (!loading &amp;&amp; !user) {&#10;      router.push('/login');&#10;    }&#10;  }, [user, loading, router]);&#10;&#10;  if (loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen flex items-center justify-center bg-gray-50&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;div className=&quot;animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4&quot;&gt;&lt;/div&gt;&#10;          &lt;p className=&quot;text-gray-600 vietnamese-text&quot;&gt;Đang tải trang cá nhân của bạn...&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  if (!user) {&#10;    return null;&#10;  }&#10;&#10;  return (&#10;    &lt;Layout&gt;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;        &lt;UserProfile userId={user.id} /&gt;&#10;      &lt;/div&gt;&#10;    &lt;/Layout&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/app/profile/update/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/app/profile/update/page.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import { useEffect, useState } from 'react';&#10;import { useAuth } from '@/contexts/AuthContext';&#10;import { userService } from '@/services/userService';&#10;import { User } from '@/types';&#10;import StudentProfileForm from '@/components/profile/StudentProfileForm';&#10;import LecturerProfileForm from '@/components/profile/LecturerProfileForm';&#10;import LoadingSpinner from '@/components/ui/LoadingSpinner';&#10;import {useRouter} from &quot;next/navigation&quot;;&#10;&#10;export default function UpdateProfilePage() {&#10;  const { user } = useAuth();&#10;  const [currentUser, setCurrentUser] = useState&lt;User | null&gt;(null);&#10;  const [loading, setLoading] = useState(true);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;&#10;  useEffect(() =&gt; {&#10;    const fetchUserProfile = async () =&gt; {&#10;      try {&#10;        const profile = await userService.getMyProfile();&#10;        setCurrentUser(profile);&#10;        console.log('Current user profile:', profile);&#10;      } catch (err) {&#10;        console.error('Error fetching user profile:', err);&#10;        setError('Không thể tải thông tin người dùng');&#10;      } finally {&#10;        setLoading(false);&#10;      }&#10;    };&#10;&#10;    fetchUserProfile();&#10;  }, [user]);&#10;&#10;  if (loading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen flex items-center justify-center&quot;&gt;&#10;        &lt;LoadingSpinner /&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  if (error) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-red-600 mb-4&quot;&gt;Lỗi&lt;/h2&gt;&#10;          &lt;p className=&quot;text-gray-600&quot;&gt;{error}&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  if (!currentUser) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen flex items-center justify-center&quot;&gt;&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;h2 className=&quot;text-2xl font-bold text-gray-800 mb-4&quot;&gt;Không tìm thấy thông tin người dùng&lt;/h2&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50 py-8&quot;&gt;&#10;      &lt;div className=&quot;max-w-4xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;        &lt;div className=&quot;bg-white rounded-lg shadow-lg p-8&quot;&gt;&#10;          &lt;div className=&quot;text-center mb-8&quot;&gt;&#10;            &lt;h1 className=&quot;text-3xl font-bold text-gray-900 mb-2&quot;&gt;&#10;              Cập nhật thông tin cá nhân&#10;            &lt;/h1&gt;&#10;            &lt;p className=&quot;text-gray-600&quot;&gt;&#10;              Vui lòng hoàn thiện thông tin để sử dụng đầy đủ các tính năng của hệ thống&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;&#10;          {currentUser.role === 'STUDENT' &amp;&amp; (&#10;            &lt;StudentProfileForm user={currentUser} /&gt;&#10;          )}&#10;&#10;          {currentUser.role === 'LECTURER' &amp;&amp; (&#10;            &lt;LecturerProfileForm user={currentUser} /&gt;&#10;          )}&#10;&#10;          {!['STUDENT', 'LECTURER'].includes(currentUser.role) &amp;&amp; (&#10;            &lt;div className=&quot;text-center py-8&quot;&gt;&#10;              &lt;p className=&quot;text-gray-600&quot;&gt;&#10;                Vai trò người dùng không hợp lệ để cập nhật thông tin cá nhân.&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#13;&#10;&#13;&#10;import { useEffect, useState } from 'react';&#13;&#10;import { useAuth } from '@/contexts/AuthContext';&#13;&#10;import { userService } from '@/services/userService';&#13;&#10;import { User } from '@/types';&#13;&#10;import StudentProfileForm from '@/components/profile/StudentProfileForm';&#13;&#10;import LecturerProfileForm from '@/components/profile/LecturerProfileForm';&#13;&#10;import LoadingSpinner from '@/components/ui/LoadingSpinner';&#13;&#10;import Layout from '@/components/layout/Layout';&#13;&#10;import { useRouter } from &quot;next/navigation&quot;;&#13;&#10;import { ArrowLeft, User as UserIcon } from 'lucide-react';&#13;&#10;import { Button } from '@/components/ui/Button';&#13;&#10;&#13;&#10;export default function UpdateProfilePage() {&#13;&#10;  const { user } = useAuth();&#13;&#10;  const router = useRouter();&#13;&#10;  const [currentUser, setCurrentUser] = useState&lt;User | null&gt;(null);&#13;&#10;  const [loading, setLoading] = useState(true);&#13;&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#13;&#10;&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    if (!user) {&#13;&#10;      router.push('/login');&#13;&#10;      return;&#13;&#10;    }&#13;&#10;&#13;&#10;    const fetchUserProfile = async () =&gt; {&#13;&#10;      try {&#13;&#10;        const profile = await userService.getMyProfile();&#13;&#10;        setCurrentUser(profile);&#13;&#10;        console.log('Current user profile:', profile);&#13;&#10;      } catch (err) {&#13;&#10;        console.error('Error fetching user profile:', err);&#13;&#10;        setError('Không thể tải thông tin người dùng');&#13;&#10;      } finally {&#13;&#10;        setLoading(false);&#13;&#10;      }&#13;&#10;    };&#13;&#10;&#13;&#10;    fetchUserProfile();&#13;&#10;  }, [user, router]);&#13;&#10;&#13;&#10;  const handleBackToProfile = () =&gt; {&#13;&#10;    router.push('/profile/me');&#13;&#10;  };&#13;&#10;&#13;&#10;  if (loading) {&#13;&#10;    return (&#13;&#10;      &lt;Layout&gt;&#13;&#10;        &lt;div className=&quot;min-h-screen flex items-center justify-center bg-gray-50&quot;&gt;&#13;&#10;          &lt;div className=&quot;text-center&quot;&gt;&#13;&#10;            &lt;LoadingSpinner size=&quot;lg&quot; /&gt;&#13;&#10;            &lt;p className=&quot;text-gray-600 mt-4 vietnamese-text&quot;&gt;Đang tải thông tin cá nhân...&lt;/p&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/Layout&gt;&#13;&#10;    );&#13;&#10;  }&#13;&#10;&#13;&#10;  if (error) {&#13;&#10;    return (&#13;&#10;      &lt;Layout&gt;&#13;&#10;        &lt;div className=&quot;min-h-screen flex items-center justify-center bg-gray-50&quot;&gt;&#13;&#10;          &lt;div className=&quot;text-center bg-white rounded-lg shadow-sm p-8 max-w-md&quot;&gt;&#13;&#10;            &lt;div className=&quot;text-red-500 mb-4&quot;&gt;&#13;&#10;              &lt;UserIcon className=&quot;h-16 w-16 mx-auto&quot; /&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;h2 className=&quot;text-2xl font-bold text-red-600 mb-4 vietnamese-text&quot;&gt;Lỗi&lt;/h2&gt;&#13;&#10;            &lt;p className=&quot;text-gray-600 mb-6 vietnamese-text&quot;&gt;{error}&lt;/p&gt;&#13;&#10;            &lt;Button onClick={() =&gt; window.location.reload()} className=&quot;mr-3&quot;&gt;&#13;&#10;              Thử lại&#13;&#10;            &lt;/Button&gt;&#13;&#10;            &lt;Button variant=&quot;outline&quot; onClick={() =&gt; router.push('/profile/me')}&gt;&#13;&#10;              Quay lại&#13;&#10;            &lt;/Button&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/Layout&gt;&#13;&#10;    );&#13;&#10;  }&#13;&#10;&#13;&#10;  if (!currentUser) {&#13;&#10;    return (&#13;&#10;      &lt;Layout&gt;&#13;&#10;        &lt;div className=&quot;min-h-screen flex items-center justify-center bg-gray-50&quot;&gt;&#13;&#10;          &lt;div className=&quot;text-center bg-white rounded-lg shadow-sm p-8 max-w-md&quot;&gt;&#13;&#10;            &lt;div className=&quot;text-gray-400 mb-4&quot;&gt;&#13;&#10;              &lt;UserIcon className=&quot;h-16 w-16 mx-auto&quot; /&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;            &lt;h2 className=&quot;text-2xl font-bold text-gray-800 mb-4 vietnamese-text&quot;&gt;&#13;&#10;              Không tìm thấy thông tin người dùng&#13;&#10;            &lt;/h2&gt;&#13;&#10;            &lt;Button onClick={() =&gt; router.push('/profile/me')}&gt;&#13;&#10;              Quay lại trang cá nhân&#13;&#10;            &lt;/Button&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/Layout&gt;&#13;&#10;    );&#13;&#10;  }&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;Layout&gt;&#13;&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 py-8&quot;&gt;&#13;&#10;        &lt;div className=&quot;max-w-4xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#13;&#10;          {/* Header with Back Button */}&#13;&#10;          &lt;div className=&quot;mb-6&quot;&gt;&#13;&#10;            &lt;Button&#13;&#10;              variant=&quot;outline&quot;&#13;&#10;              onClick={handleBackToProfile}&#13;&#10;              className=&quot;flex items-center space-x-2 mb-4&quot;&#13;&#10;            &gt;&#13;&#10;              &lt;ArrowLeft className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;              &lt;span className=&quot;vietnamese-text&quot;&gt;Quay lại trang cá nhân&lt;/span&gt;&#13;&#10;            &lt;/Button&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          &lt;div className=&quot;bg-white rounded-lg shadow-lg p-8&quot;&gt;&#13;&#10;            &lt;div className=&quot;text-center mb-8&quot;&gt;&#13;&#10;              &lt;div className=&quot;mb-4&quot;&gt;&#13;&#10;                {currentUser.avatarUrl ? (&#13;&#10;                  &lt;img&#13;&#10;                    src={currentUser.avatarUrl}&#13;&#10;                    alt=&quot;Avatar&quot;&#13;&#10;                    className=&quot;w-20 h-20 rounded-full mx-auto object-cover border-4 border-white shadow-lg&quot;&#13;&#10;                  /&gt;&#13;&#10;                ) : (&#13;&#10;                  &lt;div className=&quot;w-20 h-20 bg-gradient-to-br from-blue-400 to-purple-600 rounded-full mx-auto flex items-center justify-center text-white text-2xl font-bold shadow-lg&quot;&gt;&#13;&#10;                    {(currentUser.fullName || currentUser.name || 'U').charAt(0).toUpperCase()}&#13;&#10;                  &lt;/div&gt;&#13;&#10;                )}&#13;&#10;              &lt;/div&gt;&#13;&#10;              &#13;&#10;              &lt;h1 className=&quot;text-3xl font-bold text-gray-900 mb-2 vietnamese-text&quot;&gt;&#13;&#10;                Cập nhật thông tin cá nhân&#13;&#10;              &lt;/h1&gt;&#13;&#10;              &lt;p className=&quot;text-gray-600 vietnamese-text&quot;&gt;&#13;&#10;                Vui lòng hoàn thiện thông tin để sử dụng đầy đủ các tính năng của hệ thống&#13;&#10;              &lt;/p&gt;&#13;&#10;              &#13;&#10;              {/* Role Badge */}&#13;&#10;              &lt;div className=&quot;mt-4&quot;&gt;&#13;&#10;                &lt;span className={`inline-flex px-3 py-1 rounded-full text-sm font-medium ${&#13;&#10;                  currentUser.role === 'LECTURER' &#13;&#10;                    ? 'bg-blue-100 text-blue-700' &#13;&#10;                    : 'bg-green-100 text-green-700'&#13;&#10;                }`}&gt;&#13;&#10;                  {currentUser.role === 'LECTURER' ? 'Giảng viên' : 'Sinh viên'}&#13;&#10;                &lt;/span&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;&#13;&#10;            {currentUser.role === 'STUDENT' &amp;&amp; (&#13;&#10;              &lt;StudentProfileForm user={currentUser} /&gt;&#13;&#10;            )}&#13;&#10;&#13;&#10;            {currentUser.role === 'LECTURER' &amp;&amp; (&#13;&#10;              &lt;LecturerProfileForm user={currentUser} /&gt;&#13;&#10;            )}&#13;&#10;&#13;&#10;            {!['STUDENT', 'LECTURER'].includes(currentUser.role) &amp;&amp; (&#13;&#10;              &lt;div className=&quot;text-center py-8&quot;&gt;&#13;&#10;                &lt;div className=&quot;text-gray-400 mb-4&quot;&gt;&#13;&#10;                  &lt;UserIcon className=&quot;h-12 w-12 mx-auto&quot; /&gt;&#13;&#10;                &lt;/div&gt;&#13;&#10;                &lt;p className=&quot;text-gray-600 vietnamese-text&quot;&gt;&#13;&#10;                  Vai trò người dùng không hợp lệ để cập nhật thông tin cá nhân.&#13;&#10;                &lt;/p&gt;&#13;&#10;                &lt;Button &#13;&#10;                  variant=&quot;outline&quot; &#13;&#10;                  onClick={() =&gt; router.push('/profile/me')} &#13;&#10;                  className=&quot;mt-4&quot;&#13;&#10;                &gt;&#13;&#10;                  Quay lại trang cá nhân&#13;&#10;                &lt;/Button&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;            )}&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/Layout&gt;&#13;&#10;  );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/components/post/CommentItem.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/components/post/CommentItem.tsx" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React, { useState } from 'react';&#10;import { Comment, CreateCommentRequest } from '@/types';&#10;import { postService } from '@/services/postService';&#10;import { useAuth } from '@/contexts/AuthContext';&#10;import Avatar from '@/components/ui/Avatar';&#10;import { Button } from '@/components/ui/Button';&#10;import { Textarea } from '@/components/ui/Textarea';&#10;import { LoadingSpinner } from '@/components/ui/LoadingSpinner';&#10;import { formatTimeAgo } from '@/utils/localization';&#10;import { &#10;  MoreHorizontal, &#10;  Reply, &#10;  Flag, &#10;  Trash2, &#10;  EyeOff,&#10;  ChevronDown,&#10;  ChevronUp&#10;} from 'lucide-react';&#10;import { ReactionPicker } from '@/components/ui/ReactionPicker';&#10;&#10;interface CommentItemProps {&#10;  comment: Comment;&#10;  postId: string;&#10;  onCommentUpdate?: (comment: Comment) =&gt; void;&#10;  onCommentDelete?: (commentId: string) =&gt; void;&#10;  depth?: number;&#10;}&#10;&#10;export const CommentItem: React.FC&lt;CommentItemProps&gt; = ({&#10;  comment,&#10;  postId,&#10;  onCommentUpdate,&#10;  onCommentDelete,&#10;  depth = 0&#10;}) =&gt; {&#10;  const { user } = useAuth();&#10;  const [showReplyForm, setShowReplyForm] = useState(false);&#10;  const [replyText, setReplyText] = useState('');&#10;  const [isSubmittingReply, setIsSubmittingReply] = useState(false);&#10;  const [showReplies, setShowReplies] = useState(false);&#10;  const [replies, setReplies] = useState&lt;Comment[]&gt;([]);&#10;  const [isLoadingReplies, setIsLoadingReplies] = useState(false);&#10;  const [showMenu, setShowMenu] = useState(false);&#10;  const [showReactionPicker, setShowReactionPicker] = useState(false);&#10;  const [userReaction, setUserReaction] = useState&lt;string | null&gt;(null);&#10;&#10;  const isOwnComment = user?.id === comment.author?.id;&#10;  const hasReplies = comment.stats?.replies &gt; 0;&#10;  const maxDepth = 3; // Limit nesting depth&#10;&#10;  const loadReplies = async () =&gt; {&#10;    if (isLoadingReplies || replies.length &gt; 0) return;&#10;    &#10;    setIsLoadingReplies(true);&#10;    try {&#10;      // TODO: Implement getReplies API&#10;      // const response = await postService.getCommentReplies(comment.id);&#10;      // setReplies(response.content);&#10;      setReplies([]); // Temporary&#10;    } catch (error) {&#10;      console.error('Error loading replies:', error);&#10;    } finally {&#10;      setIsLoadingReplies(false);&#10;    }&#10;  };&#10;&#10;  const handleShowReplies = async () =&gt; {&#10;    if (!showReplies &amp;&amp; hasReplies) {&#10;      await loadReplies();&#10;    }&#10;    setShowReplies(!showReplies);&#10;  };&#10;&#10;  const handleSubmitReply = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (!replyText.trim() || isSubmittingReply) return;&#10;&#10;    setIsSubmittingReply(true);&#10;    try {&#10;      const replyData: CreateCommentRequest = {&#10;        content: replyText.trim(),&#10;        parentId: comment.id&#10;      };&#10;&#10;      const newReply = await postService.createComment(postId, replyData);&#10;      setReplies(prev =&gt; [...prev, newReply]);&#10;      setReplyText('');&#10;      setShowReplyForm(false);&#10;      &#10;      // Update parent comment reply count&#10;      if (onCommentUpdate) {&#10;        onCommentUpdate({&#10;          ...comment,&#10;          stats: {&#10;            ...comment.stats,&#10;            replies: (comment.stats?.replies || 0) + 1&#10;          }&#10;        });&#10;      }&#10;    } catch (error) {&#10;      console.error('Error creating reply:', error);&#10;    } finally {&#10;      setIsSubmittingReply(false);&#10;    }&#10;  };&#10;&#10;  const handleCommentAction = async (action: 'report' | 'delete' | 'hide') =&gt; {&#10;    try {&#10;      switch (action) {&#10;        case 'delete':&#10;          if (onCommentDelete) {&#10;            onCommentDelete(comment.id);&#10;          }&#10;          break;&#10;        case 'report':&#10;          // TODO: Implement report functionality&#10;          console.log('Report comment:', comment.id);&#10;          break;&#10;        case 'hide':&#10;          // TODO: Implement hide functionality&#10;          console.log('Hide comment:', comment.id);&#10;          break;&#10;      }&#10;    } catch (error) {&#10;      console.error('Error handling comment action:', error);&#10;    }&#10;    setShowMenu(false);&#10;  };&#10;&#10;  const handleReaction = (reactionType: string) =&gt; {&#10;    // TODO: Implement comment reactions&#10;    setUserReaction(userReaction === reactionType ? null : reactionType);&#10;    setShowReactionPicker(false);&#10;  };&#10;&#10;  return (&#10;    &lt;div className={`${depth &gt; 0 ? 'ml-8 border-l-2 border-gray-100 pl-4' : ''}`}&gt;&#10;      &lt;div className=&quot;flex space-x-3 group&quot;&gt;&#10;        {/* Avatar */}&#10;        &lt;div className=&quot;flex-shrink-0&quot;&gt;&#10;          {comment.author?.avatarUrl ? (&#10;            &lt;Avatar&#10;              src={comment.author.avatarUrl}&#10;              alt={comment.author.fullName || comment.author.name || 'User'}&#10;              size=&quot;sm&quot;&#10;              className=&quot;ring-2 ring-white shadow-sm&quot;&#10;            /&gt;&#10;          ) : (&#10;            &lt;div className=&quot;w-8 h-8 bg-gradient-to-br from-blue-400 to-purple-600 rounded-full flex items-center justify-center text-white text-xs font-medium shadow-sm&quot;&gt;&#10;              {comment.author?.fullName?.charAt(0) || comment.author?.name?.charAt(0) || 'A'}&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;          {/* Comment Content */}&#10;          &lt;div className=&quot;bg-gray-100 rounded-2xl px-4 py-3 relative&quot;&gt;&#10;            {/* Menu Button */}&#10;            &lt;div className=&quot;absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity&quot;&gt;&#10;              &lt;div className=&quot;relative&quot;&gt;&#10;                &lt;button&#10;                  onClick={() =&gt; setShowMenu(!showMenu)}&#10;                  className=&quot;p-1 hover:bg-gray-200 rounded-full transition-colors&quot;&#10;                &gt;&#10;                  &lt;MoreHorizontal className=&quot;h-3 w-3 text-gray-500&quot; /&gt;&#10;                &lt;/button&gt;&#10;                &#10;                {showMenu &amp;&amp; (&#10;                  &lt;div className=&quot;absolute right-0 top-full mt-1 bg-white rounded-lg shadow-lg border border-gray-200 py-1 z-50 min-w-[140px]&quot;&gt;&#10;                    &lt;button&#10;                      onClick={() =&gt; handleCommentAction('report')}&#10;                      className=&quot;flex items-center space-x-2 w-full px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors&quot;&#10;                    &gt;&#10;                      &lt;Flag className=&quot;h-4 w-4 text-red-500&quot; /&gt;&#10;                      &lt;span&gt;Báo cáo&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                    &#10;                    {isOwnComment &amp;&amp; (&#10;                      &lt;button&#10;                        onClick={() =&gt; handleCommentAction('delete')}&#10;                        className=&quot;flex items-center space-x-2 w-full px-3 py-2 text-sm text-red-600 hover:bg-red-50 transition-colors&quot;&#10;                      &gt;&#10;                        &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                        &lt;span&gt;Xóa&lt;/span&gt;&#10;                      &lt;/button&gt;&#10;                    )}&#10;                    &#10;                    &lt;button&#10;                      onClick={() =&gt; handleCommentAction('hide')}&#10;                      className=&quot;flex items-center space-x-2 w-full px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors&quot;&#10;                    &gt;&#10;                      &lt;EyeOff className=&quot;h-4 w-4&quot; /&gt;&#10;                      &lt;span&gt;Ẩn bình luận&lt;/span&gt;&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;&#10;            {/* Author Info */}&#10;            &lt;div className=&quot;flex items-center space-x-2 mb-1&quot;&gt;&#10;              &lt;span className=&quot;font-semibold text-sm text-gray-900 vietnamese-text truncate&quot;&gt;&#10;                {comment.author?.fullName || comment.author?.name || 'Người dùng ẩn danh'}&#10;              &lt;/span&gt;&#10;              {comment.author?.role &amp;&amp; (&#10;                &lt;span className={`px-2 py-0.5 rounded-full text-xs font-medium flex-shrink-0 ${&#10;                  comment.author.role === 'LECTURER' &#10;                    ? 'bg-blue-100 text-blue-700' &#10;                    : 'bg-green-100 text-green-700'&#10;                }`}&gt;&#10;                  {comment.author.role === 'LECTURER' ? 'Giảng viên' : 'Sinh viên'}&#10;                &lt;/span&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;            &#10;            {/* Comment Text */}&#10;            &lt;p className=&quot;text-sm text-gray-800 vietnamese-text leading-relaxed break-words&quot;&gt;&#10;              {comment.content}&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;          &#10;          {/* Comment Actions */}&#10;          &lt;div className=&quot;flex items-center space-x-4 mt-2 text-xs text-gray-500&quot;&gt;&#10;            &lt;time dateTime={comment.createdAt} className=&quot;flex-shrink-0&quot;&gt;&#10;              {formatTimeAgo(comment.createdAt)}&#10;            &lt;/time&gt;&#10;            &#10;            {/* Reaction Button */}&#10;            &lt;div className=&quot;relative&quot;&gt;&#10;              &lt;button &#10;                onClick={() =&gt; setShowReactionPicker(!showReactionPicker)}&#10;                className={`hover:underline font-medium transition-colors ${&#10;                  userReaction ? 'text-blue-600' : 'hover:text-blue-600'&#10;                }`}&#10;              &gt;&#10;                {userReaction ? `${userReaction} Đã thích` : 'Thích'}&#10;              &lt;/button&gt;&#10;              &#10;              {showReactionPicker &amp;&amp; (&#10;                &lt;div className=&quot;absolute bottom-full left-0 mb-2 z-50&quot;&gt;&#10;                  &lt;ReactionPicker &#10;                    onReactionClick={handleReaction}&#10;                    currentReaction={userReaction}&#10;                  /&gt;&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;            &#10;            {/* Reply Button */}&#10;            {depth &lt; maxDepth &amp;&amp; (&#10;              &lt;button &#10;                onClick={() =&gt; setShowReplyForm(!showReplyForm)}&#10;                className=&quot;hover:underline font-medium transition-colors hover:text-blue-600 flex items-center space-x-1&quot;&#10;              &gt;&#10;                &lt;Reply className=&quot;h-3 w-3&quot; /&gt;&#10;                &lt;span&gt;Trả lời&lt;/span&gt;&#10;              &lt;/button&gt;&#10;            )}&#10;            &#10;            {/* Show Replies Button */}&#10;            {hasReplies &amp;&amp; (&#10;              &lt;button&#10;                onClick={handleShowReplies}&#10;                className=&quot;hover:underline font-medium transition-colors hover:text-blue-600 flex items-center space-x-1&quot;&#10;              &gt;&#10;                {showReplies ? &lt;ChevronUp className=&quot;h-3 w-3&quot; /&gt; : &lt;ChevronDown className=&quot;h-3 w-3&quot; /&gt;}&#10;                &lt;span&gt;{showReplies ? 'Ẩn' : 'Xem'} {comment.stats?.replies} phản hồi&lt;/span&gt;&#10;              &lt;/button&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Reply Form */}&#10;          {showReplyForm &amp;&amp; (&#10;            &lt;form onSubmit={handleSubmitReply} className=&quot;mt-3&quot;&gt;&#10;              &lt;div className=&quot;flex space-x-2&quot;&gt;&#10;                {user?.avatarUrl ? (&#10;                  &lt;Avatar&#10;                    src={user.avatarUrl}&#10;                    alt={user.fullName || user.username || 'Your avatar'}&#10;                    size=&quot;sm&quot;&#10;                    className=&quot;ring-2 ring-white shadow-sm flex-shrink-0&quot;&#10;                  /&gt;&#10;                ) : (&#10;                  &lt;div className=&quot;w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center text-white text-xs font-medium flex-shrink-0&quot;&gt;&#10;                    {user?.fullName?.charAt(0) || user?.name?.charAt(0) || 'A'}&#10;                  &lt;/div&gt;&#10;                )}&#10;                &#10;                &lt;div className=&quot;flex-1&quot;&gt;&#10;                  &lt;Textarea&#10;                    value={replyText}&#10;                    onChange={(e) =&gt; setReplyText(e.target.value)}&#10;                    placeholder={`Trả lời ${comment.author?.fullName || comment.author?.name || 'bình luận này'}...`}&#10;                    className=&quot;min-h-[80px] text-sm bg-white border border-gray-200 rounded-lg px-3 py-2 resize-none vietnamese-text&quot;&#10;                    disabled={isSubmittingReply}&#10;                  /&gt;&#10;                  &#10;                  &lt;div className=&quot;flex justify-end space-x-2 mt-2&quot;&gt;&#10;                    &lt;Button&#10;                      type=&quot;button&quot;&#10;                      variant=&quot;outline&quot;&#10;                      size=&quot;sm&quot;&#10;                      onClick={() =&gt; {&#10;                        setShowReplyForm(false);&#10;                        setReplyText('');&#10;                      }}&#10;                      className=&quot;text-xs px-3 py-1&quot;&#10;                    &gt;&#10;                      Hủy&#10;                    &lt;/Button&gt;&#10;                    &lt;Button&#10;                      type=&quot;submit&quot;&#10;                      size=&quot;sm&quot;&#10;                      disabled={!replyText.trim() || isSubmittingReply}&#10;                      className=&quot;text-xs px-3 py-1&quot;&#10;                    &gt;&#10;                      {isSubmittingReply ? &lt;LoadingSpinner size=&quot;sm&quot; /&gt; : 'Gửi'}&#10;                    &lt;/Button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/form&gt;&#10;          )}&#10;&#10;          {/* Replies */}&#10;          {showReplies &amp;&amp; (&#10;            &lt;div className=&quot;mt-4 space-y-3&quot;&gt;&#10;              {isLoadingReplies ? (&#10;                &lt;div className=&quot;flex justify-center py-2&quot;&gt;&#10;                  &lt;LoadingSpinner size=&quot;sm&quot; /&gt;&#10;                &lt;/div&gt;&#10;              ) : (&#10;                replies.map((reply) =&gt; (&#10;                  &lt;CommentItem&#10;                    key={reply.id}&#10;                    comment={reply}&#10;                    postId={postId}&#10;                    onCommentUpdate={onCommentUpdate}&#10;                    onCommentDelete={onCommentDelete}&#10;                    depth={depth + 1}&#10;                  /&gt;&#10;                ))&#10;              )}&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/components/post/EditIndicator.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/components/post/EditIndicator.tsx" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React from 'react';&#10;import { Edit3 } from 'lucide-react';&#10;&#10;interface EditIndicatorProps {&#10;  createdAt: string;&#10;  updatedAt: string;&#10;  className?: string;&#10;}&#10;&#10;export const EditIndicator: React.FC&lt;EditIndicatorProps&gt; = ({&#10;  createdAt,&#10;  updatedAt,&#10;  className = ''&#10;}) =&gt; {&#10;  // Check if post was edited (updatedAt is different from createdAt)&#10;  const wasEdited = createdAt &amp;&amp; updatedAt &amp;&amp; new Date(updatedAt) &gt; new Date(createdAt);&#10;  &#10;  if (!wasEdited) return null;&#10;&#10;  return (&#10;    &lt;div className={`flex items-center space-x-1 text-xs text-gray-500 ${className}`}&gt;&#10;      &lt;Edit3 className=&quot;h-3 w-3&quot; /&gt;&#10;      &lt;span className=&quot;vietnamese-text&quot;&gt;Đã chỉnh sửa&lt;/span&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default EditIndicator;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/components/post/PostCard.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/components/post/PostCard.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import React, { useState, useEffect, useCallback } from 'react';&#10;import { Post, CreateCommentRequest } from '@/types';&#10;import { postService } from '@/services/postService';&#10;import { Button } from '@/components/ui/Button';&#10;import { Card } from '@/components/ui/Card';&#10;import { Textarea } from '@/components/ui/Textarea';&#10;import { LoadingSpinner } from '@/components/ui/LoadingSpinner';&#10;import { t, formatTimeAgo } from '@/utils/localization';&#10;import {&#10;  Heart,&#10;  MessageCircle,&#10;  Share,&#10;  MoreHorizontal,&#10;  Send,&#10;  Eye,&#10;  Globe,&#10;  Users,&#10;  Lock,&#10;  ThumbsUp,&#10;  Flag,&#10;  Trash2,&#10;  EyeOff&#10;} from 'lucide-react';&#10;import Avatar from &quot;@/components/ui/Avatar&quot;;&#10;import {useAuth} from &quot;@/contexts/AuthContext&quot;;&#10;&#10;interface PostCardProps {&#10;  post: any;&#10;  onPostUpdate?: (updatedPost: any) =&gt; void;&#10;  onPostDelete?: (postId: string) =&gt; void;&#10;  className?: string;&#10;}&#10;&#10;export const PostCard: React.FC&lt;PostCardProps&gt; = ({&#10;                                                    post,&#10;                                                    onPostUpdate,&#10;                                                    onPostDelete,&#10;                                                    className = ''&#10;                                                  }) =&gt; {&#10;  const { user } = useAuth();&#10;  const [isLiked, setIsLiked] = useState(false);&#10;  const [isBookmarked, setIsBookmarked] = useState(false);&#10;  const [showComments, setShowComments] = useState(false);&#10;  const [commentText, setCommentText] = useState('');&#10;  const [comments, setComments] = useState&lt;any[]&gt;([]);&#10;  const [isLoadingComments, setIsLoadingComments] = useState(false);&#10;  const [isSubmittingComment, setIsSubmittingComment] = useState(false);&#10;  const [isLoadingInteraction, setIsLoadingInteraction] = useState(false);&#10;  const [actionFeedback, setActionFeedback] = useState&lt;string | null&gt;(null);&#10;  const [commentMenus, setCommentMenus] = useState&lt;{[key: string]: boolean}&gt;({});&#10;&#10;  // Load trạng thái like, bookmark khi mount&#10;  useEffect(() =&gt; {&#10;    let mounted = true;&#10;    (async () =&gt; {&#10;      try {&#10;        const status = await postService.getInteractionStatus(post.id);&#10;        if (mounted) {&#10;          setIsLiked(status.hasLiked);&#10;          setIsBookmarked(status.hasBookmarked);&#10;        }&#10;      } catch (error) {&#10;        console.debug('Không thể tải trạng thái tương tác:', error);&#10;      }&#10;    })();&#10;    return () =&gt; { mounted = false; };&#10;  }, [post.id]);&#10;&#10;  // Show feedback message temporarily&#10;  const showFeedback = (message: string) =&gt; {&#10;    setActionFeedback(message);&#10;    setTimeout(() =&gt; setActionFeedback(null), 1500);&#10;  };&#10;&#10;  // Toggle phần comment&#10;  const toggleComments = useCallback(async () =&gt; {&#10;    if (!showComments &amp;&amp; comments.length === 0) {&#10;      setIsLoadingComments(true);&#10;      try {&#10;        const response = await postService.getComments(post.id);&#10;        setComments(response.content || []);&#10;      } catch (error) {&#10;        console.error('Không thể tải bình luận:', error);&#10;        showFeedback('Không thể tải bình luận');&#10;      } finally {&#10;        setIsLoadingComments(false);&#10;      }&#10;    }&#10;    setShowComments(v =&gt; !v);&#10;  }, [showComments, comments.length, post.id]);&#10;&#10;  // Chức năng tương tác: like, bookmark, share&#10;  const handleInteraction = useCallback(async (type: 'like' | 'bookmark' | 'share') =&gt; {&#10;    if (isLoadingInteraction) return;&#10;    setIsLoadingInteraction(true);&#10;    try {&#10;      if (type === 'like') {&#10;        await postService.toggleLike(post.id);&#10;        setIsLiked(l =&gt; {&#10;          const newLiked = !l;&#10;          const newLikes = newLiked ? post.stats.likes + 1 : post.stats.likes - 1;&#10;          onPostUpdate?.({&#10;            ...post,&#10;            stats: { ...post.stats, likes: newLikes }&#10;          });&#10;          showFeedback(newLiked ? 'Đã thích bài viết' : 'Đã bỏ thích');&#10;          return newLiked;&#10;        });&#10;      } else if (type === 'bookmark') {&#10;        await postService.toggleBookmark(post.id);&#10;        setIsBookmarked(b =&gt; {&#10;          const newBookmarked = !b;&#10;          const newBookmarks = newBookmarked ? post.stats.bookmarks + 1 : post.stats.bookmarks - 1;&#10;          onPostUpdate?.({&#10;            ...post,&#10;            stats: { ...post.stats, bookmarks: newBookmarks }&#10;          });&#10;          showFeedback(newBookmarked ? 'Đã lưu bài viết' : 'Đã bỏ lưu bài viết');&#10;          return newBookmarked;&#10;        });&#10;      } else if (type === 'share') {&#10;        await postService.sharePost(post.id);&#10;        onPostUpdate?.({&#10;          ...post,&#10;          stats: { ...post.stats, shares: post.stats.shares + 1 }&#10;        });&#10;        await navigator.clipboard.writeText(`${window.location.origin}/posts/${post.id}`);&#10;        showFeedback('Đã sao chép liên kết bài viết');&#10;      }&#10;    } catch (error) {&#10;      console.error(`Không thể thực hiện ${type}:`, error);&#10;      showFeedback('Có lỗi xảy ra, vui lòng thử lại');&#10;    } finally {&#10;      setIsLoadingInteraction(false);&#10;    }&#10;  }, [isLoadingInteraction, onPostUpdate, post]);&#10;&#10;  // Gửi comment&#10;  const handleSubmitComment = useCallback(async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (!commentText.trim() || isSubmittingComment) return;&#10;&#10;    setIsSubmittingComment(true);&#10;    try {&#10;      const commentData: CreateCommentRequest = { content: commentText.trim() };&#10;      const newComment = await postService.createComment(post.id, commentData);&#10;      setComments(prev =&gt; [...prev, newComment]);&#10;      setCommentText('');&#10;      onPostUpdate?.({&#10;        ...post,&#10;        stats: { ...post.stats, comments: post.stats.comments + 1 }&#10;      });&#10;      showFeedback('Đã thêm bình luận');&#10;    } catch (error) {&#10;      console.error('Không thể tạo bình luận:', error);&#10;      showFeedback('Không thể gửi bình luận');&#10;    } finally {&#10;      setIsSubmittingComment(false);&#10;    }&#10;  }, [commentText, isSubmittingComment, onPostUpdate, post]);&#10;&#10;  // Format số lượng hiển thị&#10;  const formatStats = (count: number): string =&gt; {&#10;    if (count &gt;= 1_000_000) return `${(count / 1_000_000).toFixed(1)}M`;&#10;    if (count &gt;= 1000) return `${(count / 1000).toFixed(1)}K`;&#10;    return count.toString();&#10;  };&#10;&#10;  // Get privacy icon&#10;  const getPrivacyIcon = () =&gt; {&#10;    switch (post.privacy || post.visibility) {&#10;      case 'PUBLIC':&#10;        return &lt;Globe className=&quot;h-3 w-3 text-gray-500&quot; /&gt;;&#10;      case 'FRIENDS':&#10;        return &lt;Users className=&quot;h-3 w-3 text-gray-500&quot; /&gt;;&#10;      case 'PRIVATE':&#10;        return &lt;Lock className=&quot;h-3 w-3 text-gray-500&quot; /&gt;;&#10;      default:&#10;        return &lt;Globe className=&quot;h-3 w-3 text-gray-500&quot; /&gt;;&#10;    }&#10;  };&#10;&#10;  const getPrivacyText = () =&gt; {&#10;    switch (post.privacy || post.visibility) {&#10;      case 'PUBLIC': return 'Công khai';&#10;      case 'FRIENDS': return 'Bạn bè';&#10;      case 'PRIVATE': return 'Riêng tư';&#10;      default: return 'Công khai';&#10;    }&#10;  };&#10;&#10;  // Function to toggle comment menu&#10;  const toggleCommentMenu = (commentId: string) =&gt; {&#10;    setCommentMenus(prev =&gt; ({&#10;      ...prev,&#10;      [commentId]: !prev[commentId]&#10;    }));&#10;  };&#10;&#10;  // Function to handle comment actions&#10;  const handleCommentAction = async (action: 'report' | 'delete' | 'hide', commentId: string) =&gt; {&#10;    try {&#10;      switch (action) {&#10;        case 'report':&#10;          // Implement report logic&#10;          showFeedback('Đã báo cáo bình luận');&#10;          break;&#10;        case 'delete':&#10;          // Implement delete logic&#10;          showFeedback('Đã xóa bình luận');&#10;          break;&#10;        case 'hide':&#10;          // Implement hide logic&#10;          showFeedback('Đã ẩn bình luận');&#10;          break;&#10;      }&#10;    } catch (error) {&#10;      console.error('Lỗi khi thực hiện hành động:', error);&#10;      showFeedback('Không thể thực hiện hành động');&#10;    }&#10;    setCommentMenus(prev =&gt; ({ ...prev, [commentId]: false }));&#10;  };&#10;&#10;  return (&#10;    &lt;Card className={`bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 border border-gray-200 mb-4 ${className}`}&gt;&#10;      {/* Feedback Toast */}&#10;      {actionFeedback &amp;&amp; (&#10;        &lt;div className=&quot;absolute top-3 right-3 z-10 bg-gray-800 text-white px-3 py-1 rounded text-xs animate-fade-in&quot;&gt;&#10;          {actionFeedback}&#10;        &lt;/div&gt;&#10;      )}&#10;      &#10;      {/* Header - Facebook Style */}&#10;      &lt;div className=&quot;p-3&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;            {/* Avatar */}&#10;&#10;                &lt;Avatar&#10;                    id={post.author?.id}&#10;                    src={post.author?.avatarUrl || '/default-avatar.png'}&#10;                    alt={ post.author?.fullName ||  post.author?.username || 'Avatar'}&#10;                    size=&quot;md&quot;&#10;                /&gt;&#10;&#10;            &#10;            {/* User Info */}&#10;            &lt;div className=&quot;flex-1&quot;&gt;&#10;              &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                &lt;h3 className=&quot;font-semibold text-sm text-gray-900 hover:underline cursor-pointer vietnamese-text&quot;&gt;&#10;                  {post.author?.fullName || post.author?.name || post.authorName || 'Người dùng'}&#10;                &lt;/h3&gt;&#10;                {post.author?.role &amp;&amp; (&#10;                  &lt;span className={`px-2 py-0.5 rounded text-xs font-medium ${&#10;                    post.author.role === 'LECTURER' &#10;                      ? 'bg-blue-100 text-blue-700' &#10;                      : 'bg-green-100 text-green-700'&#10;                  }`}&gt;&#10;                    {post.author.role === 'LECTURER' ? 'GV' : 'SV'}&#10;                  &lt;/span&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;              &#10;              &lt;div className=&quot;flex items-center space-x-1 text-xs text-gray-500 mt-0.5&quot;&gt;&#10;                &lt;time dateTime={post.createdAt}&gt;&#10;                  {formatTimeAgo(post.createdAt)}&#10;                &lt;/time&gt;&#10;                &lt;span&gt;•&lt;/span&gt;&#10;                {getPrivacyIcon()}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &#10;          {/* More Options */}&#10;          &lt;button className=&quot;p-2 hover:bg-gray-100 rounded-full transition-colors&quot;&gt;&#10;            &lt;MoreHorizontal className=&quot;h-4 w-4 text-gray-500&quot; /&gt;&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Content */}&#10;      &lt;div className=&quot;px-3 pb-3&quot;&gt;&#10;        {/* Title */}&#10;        {post.title &amp;&amp; (&#10;          &lt;h2 className=&quot;font-semibold text-gray-900 mb-2 vietnamese-text&quot;&gt;&#10;            {post.title}&#10;          &lt;/h2&gt;&#10;        )}&#10;        &#10;        {/* Text Content */}&#10;        &lt;div className=&quot;text-gray-800 text-sm leading-relaxed vietnamese-text mb-3&quot;&gt;&#10;          {post.content}&#10;        &lt;/div&gt;&#10;        &#10;        {/* Tags */}&#10;        {post.tags &amp;&amp; post.tags.length &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;flex flex-wrap gap-1 mb-3&quot;&gt;&#10;            {post.tags.map((tag: string, index: number) =&gt; (&#10;              &lt;span&#10;                key={index}&#10;                className=&quot;text-blue-600 hover:underline cursor-pointer text-sm&quot;&#10;              &gt;&#10;                #{tag}&#10;              &lt;/span&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Media - Images */}&#10;        {post.images &amp;&amp; post.images.length &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;mb-3 -mx-3&quot;&gt;&#10;            &lt;div className={`grid gap-0.5 ${&#10;              post.images.length === 1 ? 'grid-cols-1' :&#10;              post.images.length === 2 ? 'grid-cols-2' :&#10;              post.images.length === 3 ? 'grid-cols-2' : 'grid-cols-2'&#10;            }`}&gt;&#10;              {post.images.slice(0, 4).map((imageUrl: string, index: number) =&gt; (&#10;                &lt;div&#10;                  key={index}&#10;                  className={`relative bg-gray-100 ${&#10;                    post.images.length === 3 &amp;&amp; index === 0 ? 'row-span-2' : ''&#10;                  }`}&#10;                &gt;&#10;                  &lt;img&#10;                    src={imageUrl}&#10;                    alt={`Ảnh bài viết ${index + 1}`}&#10;                    className=&quot;w-full h-full object-cover cursor-pointer hover:opacity-95 transition-opacity min-h-[200px] max-h-[400px]&quot;&#10;                    onClick={() =&gt; window.open(imageUrl, '_blank')}&#10;                  /&gt;&#10;                  {post.images.length &gt; 4 &amp;&amp; index === 3 &amp;&amp; (&#10;                    &lt;div className=&quot;absolute inset-0 bg-black bg-opacity-60 flex items-center justify-center cursor-pointer&quot;&gt;&#10;                      &lt;span className=&quot;text-white text-xl font-semibold&quot;&gt;&#10;                        +{post.images.length - 4}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Media - Videos */}&#10;        {post.videos &amp;&amp; post.videos.length &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;mb-3 -mx-3&quot;&gt;&#10;            {post.videos.map((videoUrl: string, index: number) =&gt; (&#10;              &lt;div key={index} className=&quot;bg-black&quot;&gt;&#10;                &lt;video&#10;                  src={videoUrl}&#10;                  controls&#10;                  className=&quot;w-full h-auto max-h-[500px]&quot;&#10;                  preload=&quot;metadata&quot;&#10;                &gt;&#10;                  Trình duyệt của bạn không hỗ trợ video.&#10;                &lt;/video&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      {/* Stats */}&#10;      {(post.stats?.likes &gt; 0 || post.stats?.comments &gt; 0 || post.stats?.shares &gt; 0) &amp;&amp; (&#10;        &lt;div className=&quot;px-3 py-2 border-t border-gray-100&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between text-xs text-gray-500&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;              {post.stats?.likes &gt; 0 &amp;&amp; (&#10;                &lt;&gt;&#10;                  &lt;div className=&quot;flex -space-x-1&quot;&gt;&#10;                    &lt;div className=&quot;w-4 h-4 bg-blue-500 rounded-full flex items-center justify-center&quot;&gt;&#10;                      &lt;ThumbsUp className=&quot;w-2.5 h-2.5 text-white fill-current&quot; /&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;w-4 h-4 bg-red-500 rounded-full flex items-center justify-center&quot;&gt;&#10;                      &lt;Heart className=&quot;w-2.5 h-2.5 text-white fill-current&quot; /&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;span&gt;{formatStats(post.stats.likes)}&lt;/span&gt;&#10;                &lt;/&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;              {post.stats?.comments &gt; 0 &amp;&amp; (&#10;                &lt;button&#10;                  onClick={toggleComments}&#10;                  className=&quot;hover:underline&quot;&#10;                &gt;&#10;                  {formatStats(post.stats.comments)} bình luận&#10;                &lt;/button&gt;&#10;              )}&#10;              {post.stats?.shares &gt; 0 &amp;&amp; (&#10;                &lt;span&gt;{formatStats(post.stats.shares)} chia sẻ&lt;/span&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {/* Action Buttons - Facebook Style */}&#10;      &lt;div className=&quot;border-t border-gray-100&quot;&gt;&#10;        &lt;div className=&quot;flex&quot;&gt;&#10;          &lt;button&#10;            onClick={() =&gt; handleInteraction('like')}&#10;            disabled={isLoadingInteraction}&#10;            className={`flex-1 flex items-center justify-center py-2 px-3 hover:bg-gray-50 transition-colors ${&#10;              isLiked ? 'text-blue-600' : 'text-gray-600'&#10;            }`}&#10;          &gt;&#10;            &lt;ThumbsUp className={`h-4 w-4 mr-2 ${isLiked ? 'fill-current' : ''}`} /&gt;&#10;            &lt;span className=&quot;text-sm font-medium&quot;&gt;Thích&lt;/span&gt;&#10;          &lt;/button&gt;&#10;&#10;          &lt;button&#10;            onClick={toggleComments}&#10;            className=&quot;flex-1 flex items-center justify-center py-2 px-3 text-gray-600 hover:bg-gray-50 transition-colors&quot;&#10;          &gt;&#10;            &lt;MessageCircle className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            &lt;span className=&quot;text-sm font-medium&quot;&gt;Bình luận&lt;/span&gt;&#10;          &lt;/button&gt;&#10;&#10;          &lt;button&#10;            onClick={() =&gt; handleInteraction('share')}&#10;            disabled={isLoadingInteraction}&#10;            className=&quot;flex-1 flex items-center justify-center py-2 px-3 text-gray-600 hover:bg-gray-50 transition-colors&quot;&#10;          &gt;&#10;            &lt;Share className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            &lt;span className=&quot;text-sm font-medium&quot;&gt;Chia sẻ&lt;/span&gt;&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Comments Section */}&#10;      {showComments &amp;&amp; (&#10;        &lt;div className=&quot;border-t border-gray-100 bg-gray-50&quot;&gt;&#10;          &lt;div className=&quot;p-3&quot;&gt;&#10;            {/* Comment Form */}&#10;            &lt;form onSubmit={handleSubmitComment} className=&quot;mb-3&quot;&gt;&#10;              &lt;div className=&quot;flex space-x-2&quot;&gt;&#10;&#10;                    &lt;Avatar&#10;                        id={ user?.id}&#10;                        src={ user?.avatarUrl || '/default-avatar.png'}&#10;                        alt={ user?.fullName ||  user?.username || 'Avatar'}&#10;                        size=&quot;md&quot;&#10;                        /&gt;&#10;&#10;                &lt;div className=&quot;flex-1&quot;&gt;&#10;                  &lt;Textarea&#10;                    value={commentText}&#10;                    onChange={(e) =&gt; setCommentText(e.target.value)}&#10;                    placeholder=&quot;Viết bình luận...&quot;&#10;                    className=&quot;min-h-[32px] text-sm bg-gray-300 text-black border-0 rounded-full px-3 py-2 resize-none vietnamese-text&quot;&#10;                    disabled={isSubmittingComment}&#10;                  /&gt;&#10;                  {commentText.trim() &amp;&amp; (&#10;                    &lt;div className=&quot;flex justify-end mt-1&quot;&gt;&#10;                      &lt;Button&#10;                        type=&quot;submit&quot;&#10;                        size=&quot;sm&quot;&#10;                        disabled={isSubmittingComment}&#10;                        className=&quot;text-xs px-3 py-1&quot;&#10;                      &gt;&#10;                        {isSubmittingComment ? &lt;LoadingSpinner size=&quot;sm&quot; /&gt; : 'Gửi'}&#10;                      &lt;/Button&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/form&gt;&#10;&#10;            {/* Comments List */}&#10;            {isLoadingComments ? (&#10;              &lt;div className=&quot;flex justify-center py-4&quot;&gt;&#10;                &lt;LoadingSpinner size=&quot;sm&quot; /&gt;&#10;              &lt;/div&gt;&#10;            ) : (&#10;              &lt;div className=&quot;max-h-80 overflow-y-auto scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100&quot;&gt;&#10;                &lt;div className=&quot;space-y-3 pr-2&quot;&gt;&#10;                  {comments.length === 0 ? (&#10;                    &lt;p className=&quot;text-gray-500 text-sm text-center py-8 vietnamese-text&quot;&gt;&#10;                      Chưa có bình luận nào. Hãy là người đầu tiên bình luận!&#10;                    &lt;/p&gt;&#10;                  ) : (&#10;                    comments.map((comment) =&gt; (&#10;                      &lt;div key={comment.id} className=&quot;flex space-x-3 group&quot;&gt;&#10;                        {/* Comment Author Avatar */}&#10;&#10;                          &lt;Avatar&#10;                            id={comment.author?.id}&#10;                            src={comment.author?.avatarUrl || '/default-avatar.png'}&#10;                            alt={comment.author?.fullName || comment.author?.username || 'Avatar'}&#10;                            size=&quot;md&quot;&#10;                          /&gt;&#10;&#10;&#10;                        &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                          &lt;div className=&quot;bg-gray-100 rounded-2xl px-4 py-3 relative&quot;&gt;&#10;                            {/* Comment Menu Button */}&#10;                            &lt;div className=&quot;absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity&quot;&gt;&#10;                              &lt;div className=&quot;relative&quot;&gt;&#10;                                &lt;button&#10;                                  onClick={() =&gt; toggleCommentMenu(comment.id)}&#10;                                  className=&quot;p-1 hover:bg-gray-200 rounded-full transition-colors&quot;&#10;                                &gt;&#10;                                  &lt;MoreHorizontal className=&quot;h-3 w-3 text-gray-500&quot; /&gt;&#10;                                &lt;/button&gt;&#10;&#10;                                {/* Comment Menu Dropdown */}&#10;                                {commentMenus[comment.id] &amp;&amp; (&#10;                                  &lt;div className=&quot;absolute right-0 top-full mt-1 bg-white rounded-lg shadow-lg border border-gray-200 py-1 z-50 min-w-[140px]&quot;&gt;&#10;                                    { comment.author?.id != user?.id &amp;&amp; (&#10;                                        &lt;button&#10;                                            onClick={() =&gt; handleCommentAction('report', comment.id)}&#10;                                            className=&quot;flex items-center space-x-2 w-full px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors&quot;&#10;                                        &gt;&#10;                                          &lt;Flag className=&quot;h-4 w-4 text-red-500&quot; /&gt;&#10;                                          &lt;span&gt;Báo cáo&lt;/span&gt;&#10;                                        &lt;/button&gt;)}&#10;&#10;&#10;                                    {comment.author?.id === user?.id &amp;&amp; (&#10;                                      &lt;button&#10;                                        onClick={() =&gt; handleCommentAction('delete', comment.id)}&#10;                                        className=&quot;flex items-center space-x-2 w-full px-3 py-2 text-sm text-red-600 hover:bg-red-50 transition-colors&quot;&#10;                                      &gt;&#10;                                        &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                                        &lt;span&gt;Xóa&lt;/span&gt;&#10;                                      &lt;/button&gt;&#10;                                    )}&#10;                                    {comment.author?.id != user?.id &amp;&amp; (&#10;                                        &lt;button&#10;                                            onClick={() =&gt; handleCommentAction('hide', comment.id)}&#10;                                            className=&quot;flex items-center space-x-2 w-full px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors&quot;&#10;                                        &gt;&#10;                                          &lt;EyeOff className=&quot;h-4 w-4&quot; /&gt;&#10;                                          &lt;span&gt;Ẩn bình luận&lt;/span&gt;&#10;                                        &lt;/button&gt;)}&#10;&#10;                                  &lt;/div&gt;&#10;                                )}&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;div className=&quot;flex items-center space-x-2 mb-1&quot;&gt;&#10;                              &lt;span className=&quot;font-semibold text-sm text-gray-900 vietnamese-text truncate&quot;&gt;&#10;                                {comment.author?.fullName || comment.author?.name || 'Người dùng ẩn danh'}&#10;                              &lt;/span&gt;&#10;                              {comment.author?.role &amp;&amp; (&#10;                                &lt;span className={`px-2 py-0.5 rounded-full text-xs font-medium flex-shrink-0 ${&#10;                                  comment.author.role === 'LECTURER' &#10;                                    ? 'bg-blue-100 text-blue-700' &#10;                                    : 'bg-green-100 text-green-700'&#10;                                }`}&gt;&#10;                                  {comment.author.role === 'LECTURER' ? 'Giảng viên' : 'Sinh viên'}&#10;                                &lt;/span&gt;&#10;                              )}&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;p className=&quot;text-sm text-gray-800 vietnamese-text leading-relaxed break-words&quot;&gt;&#10;                              {comment.content}&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          {/* Comment Actions */}&#10;                          &lt;div className=&quot;flex items-center space-x-4 mt-2 text-xs text-gray-500&quot;&gt;&#10;                            &lt;time dateTime={comment.createdAt} className=&quot;flex-shrink-0&quot;&gt;&#10;                              {formatTimeAgo(comment.createdAt)}&#10;                            &lt;/time&gt;&#10;                            &lt;button className=&quot;hover:underline font-medium transition-colors hover:text-blue-600&quot;&gt;&#10;                              Thích&#10;                            &lt;/button&gt;&#10;                            &lt;button className=&quot;hover:underline font-medium transition-colors hover:text-blue-600&quot;&gt;&#10;                              Trả lời&#10;                            &lt;/button&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    ))&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                {/* Load More Comments Button */}&#10;                {comments.length &gt; 0 &amp;&amp; (&#10;                  &lt;div className=&quot;text-center pt-3 mt-3 border-t border-gray-200&quot;&gt;&#10;                    &lt;button className=&quot;text-sm text-blue-600 hover:text-blue-700 font-medium transition-colors&quot;&gt;&#10;                      Xem thêm bình luận&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {/* Action Feedback */}&#10;      {actionFeedback &amp;&amp; (&#10;        &lt;div className=&quot;fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white px-4 py-2 rounded-lg shadow-lg z-50 vietnamese-text&quot;&gt;&#10;          {actionFeedback}&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/Card&gt;&#10;  );&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React, { useState, useEffect, useCallback } from 'react';&#10;import { Post, CreateCommentRequest, UpdatePostRequest } from '@/types';&#10;import { postService } from '@/services/postService';&#10;import { Button } from '@/components/ui/Button';&#10;import { Card } from '@/components/ui/Card';&#10;import { Textarea } from '@/components/ui/Textarea';&#10;import { LoadingSpinner } from '@/components/ui/LoadingSpinner';&#10;import { ReactionButton } from '@/components/ui/ReactionButton';&#10;import { PostMenu } from '@/components/post/PostMenu';&#10;import { PostEditModal } from '@/components/post/PostEditModal';&#10;import { EditIndicator } from '@/components/post/EditIndicator';&#10;import { CommentItem } from '@/components/post/CommentItem';&#10;import { t, formatTimeAgo } from '@/utils/localization';&#10;import {&#10;  MessageCircle,&#10;  Share,&#10;  Eye,&#10;  Globe,&#10;  Users,&#10;  Lock&#10;} from 'lucide-react';&#10;import Avatar from &quot;@/components/ui/Avatar&quot;;&#10;import {useAuth} from &quot;@/contexts/AuthContext&quot;;&#10;&#10;interface PostCardProps {&#10;  post: any;&#10;  onPostUpdate?: (updatedPost: any) =&gt; void;&#10;  onPostDelete?: (postId: string) =&gt; void;&#10;  className?: string;&#10;}&#10;&#10;export const PostCard: React.FC&lt;PostCardProps&gt; = ({&#10;  post,&#10;  onPostUpdate,&#10;  onPostDelete,&#10;  className = ''&#10;}) =&gt; {&#10;  const { user } = useAuth();&#10;  const [isLiked, setIsLiked] = useState(false);&#10;  const [isBookmarked, setIsBookmarked] = useState(false);&#10;  const [showComments, setShowComments] = useState(false);&#10;  const [commentText, setCommentText] = useState('');&#10;  const [comments, setComments] = useState&lt;any[]&gt;([]);&#10;  const [isLoadingComments, setIsLoadingComments] = useState(false);&#10;  const [isSubmittingComment, setIsSubmittingComment] = useState(false);&#10;  const [isLoadingInteraction, setIsLoadingInteraction] = useState(false);&#10;  const [actionFeedback, setActionFeedback] = useState&lt;string | null&gt;(null);&#10;  const [showEditModal, setShowEditModal] = useState(false);&#10;  const [currentReaction, setCurrentReaction] = useState&lt;string | null&gt;(null);&#10;  const [reactionCounts, setReactionCounts] = useState&lt;{[key: string]: number}&gt;({});&#10;  const [commentMenus, setCommentMenus] = useState&lt;{[key: string]: boolean}&gt;({});&#10;&#10;  const isOwnPost = user?.id === post.authorId || user?.id === post.author?.id;&#10;&#10;  // Load trạng thái like, bookmark khi mount&#10;  useEffect(() =&gt; {&#10;    let mounted = true;&#10;    (async () =&gt; {&#10;      try {&#10;        const status = await postService.getInteractionStatus(post.id);&#10;        if (mounted) {&#10;          setIsLiked(status.hasLiked);&#10;          setIsBookmarked(status.hasBookmarked);&#10;        }&#10;      } catch (error) {&#10;        console.debug('Không thể tải trạng thái tương tác:', error);&#10;      }&#10;    })();&#10;    return () =&gt; { mounted = false; };&#10;  }, [post.id]);&#10;&#10;  // Show feedback message temporarily&#10;  const showFeedback = (message: string) =&gt; {&#10;    setActionFeedback(message);&#10;    setTimeout(() =&gt; setActionFeedback(null), 1500);&#10;  };&#10;&#10;  // Toggle phần comment&#10;  const toggleComments = useCallback(async () =&gt; {&#10;    if (!showComments &amp;&amp; comments.length === 0) {&#10;      setIsLoadingComments(true);&#10;      try {&#10;        const response = await postService.getComments(post.id);&#10;        setComments(response.content || []);&#10;      } catch (error) {&#10;        console.error('Không thể tải bình luận:', error);&#10;        showFeedback('Không thể tải bình luận');&#10;      } finally {&#10;        setIsLoadingComments(false);&#10;      }&#10;    }&#10;    setShowComments(v =&gt; !v);&#10;  }, [showComments, comments.length, post.id]);&#10;&#10;  // Chức năng tương tác: like, bookmark, share&#10;  const handleInteraction = useCallback(async (type: 'like' | 'bookmark' | 'share') =&gt; {&#10;    if (isLoadingInteraction) return;&#10;    setIsLoadingInteraction(true);&#10;    try {&#10;      if (type === 'like') {&#10;        await postService.toggleLike(post.id);&#10;        setIsLiked(l =&gt; {&#10;          const newLiked = !l;&#10;          const newLikes = newLiked ? post.stats.likes + 1 : post.stats.likes - 1;&#10;          onPostUpdate?.({&#10;            ...post,&#10;            stats: { ...post.stats, likes: newLikes }&#10;          });&#10;          showFeedback(newLiked ? 'Đã thích bài viết' : 'Đã bỏ thích');&#10;          return newLiked;&#10;        });&#10;      } else if (type === 'bookmark') {&#10;        await postService.toggleBookmark(post.id);&#10;        setIsBookmarked(b =&gt; {&#10;          const newBookmarked = !b;&#10;          const newBookmarks = newBookmarked ? post.stats.bookmarks + 1 : post.stats.bookmarks - 1;&#10;          onPostUpdate?.({&#10;            ...post,&#10;            stats: { ...post.stats, bookmarks: newBookmarks }&#10;          });&#10;          showFeedback(newBookmarked ? 'Đã lưu bài viết' : 'Đã bỏ lưu bài viết');&#10;          return newBookmarked;&#10;        });&#10;      } else if (type === 'share') {&#10;        await postService.sharePost(post.id);&#10;        onPostUpdate?.({&#10;          ...post,&#10;          stats: { ...post.stats, shares: post.stats.shares + 1 }&#10;        });&#10;        await navigator.clipboard.writeText(`${window.location.origin}/posts/${post.id}`);&#10;        showFeedback('Đã sao chép liên kết bài viết');&#10;      }&#10;    } catch (error) {&#10;      console.error(`Không thể thực hiện ${type}:`, error);&#10;      showFeedback('Có lỗi xảy ra, vui lòng thử lại');&#10;    } finally {&#10;      setIsLoadingInteraction(false);&#10;    }&#10;  }, [isLoadingInteraction, onPostUpdate, post]);&#10;&#10;  // Gửi comment&#10;  const handleSubmitComment = useCallback(async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (!commentText.trim() || isSubmittingComment) return;&#10;&#10;    setIsSubmittingComment(true);&#10;    try {&#10;      const commentData: CreateCommentRequest = { content: commentText.trim() };&#10;      const newComment = await postService.createComment(post.id, commentData);&#10;      setComments(prev =&gt; [...prev, newComment]);&#10;      setCommentText('');&#10;      onPostUpdate?.({&#10;        ...post,&#10;        stats: { ...post.stats, comments: post.stats.comments + 1 }&#10;      });&#10;      showFeedback('Đã thêm bình luận');&#10;    } catch (error) {&#10;      console.error('Không thể tạo bình luận:', error);&#10;      showFeedback('Không th�� gửi bình luận');&#10;    } finally {&#10;      setIsSubmittingComment(false);&#10;    }&#10;  }, [commentText, isSubmittingComment, onPostUpdate, post]);&#10;&#10;  // Format số lượng hiển thị&#10;  const formatStats = (count: number): string =&gt; {&#10;    if (count &gt;= 1_000_000) return `${(count / 1_000_000).toFixed(1)}M`;&#10;    if (count &gt;= 1000) return `${(count / 1000).toFixed(1)}K`;&#10;    return count.toString();&#10;  };&#10;&#10;  // Get privacy icon&#10;  const getPrivacyIcon = () =&gt; {&#10;    switch (post.privacy || post.visibility) {&#10;      case 'PUBLIC':&#10;        return &lt;Globe className=&quot;h-3 w-3 text-gray-500&quot; /&gt;;&#10;      case 'FRIENDS':&#10;        return &lt;Users className=&quot;h-3 w-3 text-gray-500&quot; /&gt;;&#10;      case 'PRIVATE':&#10;        return &lt;Lock className=&quot;h-3 w-3 text-gray-500&quot; /&gt;;&#10;      default:&#10;        return &lt;Globe className=&quot;h-3 w-3 text-gray-500&quot; /&gt;;&#10;    }&#10;  };&#10;&#10;  const getPrivacyText = () =&gt; {&#10;    switch (post.privacy || post.visibility) {&#10;      case 'PUBLIC': return 'Công khai';&#10;      case 'FRIENDS': return 'Bạn bè';&#10;      case 'PRIVATE': return 'Riêng tư';&#10;      default: return 'Công khai';&#10;    }&#10;  };&#10;&#10;  // Function to toggle comment menu&#10;  const toggleCommentMenu = (commentId: string) =&gt; {&#10;    setCommentMenus(prev =&gt; ({&#10;      ...prev,&#10;      [commentId]: !prev[commentId]&#10;    }));&#10;  };&#10;&#10;  // New enhanced handlers for reactions and post actions&#10;  const handleReactionClick = useCallback(async (reactionId: string) =&gt; {&#10;    if (isLoadingInteraction) return;&#10;    setIsLoadingInteraction(true);&#10;    &#10;    try {&#10;      // TODO: Implement reaction API call&#10;      // await postService.addReaction(post.id, reactionId);&#10;      setCurrentReaction(reactionId);&#10;      &#10;      // Update reaction counts&#10;      setReactionCounts(prev =&gt; ({&#10;        ...prev,&#10;        [reactionId]: (prev[reactionId] || 0) + 1&#10;      }));&#10;      &#10;      showFeedback(`Đã ${reactionId === 'LIKE' ? 'thích' : 'phản ứng'} bài viết`);&#10;    } catch (error) {&#10;      console.error('Error adding reaction:', error);&#10;      showFeedback('Không thể thêm phản ứng');&#10;    } finally {&#10;      setIsLoadingInteraction(false);&#10;    }&#10;  }, [isLoadingInteraction, post.id]);&#10;&#10;  const handleReactionRemove = useCallback(async () =&gt; {&#10;    if (isLoadingInteraction || !currentReaction) return;&#10;    setIsLoadingInteraction(true);&#10;    &#10;    try {&#10;      // TODO: Implement remove reaction API call&#10;      // await postService.removeReaction(post.id);&#10;      &#10;      // Update reaction counts&#10;      setReactionCounts(prev =&gt; ({&#10;        ...prev,&#10;        [currentReaction]: Math.max((prev[currentReaction] || 0) - 1, 0)&#10;      }));&#10;      &#10;      setCurrentReaction(null);&#10;      showFeedback('Đã bỏ phản ứng');&#10;    } catch (error) {&#10;      console.error('Error removing reaction:', error);&#10;      showFeedback('Không thể bỏ phản ứng');&#10;    } finally {&#10;      setIsLoadingInteraction(false);&#10;    }&#10;  }, [isLoadingInteraction, currentReaction, post.id]);&#10;&#10;  // Post menu handlers&#10;  const handlePostEdit = () =&gt; {&#10;    setShowEditModal(true);&#10;  };&#10;&#10;  const handlePostDelete = async () =&gt; {&#10;    if (window.confirm('Bạn có chắc chắn muốn xóa bài viết này?')) {&#10;      try {&#10;        await postService.deletePost(post.id);&#10;        onPostDelete?.(post.id);&#10;        showFeedback('Đã xóa bài viết');&#10;      } catch (error) {&#10;        console.error('Error deleting post:', error);&#10;        showFeedback('Không thể xóa bài viết');&#10;      }&#10;    }&#10;  };&#10;&#10;  const handlePostSave = async (updatedPost: UpdatePostRequest) =&gt; {&#10;    try {&#10;      const result = await postService.updatePost(post.id, updatedPost);&#10;      onPostUpdate?.(result);&#10;      showFeedback('Đã cập nhật bài viết');&#10;    } catch (error) {&#10;      console.error('Error updating post:', error);&#10;      throw error;&#10;    }&#10;  };&#10;&#10;  const handlePostReport = () =&gt; {&#10;    // TODO: Implement report functionality&#10;    showFeedback('Đã báo cáo bài viết');&#10;  };&#10;&#10;  const handlePostHide = () =&gt; {&#10;    // TODO: Implement hide functionality&#10;    showFeedback('Đã ẩn bài viết');&#10;  };&#10;&#10;  const handlePostBlock = () =&gt; {&#10;    // TODO: Implement block functionality&#10;    showFeedback(`Đã chặn bài viết từ ${post.author?.fullName || post.author?.name || 'người dùng này'}`);&#10;  };&#10;&#10;  const handleCopyLink = async () =&gt; {&#10;    try {&#10;      await navigator.clipboard.writeText(`${window.location.origin}/posts/${post.id}`);&#10;      showFeedback('Đã sao chép liên kết');&#10;    } catch (error) {&#10;      showFeedback('Không thể sao chép liên kết');&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;Card className={`bg-white rounded-lg shadow-sm hover:shadow-md transition-shadow duration-200 border border-gray-200 mb-4 ${className}`}&gt;&#10;      {/* Feedback Toast */}&#10;      {actionFeedback &amp;&amp; (&#10;        &lt;div className=&quot;absolute top-3 right-3 z-10 bg-gray-800 text-white px-3 py-1 rounded text-xs animate-fade-in&quot;&gt;&#10;          {actionFeedback}&#10;        &lt;/div&gt;&#10;      )}&#10;      &#10;      {/* Header - Facebook Style */}&#10;      &lt;div className=&quot;p-3&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;            {/* Avatar */}&#10;&#10;                &lt;Avatar&#10;                    id={post.author?.id}&#10;                    src={post.author?.avatarUrl || '/default-avatar.png'}&#10;                    alt={ post.author?.fullName ||  post.author?.username || 'Avatar'}&#10;                    size=&quot;md&quot;&#10;                /&gt;&#10;&#10;            &#10;            {/* User Info */}&#10;            &lt;div className=&quot;flex-1&quot;&gt;&#10;              &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                &lt;h3 className=&quot;font-semibold text-sm text-gray-900 hover:underline cursor-pointer vietnamese-text&quot;&gt;&#10;                  {post.author?.fullName || post.author?.name || post.authorName || 'Người dùng'}&#10;                &lt;/h3&gt;&#10;                {post.author?.role &amp;&amp; (&#10;                  &lt;span className={`px-2 py-0.5 rounded text-xs font-medium ${&#10;                    post.author.role === 'LECTURER' &#10;                      ? 'bg-blue-100 text-blue-700' &#10;                      : 'bg-green-100 text-green-700'&#10;                  }`}&gt;&#10;                    {post.author.role === 'LECTURER' ? 'GV' : 'SV'}&#10;                  &lt;/span&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;              &#10;              &lt;div className=&quot;flex items-center space-x-1 text-xs text-gray-500 mt-0.5&quot;&gt;&#10;                &lt;time dateTime={post.createdAt}&gt;&#10;                  {formatTimeAgo(post.createdAt)}&#10;                &lt;/time&gt;&#10;                &lt;span&gt;•&lt;/span&gt;&#10;                {getPrivacyIcon()}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &#10;          {/* More Options */}&#10;          &lt;PostMenu&#10;            post={post}&#10;            onEdit={isOwnPost ? handlePostEdit : undefined}&#10;            onDelete={isOwnPost ? handlePostDelete : undefined}&#10;            onReport={!isOwnPost ? handlePostReport : undefined}&#10;            onHide={!isOwnPost ? handlePostHide : undefined}&#10;            onBlock={!isOwnPost ? handlePostBlock : undefined}&#10;            onBookmark={() =&gt; handleInteraction('bookmark')}&#10;            onShare={() =&gt; handleInteraction('share')}&#10;            onCopyLink={handleCopyLink}&#10;          /&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Edit Indicator */}&#10;        &lt;EditIndicator &#10;          createdAt={post.createdAt} &#10;          updatedAt={post.updatedAt} &#10;          className=&quot;mt-1 ml-12&quot;&#10;        /&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Content */}&#10;      &lt;div className=&quot;px-3 pb-3&quot;&gt;&#10;        {/* Title */}&#10;        {post.title &amp;&amp; (&#10;          &lt;h2 className=&quot;font-semibold text-gray-900 mb-2 vietnamese-text&quot;&gt;&#10;            {post.title}&#10;          &lt;/h2&gt;&#10;        )}&#10;        &#10;        {/* Text Content */}&#10;        &lt;div className=&quot;text-gray-800 text-sm leading-relaxed vietnamese-text mb-3&quot;&gt;&#10;          {post.content}&#10;        &lt;/div&gt;&#10;        &#10;        {/* Tags */}&#10;        {post.tags &amp;&amp; post.tags.length &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;flex flex-wrap gap-1 mb-3&quot;&gt;&#10;            {post.tags.map((tag: string, index: number) =&gt; (&#10;              &lt;span&#10;                key={index}&#10;                className=&quot;text-blue-600 hover:underline cursor-pointer text-sm&quot;&#10;              &gt;&#10;                #{tag}&#10;              &lt;/span&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Media - Images */}&#10;        {post.images &amp;&amp; post.images.length &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;mb-3 -mx-3&quot;&gt;&#10;            &lt;div className={`grid gap-0.5 ${&#10;              post.images.length === 1 ? 'grid-cols-1' :&#10;              post.images.length === 2 ? 'grid-cols-2' :&#10;              post.images.length === 3 ? 'grid-cols-2' : 'grid-cols-2'&#10;            }`}&gt;&#10;              {post.images.slice(0, 4).map((imageUrl: string, index: number) =&gt; (&#10;                &lt;div&#10;                  key={index}&#10;                  className={`relative bg-gray-100 ${&#10;                    post.images.length === 3 &amp;&amp; index === 0 ? 'row-span-2' : ''&#10;                  }`}&#10;                &gt;&#10;                  &lt;img&#10;                    src={imageUrl}&#10;                    alt={`Ảnh bài viết ${index + 1}`}&#10;                    className=&quot;w-full h-full object-cover cursor-pointer hover:opacity-95 transition-opacity min-h-[200px] max-h-[400px]&quot;&#10;                    onClick={() =&gt; window.open(imageUrl, '_blank')}&#10;                  /&gt;&#10;                  {post.images.length &gt; 4 &amp;&amp; index === 3 &amp;&amp; (&#10;                    &lt;div className=&quot;absolute inset-0 bg-black bg-opacity-60 flex items-center justify-center cursor-pointer&quot;&gt;&#10;                      &lt;span className=&quot;text-white text-xl font-semibold&quot;&gt;&#10;                        +{post.images.length - 4}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Media - Videos */}&#10;        {post.videos &amp;&amp; post.videos.length &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;mb-3 -mx-3&quot;&gt;&#10;            {post.videos.map((videoUrl: string, index: number) =&gt; (&#10;              &lt;div key={index} className=&quot;bg-black&quot;&gt;&#10;                &lt;video&#10;                  src={videoUrl}&#10;                  controls&#10;                  className=&quot;w-full h-auto max-h-[500px]&quot;&#10;                  preload=&quot;metadata&quot;&#10;                &gt;&#10;                  Trình duyệt của bạn không hỗ trợ video.&#10;                &lt;/video&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      {/* Stats */}&#10;      {(post.stats?.likes &gt; 0 || post.stats?.comments &gt; 0 || post.stats?.shares &gt; 0) &amp;&amp; (&#10;        &lt;div className=&quot;px-3 py-2 border-t border-gray-100&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between text-xs text-gray-500&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;              {post.stats?.likes &gt; 0 &amp;&amp; (&#10;                &lt;&gt;&#10;                  &lt;div className=&quot;flex -space-x-1&quot;&gt;&#10;                    &lt;div className=&quot;w-4 h-4 bg-blue-500 rounded-full flex items-center justify-center&quot;&gt;&#10;                      &lt;ThumbsUp className=&quot;w-2.5 h-2.5 text-white fill-current&quot; /&gt;&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;w-4 h-4 bg-red-500 rounded-full flex items-center justify-center&quot;&gt;&#10;                      &lt;Heart className=&quot;w-2.5 h-2.5 text-white fill-current&quot; /&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;span&gt;{formatStats(post.stats.likes)}&lt;/span&gt;&#10;                &lt;/&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;              {post.stats?.comments &gt; 0 &amp;&amp; (&#10;                &lt;button&#10;                  onClick={toggleComments}&#10;                  className=&quot;hover:underline&quot;&#10;                &gt;&#10;                  {formatStats(post.stats.comments)} bình luận&#10;                &lt;/button&gt;&#10;              )}&#10;              {post.stats?.shares &gt; 0 &amp;&amp; (&#10;                &lt;span&gt;{formatStats(post.stats.shares)} chia sẻ&lt;/span&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {/* Action Buttons - Facebook Style */}&#10;      &lt;div className=&quot;border-t border-gray-100&quot;&gt;&#10;        &lt;div className=&quot;flex&quot;&gt;&#10;          &lt;button&#10;            onClick={() =&gt; handleInteraction('like')}&#10;            disabled={isLoadingInteraction}&#10;            className={`flex-1 flex items-center justify-center py-2 px-3 hover:bg-gray-50 transition-colors ${&#10;              isLiked ? 'text-blue-600' : 'text-gray-600'&#10;            }`}&#10;          &gt;&#10;            &lt;ThumbsUp className={`h-4 w-4 mr-2 ${isLiked ? 'fill-current' : ''}`} /&gt;&#10;            &lt;span className=&quot;text-sm font-medium&quot;&gt;Thích&lt;/span&gt;&#10;          &lt;/button&gt;&#10;&#10;          &lt;button&#10;            onClick={toggleComments}&#10;            className=&quot;flex-1 flex items-center justify-center py-2 px-3 text-gray-600 hover:bg-gray-50 transition-colors&quot;&#10;          &gt;&#10;            &lt;MessageCircle className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            &lt;span className=&quot;text-sm font-medium&quot;&gt;Bình luận&lt;/span&gt;&#10;          &lt;/button&gt;&#10;&#10;          &lt;button&#10;            onClick={() =&gt; handleInteraction('share')}&#10;            disabled={isLoadingInteraction}&#10;            className=&quot;flex-1 flex items-center justify-center py-2 px-3 text-gray-600 hover:bg-gray-50 transition-colors&quot;&#10;          &gt;&#10;            &lt;Share className=&quot;h-4 w-4 mr-2&quot; /&gt;&#10;            &lt;span className=&quot;text-sm font-medium&quot;&gt;Chia sẻ&lt;/span&gt;&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Comments Section */}&#10;      {showComments &amp;&amp; (&#10;        &lt;div className=&quot;border-t border-gray-100 bg-gray-50&quot;&gt;&#10;          &lt;div className=&quot;p-3&quot;&gt;&#10;            {/* Comment Form */}&#10;            &lt;form onSubmit={handleSubmitComment} className=&quot;mb-3&quot;&gt;&#10;              &lt;div className=&quot;flex space-x-2&quot;&gt;&#10;&#10;                    &lt;Avatar&#10;                        id={ user?.id}&#10;                        src={ user?.avatarUrl || '/default-avatar.png'}&#10;                        alt={ user?.fullName ||  user?.username || 'Avatar'}&#10;                        size=&quot;md&quot;&#10;                        /&gt;&#10;&#10;                &lt;div className=&quot;flex-1&quot;&gt;&#10;                  &lt;Textarea&#10;                    value={commentText}&#10;                    onChange={(e) =&gt; setCommentText(e.target.value)}&#10;                    placeholder=&quot;Viết bình luận...&quot;&#10;                    className=&quot;min-h-[32px] text-sm bg-gray-300 text-black border-0 rounded-full px-3 py-2 resize-none vietnamese-text&quot;&#10;                    disabled={isSubmittingComment}&#10;                  /&gt;&#10;                  {commentText.trim() &amp;&amp; (&#10;                    &lt;div className=&quot;flex justify-end mt-1&quot;&gt;&#10;                      &lt;Button&#10;                        type=&quot;submit&quot;&#10;                        size=&quot;sm&quot;&#10;                        disabled={isSubmittingComment}&#10;                        className=&quot;text-xs px-3 py-1&quot;&#10;                      &gt;&#10;                        {isSubmittingComment ? &lt;LoadingSpinner size=&quot;sm&quot; /&gt; : 'Gửi'}&#10;                      &lt;/Button&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/form&gt;&#10;&#10;            {/* Comments List */}&#10;            {isLoadingComments ? (&#10;              &lt;div className=&quot;flex justify-center py-4&quot;&gt;&#10;                &lt;LoadingSpinner size=&quot;sm&quot; /&gt;&#10;              &lt;/div&gt;&#10;            ) : (&#10;              &lt;div className=&quot;max-h-80 overflow-y-auto scrollbar-thin scrollbar-thumb-gray-300 scrollbar-track-gray-100&quot;&gt;&#10;                &lt;div className=&quot;space-y-3 pr-2&quot;&gt;&#10;                  {comments.length === 0 ? (&#10;                    &lt;p className=&quot;text-gray-500 text-sm text-center py-8 vietnamese-text&quot;&gt;&#10;                      Chưa có bình luận nào. Hãy là người đầu tiên bình luận!&#10;                    &lt;/p&gt;&#10;                  ) : (&#10;                    comments.map((comment) =&gt; (&#10;                      &lt;div key={comment.id} className=&quot;flex space-x-3 group&quot;&gt;&#10;                        {/* Comment Author Avatar */}&#10;&#10;                          &lt;Avatar&#10;                            id={comment.author?.id}&#10;                            src={comment.author?.avatarUrl || '/default-avatar.png'}&#10;                            alt={comment.author?.fullName || comment.author?.username || 'Avatar'}&#10;                            size=&quot;md&quot;&#10;                          /&gt;&#10;&#10;&#10;                        &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#10;                          &lt;div className=&quot;bg-gray-100 rounded-2xl px-4 py-3 relative&quot;&gt;&#10;                            {/* Comment Menu Button */}&#10;                            &lt;div className=&quot;absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity&quot;&gt;&#10;                              &lt;div className=&quot;relative&quot;&gt;&#10;                                &lt;button&#10;                                  onClick={() =&gt; toggleCommentMenu(comment.id)}&#10;                                  className=&quot;p-1 hover:bg-gray-200 rounded-full transition-colors&quot;&#10;                                &gt;&#10;                                  &lt;MoreHorizontal className=&quot;h-3 w-3 text-gray-500&quot; /&gt;&#10;                                &lt;/button&gt;&#10;&#10;                                {/* Comment Menu Dropdown */}&#10;                                {commentMenus[comment.id] &amp;&amp; (&#10;                                  &lt;div className=&quot;absolute right-0 top-full mt-1 bg-white rounded-lg shadow-lg border border-gray-200 py-1 z-50 min-w-[140px]&quot;&gt;&#10;                                    { comment.author?.id != user?.id &amp;&amp; (&#10;                                        &lt;button&#10;                                            onClick={() =&gt; handleCommentAction('report', comment.id)}&#10;                                            className=&quot;flex items-center space-x-2 w-full px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors&quot;&#10;                                        &gt;&#10;                                          &lt;Flag className=&quot;h-4 w-4 text-red-500&quot; /&gt;&#10;                                          &lt;span&gt;Báo cáo&lt;/span&gt;&#10;                                        &lt;/button&gt;)}&#10;&#10;&#10;                                    {comment.author?.id === user?.id &amp;&amp; (&#10;                                      &lt;button&#10;                                        onClick={() =&gt; handleCommentAction('delete', comment.id)}&#10;                                        className=&quot;flex items-center space-x-2 w-full px-3 py-2 text-sm text-red-600 hover:bg-red-50 transition-colors&quot;&#10;                                      &gt;&#10;                                        &lt;Trash2 className=&quot;h-4 w-4&quot; /&gt;&#10;                                        &lt;span&gt;Xóa&lt;/span&gt;&#10;                                      &lt;/button&gt;&#10;                                    )}&#10;                                    {comment.author?.id != user?.id &amp;&amp; (&#10;                                        &lt;button&#10;                                            onClick={() =&gt; handleCommentAction('hide', comment.id)}&#10;                                            className=&quot;flex items-center space-x-2 w-full px-3 py-2 text-sm text-gray-700 hover:bg-gray-50 transition-colors&quot;&#10;                                        &gt;&#10;                                          &lt;EyeOff className=&quot;h-4 w-4&quot; /&gt;&#10;                                          &lt;span&gt;Ẩn bình luận&lt;/span&gt;&#10;                                        &lt;/button&gt;)}&#10;&#10;                                  &lt;/div&gt;&#10;                                )}&#10;                              &lt;/div&gt;&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;div className=&quot;flex items-center space-x-2 mb-1&quot;&gt;&#10;                              &lt;span className=&quot;font-semibold text-sm text-gray-900 vietnamese-text truncate&quot;&gt;&#10;                                {comment.author?.fullName || comment.author?.name || 'Người dùng ẩn danh'}&#10;                              &lt;/span&gt;&#10;                              {comment.author?.role &amp;&amp; (&#10;                                &lt;span className={`px-2 py-0.5 rounded-full text-xs font-medium flex-shrink-0 ${&#10;                                  comment.author.role === 'LECTURER' &#10;                                    ? 'bg-blue-100 text-blue-700' &#10;                                    : 'bg-green-100 text-green-700'&#10;                                }`}&gt;&#10;                                  {comment.author.role === 'LECTURER' ? 'Giảng viên' : 'Sinh viên'}&#10;                                &lt;/span&gt;&#10;                              )}&#10;                            &lt;/div&gt;&#10;&#10;                            &lt;p className=&quot;text-sm text-gray-800 vietnamese-text leading-relaxed break-words&quot;&gt;&#10;                              {comment.content}&#10;                            &lt;/p&gt;&#10;                          &lt;/div&gt;&#10;&#10;                          {/* Comment Actions */}&#10;                          &lt;div className=&quot;flex items-center space-x-4 mt-2 text-xs text-gray-500&quot;&gt;&#10;                            &lt;time dateTime={comment.createdAt} className=&quot;flex-shrink-0&quot;&gt;&#10;                              {formatTimeAgo(comment.createdAt)}&#10;                            &lt;/time&gt;&#10;                            &lt;button className=&quot;hover:underline font-medium transition-colors hover:text-blue-600&quot;&gt;&#10;                              Thích&#10;                            &lt;/button&gt;&#10;                            &lt;button className=&quot;hover:underline font-medium transition-colors hover:text-blue-600&quot;&gt;&#10;                              Trả lời&#10;                            &lt;/button&gt;&#10;                          &lt;/div&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    ))&#10;                  )}&#10;                &lt;/div&gt;&#10;&#10;                {/* Load More Comments Button */}&#10;                {comments.length &gt; 0 &amp;&amp; (&#10;                  &lt;div className=&quot;text-center pt-3 mt-3 border-t border-gray-200&quot;&gt;&#10;                    &lt;button className=&quot;text-sm text-blue-600 hover:text-blue-700 font-medium transition-colors&quot;&gt;&#10;                      Xem thêm bình luận&#10;                    &lt;/button&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {/* Action Feedback */}&#10;      {actionFeedback &amp;&amp; (&#10;        &lt;div className=&quot;fixed bottom-4 left-1/2 transform -translate-x-1/2 bg-gray-800 text-white px-4 py-2 rounded-lg shadow-lg z-50 vietnamese-text&quot;&gt;&#10;          {actionFeedback}&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {/* Edit Post Modal */}&#10;      {showEditModal &amp;&amp; (&#10;        &lt;PostEditModal&#10;          open={showEditModal}&#10;          onClose={() =&gt; setShowEditModal(false)}&#10;          post={post}&#10;          onSave={handlePostSave}&#10;        /&gt;&#10;      )}&#10;    &lt;/Card&gt;&#10;  );&#10;};&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/components/post/PostEditModal.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/components/post/PostEditModal.tsx" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React, { useState } from 'react';&#10;import { Modal } from '@/components/ui/Modal';&#10;import { Button } from '@/components/ui/Button';&#10;import { Textarea } from '@/components/ui/Textarea';&#10;import { Input } from '@/components/ui/Input';&#10;import { LoadingSpinner } from '@/components/ui/LoadingSpinner';&#10;import { UpdatePostRequest } from '@/types';&#10;import { X, Image, Video, Hash } from 'lucide-react';&#10;&#10;interface PostEditModalProps {&#10;  isOpen: boolean;&#10;  onClose: () =&gt; void;&#10;  post: any;&#10;  onSave: (updatedPost: UpdatePostRequest) =&gt; Promise&lt;void&gt;;&#10;}&#10;&#10;export const PostEditModal: React.FC&lt;PostEditModalProps&gt; = ({&#10;  isOpen,&#10;  onClose,&#10;  post,&#10;  onSave&#10;}) =&gt; {&#10;  const [title, setTitle] = useState(post.title || '');&#10;  const [content, setContent] = useState(post.content || '');&#10;  const [category, setCategory] = useState(post.category || '');&#10;  const [tags, setTags] = useState&lt;string[]&gt;(post.tags || []);&#10;  const [tagInput, setTagInput] = useState('');&#10;  const [visibility, setVisibility] = useState(post.visibility || post.privacy || 'PUBLIC');&#10;  const [isSaving, setIsSaving] = useState(false);&#10;&#10;  const handleAddTag = () =&gt; {&#10;    if (tagInput.trim() &amp;&amp; !tags.includes(tagInput.trim())) {&#10;      setTags(prev =&gt; [...prev, tagInput.trim()]);&#10;      setTagInput('');&#10;    }&#10;  };&#10;&#10;  const handleRemoveTag = (tagToRemove: string) =&gt; {&#10;    setTags(prev =&gt; prev.filter(tag =&gt; tag !== tagToRemove));&#10;  };&#10;&#10;  const handleKeyPress = (e: React.KeyboardEvent) =&gt; {&#10;    if (e.key === 'Enter' &amp;&amp; tagInput.trim()) {&#10;      e.preventDefault();&#10;      handleAddTag();&#10;    }&#10;  };&#10;&#10;  const handleSave = async () =&gt; {&#10;    if (!content.trim()) return;&#10;&#10;    setIsSaving(true);&#10;    try {&#10;      const updatedPost: UpdatePostRequest = {&#10;        title: title.trim() || undefined,&#10;        content: content.trim(),&#10;        category: category.trim() || undefined,&#10;        tags: tags.length &gt; 0 ? tags : undefined,&#10;        visibility: visibility as 'PUBLIC' | 'FRIENDS' | 'PRIVATE'&#10;      };&#10;&#10;      await onSave(updatedPost);&#10;      onClose();&#10;    } catch (error) {&#10;      console.error('Error saving post:', error);&#10;    } finally {&#10;      setIsSaving(false);&#10;    }&#10;  };&#10;&#10;  const handleClose = () =&gt; {&#10;    if (!isSaving) {&#10;      onClose();&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;Modal &#10;      isOpen={isOpen} &#10;      onClose={handleClose}&#10;      title=&quot;Chỉnh sửa bài viết&quot;&#10;      size=&quot;lg&quot;&#10;    &gt;&#10;      &lt;div className=&quot;space-y-6&quot;&gt;&#10;        {/* Title */}&#10;        &lt;div&gt;&#10;          &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2 vietnamese-text&quot;&gt;&#10;            Tiêu đề (tùy chọn)&#10;          &lt;/label&gt;&#10;          &lt;Input&#10;            type=&quot;text&quot;&#10;            value={title}&#10;            onChange={(e) =&gt; setTitle(e.target.value)}&#10;            placeholder=&quot;Nhập tiêu đề bài viết...&quot;&#10;            className=&quot;vietnamese-text&quot;&#10;            disabled={isSaving}&#10;          /&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Content */}&#10;        &lt;div&gt;&#10;          &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2 vietnamese-text&quot;&gt;&#10;            Nội dung &lt;span className=&quot;text-red-500&quot;&gt;*&lt;/span&gt;&#10;          &lt;/label&gt;&#10;          &lt;Textarea&#10;            value={content}&#10;            onChange={(e) =&gt; setContent(e.target.value)}&#10;            placeholder=&quot;Bạn đang nghĩ gì?&quot;&#10;            className=&quot;min-h-[120px] vietnamese-text&quot;&#10;            disabled={isSaving}&#10;          /&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Category */}&#10;        &lt;div&gt;&#10;          &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2 vietnamese-text&quot;&gt;&#10;            Danh mục&#10;          &lt;/label&gt;&#10;          &lt;select&#10;            value={category}&#10;            onChange={(e) =&gt; setCategory(e.target.value)}&#10;            className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 vietnamese-text&quot;&#10;            disabled={isSaving}&#10;          &gt;&#10;            &lt;option value=&quot;&quot;&gt;Chọn danh mục&lt;/option&gt;&#10;            &lt;option value=&quot;Tin tức&quot;&gt;Tin tức&lt;/option&gt;&#10;            &lt;option value=&quot;Học tập&quot;&gt;Học tập&lt;/option&gt;&#10;            &lt;option value=&quot;Giải trí&quot;&gt;Giải trí&lt;/option&gt;&#10;            &lt;option value=&quot;Thể thao&quot;&gt;Thể thao&lt;/option&gt;&#10;            &lt;option value=&quot;Công nghệ&quot;&gt;Công nghệ&lt;/option&gt;&#10;            &lt;option value=&quot;Du lịch&quot;&gt;Du lịch&lt;/option&gt;&#10;            &lt;option value=&quot;Khác&quot;&gt;Khác&lt;/option&gt;&#10;          &lt;/select&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Tags */}&#10;        &lt;div&gt;&#10;          &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2 vietnamese-text&quot;&gt;&#10;            Thẻ hashtag&#10;          &lt;/label&gt;&#10;          &lt;div className=&quot;flex flex-wrap gap-2 mb-2&quot;&gt;&#10;            {tags.map((tag, index) =&gt; (&#10;              &lt;span&#10;                key={index}&#10;                className=&quot;inline-flex items-center bg-blue-100 text-blue-800 text-sm px-2 py-1 rounded-full&quot;&#10;              &gt;&#10;                &lt;Hash className=&quot;h-3 w-3 mr-1&quot; /&gt;&#10;                {tag}&#10;                &lt;button&#10;                  type=&quot;button&quot;&#10;                  onClick={() =&gt; handleRemoveTag(tag)}&#10;                  className=&quot;ml-1 hover:text-blue-600&quot;&#10;                  disabled={isSaving}&#10;                &gt;&#10;                  &lt;X className=&quot;h-3 w-3&quot; /&gt;&#10;                &lt;/button&gt;&#10;              &lt;/span&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex space-x-2&quot;&gt;&#10;            &lt;Input&#10;              type=&quot;text&quot;&#10;              value={tagInput}&#10;              onChange={(e) =&gt; setTagInput(e.target.value)}&#10;              onKeyPress={handleKeyPress}&#10;              placeholder=&quot;Thêm thẻ hashtag...&quot;&#10;              className=&quot;flex-1 vietnamese-text&quot;&#10;              disabled={isSaving}&#10;            /&gt;&#10;            &lt;Button&#10;              type=&quot;button&quot;&#10;              onClick={handleAddTag}&#10;              disabled={!tagInput.trim() || isSaving}&#10;              variant=&quot;outline&quot;&#10;              size=&quot;sm&quot;&#10;            &gt;&#10;              Thêm&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Visibility */}&#10;        &lt;div&gt;&#10;          &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2 vietnamese-text&quot;&gt;&#10;            Quyền riêng tư&#10;          &lt;/label&gt;&#10;          &lt;select&#10;            value={visibility}&#10;            onChange={(e) =&gt; setVisibility(e.target.value)}&#10;            className=&quot;w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 vietnamese-text&quot;&#10;            disabled={isSaving}&#10;          &gt;&#10;            &lt;option value=&quot;PUBLIC&quot;&gt;Công khai&lt;/option&gt;&#10;            &lt;option value=&quot;FRIENDS&quot;&gt;Bạn bè&lt;/option&gt;&#10;            &lt;option value=&quot;PRIVATE&quot;&gt;Riêng tư&lt;/option&gt;&#10;          &lt;/select&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Media Preview (if exists) */}&#10;        {(post.images?.length &gt; 0 || post.videos?.length &gt; 0) &amp;&amp; (&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2 vietnamese-text&quot;&gt;&#10;              Media hiện tại&#10;            &lt;/label&gt;&#10;            &lt;div className=&quot;bg-gray-50 rounded-lg p-4&quot;&gt;&#10;              &lt;div className=&quot;flex items-center space-x-4 text-sm text-gray-600&quot;&gt;&#10;                {post.images?.length &gt; 0 &amp;&amp; (&#10;                  &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;                    &lt;Image className=&quot;h-4 w-4&quot; /&gt;&#10;                    &lt;span&gt;{post.images.length} ảnh&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;                {post.videos?.length &gt; 0 &amp;&amp; (&#10;                  &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;                    &lt;Video className=&quot;h-4 w-4&quot; /&gt;&#10;                    &lt;span&gt;{post.videos.length} video&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;              &lt;p className=&quot;text-xs text-gray-500 mt-2 vietnamese-text&quot;&gt;&#10;                Lưu ý: Không thể chỉnh sửa media trong phiên bản hiện tại&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Action Buttons */}&#10;        &lt;div className=&quot;flex justify-end space-x-3 pt-4 border-t&quot;&gt;&#10;          &lt;Button&#10;            variant=&quot;outline&quot;&#10;            onClick={handleClose}&#10;            disabled={isSaving}&#10;          &gt;&#10;            Hủy&#10;          &lt;/Button&gt;&#10;          &lt;Button&#10;            onClick={handleSave}&#10;            disabled={!content.trim() || isSaving}&#10;            className=&quot;flex items-center space-x-2&quot;&#10;          &gt;&#10;            {isSaving ? (&#10;              &lt;&gt;&#10;                &lt;LoadingSpinner size=&quot;sm&quot; /&gt;&#10;                &lt;span&gt;Đang lưu...&lt;/span&gt;&#10;              &lt;/&gt;&#10;            ) : (&#10;              &lt;span&gt;Lưu thay đổi&lt;/span&gt;&#10;            )}&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/Modal&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/components/post/PostMenu.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/components/post/PostMenu.tsx" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React, { useState } from 'react';&#10;import { &#10;  MoreHorizontal, &#10;  Edit3, &#10;  Trash2, &#10;  Flag, &#10;  EyeOff, &#10;  UserX,&#10;  Copy,&#10;  Bookmark,&#10;  Share&#10;} from 'lucide-react';&#10;import { useAuth } from '@/contexts/AuthContext';&#10;&#10;interface PostMenuProps {&#10;  post: any;&#10;  onEdit?: () =&gt; void;&#10;  onDelete?: () =&gt; void;&#10;  onReport?: () =&gt; void;&#10;  onHide?: () =&gt; void;&#10;  onBlock?: () =&gt; void;&#10;  onBookmark?: () =&gt; void;&#10;  onShare?: () =&gt; void;&#10;  onCopyLink?: () =&gt; void;&#10;  className?: string;&#10;}&#10;&#10;export const PostMenu: React.FC&lt;PostMenuProps&gt; = ({&#10;  post,&#10;  onEdit,&#10;  onDelete,&#10;  onReport,&#10;  onHide,&#10;  onBlock,&#10;  onBookmark,&#10;  onShare,&#10;  onCopyLink,&#10;  className = ''&#10;}) =&gt; {&#10;  const { user } = useAuth();&#10;  const [isOpen, setIsOpen] = useState(false);&#10;  const isOwnPost = user?.id === post.authorId || user?.id === post.author?.id;&#10;&#10;  const handleAction = (action: () =&gt; void) =&gt; {&#10;    action();&#10;    setIsOpen(false);&#10;  };&#10;&#10;  const menuItems = [&#10;    // Own post actions&#10;    ...(isOwnPost ? [&#10;      {&#10;        icon: &lt;Edit3 className=&quot;h-4 w-4&quot; /&gt;,&#10;        label: 'Chỉnh sửa bài viết',&#10;        action: onEdit,&#10;        className: 'text-gray-700 hover:bg-gray-50'&#10;      },&#10;      {&#10;        icon: &lt;Trash2 className=&quot;h-4 w-4 text-red-500&quot; /&gt;,&#10;        label: 'Xóa bài viết',&#10;        action: onDelete,&#10;        className: 'text-red-600 hover:bg-red-50'&#10;      }&#10;    ] : []),&#10;    &#10;    // Common actions&#10;    {&#10;      icon: &lt;Bookmark className=&quot;h-4 w-4&quot; /&gt;,&#10;      label: 'Lưu bài viết',&#10;      action: onBookmark,&#10;      className: 'text-gray-700 hover:bg-gray-50'&#10;    },&#10;    {&#10;      icon: &lt;Share className=&quot;h-4 w-4&quot; /&gt;,&#10;      label: 'Chia sẻ',&#10;      action: onShare,&#10;      className: 'text-gray-700 hover:bg-gray-50'&#10;    },&#10;    {&#10;      icon: &lt;Copy className=&quot;h-4 w-4&quot; /&gt;,&#10;      label: 'Sao chép liên kết',&#10;      action: onCopyLink,&#10;      className: 'text-gray-700 hover:bg-gray-50'&#10;    },&#10;    &#10;    // Other user's post actions&#10;    ...(!isOwnPost ? [&#10;      {&#10;        icon: &lt;Flag className=&quot;h-4 w-4 text-red-500&quot; /&gt;,&#10;        label: 'Báo cáo bài viết',&#10;        action: onReport,&#10;        className: 'text-red-600 hover:bg-red-50'&#10;      },&#10;      {&#10;        icon: &lt;EyeOff className=&quot;h-4 w-4&quot; /&gt;,&#10;        label: 'Ẩn bài viết',&#10;        action: onHide,&#10;        className: 'text-gray-700 hover:bg-gray-50'&#10;      },&#10;      {&#10;        icon: &lt;UserX className=&quot;h-4 w-4 text-red-500&quot; /&gt;,&#10;        label: `Chặn bài viết từ ${post.author?.fullName || post.author?.name || post.authorName}`,&#10;        action: onBlock,&#10;        className: 'text-red-600 hover:bg-red-50'&#10;      }&#10;    ] : [])&#10;  ].filter(item =&gt; item.action); // Only include items with actions&#10;&#10;  return (&#10;    &lt;div className={`relative ${className}`}&gt;&#10;      &lt;button&#10;        onClick={() =&gt; setIsOpen(!isOpen)}&#10;        className=&quot;p-2 hover:bg-gray-100 rounded-full transition-colors&quot;&#10;        aria-label=&quot;Tùy chọn bài viết&quot;&#10;      &gt;&#10;        &lt;MoreHorizontal className=&quot;h-4 w-4 text-gray-500&quot; /&gt;&#10;      &lt;/button&gt;&#10;&#10;      {isOpen &amp;&amp; (&#10;        &lt;&gt;&#10;          {/* Backdrop */}&#10;          &lt;div &#10;            className=&quot;fixed inset-0 z-40&quot; &#10;            onClick={() =&gt; setIsOpen(false)}&#10;          /&gt;&#10;          &#10;          {/* Menu */}&#10;          &lt;div className=&quot;absolute right-0 top-full mt-1 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50 min-w-[220px]&quot;&gt;&#10;            {menuItems.map((item, index) =&gt; (&#10;              &lt;button&#10;                key={index}&#10;                onClick={() =&gt; handleAction(item.action!)}&#10;                className={`&#10;                  flex items-center space-x-3 w-full px-4 py-2 text-sm transition-colors vietnamese-text&#10;                  ${item.className}&#10;                `}&#10;              &gt;&#10;                {item.icon}&#10;                &lt;span&gt;{item.label}&lt;/span&gt;&#10;              &lt;/button&gt;&#10;            ))}&#10;            &#10;            {menuItems.length === 0 &amp;&amp; (&#10;              &lt;div className=&quot;px-4 py-2 text-sm text-gray-500 vietnamese-text&quot;&gt;&#10;                Không có tùy chọn nào&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/components/profile/ConnectionsModal.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/components/profile/ConnectionsModal.tsx" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React, { useState } from 'react';&#10;import { User } from '@/types';&#10;import { Users, UserCheck, UserPlus, Search, X } from 'lucide-react';&#10;import { Button } from '@/components/ui/Button';&#10;import { Input } from '@/components/ui/Input';&#10;import { Modal } from '@/components/ui/Modal';&#10;import { LoadingSpinner } from '@/components/ui/LoadingSpinner';&#10;import Avatar from '@/components/ui/Avatar';&#10;&#10;interface ConnectionsModalProps {&#10;  isOpen: boolean;&#10;  onClose: () =&gt; void;&#10;  user: User;&#10;  type: 'followers' | 'following' | 'friends';&#10;  connections: User[];&#10;  isLoading: boolean;&#10;  onLoadMore?: () =&gt; void;&#10;  hasMore?: boolean;&#10;}&#10;&#10;export const ConnectionsModal: React.FC&lt;ConnectionsModalProps&gt; = ({&#10;  isOpen,&#10;  onClose,&#10;  user,&#10;  type,&#10;  connections,&#10;  isLoading,&#10;  onLoadMore,&#10;  hasMore = false&#10;}) =&gt; {&#10;  const [searchQuery, setSearchQuery] = useState('');&#10;  const [followingStates, setFollowingStates] = useState&lt;{[key: string]: boolean}&gt;({});&#10;&#10;  const getTitle = () =&gt; {&#10;    switch (type) {&#10;      case 'followers': return `Người theo dõi ${user.fullName || user.name}`;&#10;      case 'following': return `${user.fullName || user.name} đang theo dõi`;&#10;      case 'friends': return `Bạn bè của ${user.fullName || user.name}`;&#10;      default: return 'Kết nối';&#10;    }&#10;  };&#10;&#10;  const filteredConnections = connections.filter(connection =&gt;&#10;    (connection.fullName || connection.name || '').toLowerCase().includes(searchQuery.toLowerCase())&#10;  );&#10;&#10;  const handleFollow = async (targetUserId: string) =&gt; {&#10;    try {&#10;      // TODO: Implement follow/unfollow logic&#10;      setFollowingStates(prev =&gt; ({&#10;        ...prev,&#10;        [targetUserId]: !prev[targetUserId]&#10;      }));&#10;    } catch (error) {&#10;      console.error('Error updating follow status:', error);&#10;    }&#10;  };&#10;&#10;  const handleMessage = (targetUserId: string) =&gt; {&#10;    // TODO: Implement messaging functionality&#10;    console.log('Open chat with user:', targetUserId);&#10;    onClose();&#10;  };&#10;&#10;  return (&#10;    &lt;Modal isOpen={isOpen} onClose={onClose} title={getTitle()}&gt;&#10;      &lt;div className=&quot;space-y-4&quot;&gt;&#10;        {/* Search */}&#10;        &lt;div className=&quot;relative&quot;&gt;&#10;          &lt;Search className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400&quot; /&gt;&#10;          &lt;Input&#10;            type=&quot;text&quot;&#10;            placeholder=&quot;Tìm kiếm...&quot;&#10;            value={searchQuery}&#10;            onChange={(e) =&gt; setSearchQuery(e.target.value)}&#10;            className=&quot;pl-10&quot;&#10;          /&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Connections List */}&#10;        &lt;div className=&quot;max-h-96 overflow-y-auto space-y-2&quot;&gt;&#10;          {isLoading &amp;&amp; connections.length === 0 ? (&#10;            &lt;div className=&quot;flex justify-center py-8&quot;&gt;&#10;              &lt;LoadingSpinner size=&quot;md&quot; /&gt;&#10;            &lt;/div&gt;&#10;          ) : filteredConnections.length === 0 ? (&#10;            &lt;div className=&quot;text-center py-8&quot;&gt;&#10;              &lt;Users className=&quot;h-12 w-12 text-gray-400 mx-auto mb-4&quot; /&gt;&#10;              &lt;p className=&quot;text-gray-500 vietnamese-text&quot;&gt;&#10;                {searchQuery ? 'Không tìm thấy kết quả' : 'Chưa có kết nối nào'}&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          ) : (&#10;            filteredConnections.map((connection) =&gt; (&#10;              &lt;div&#10;                key={connection.id}&#10;                className=&quot;flex items-center justify-between p-3 hover:bg-gray-50 rounded-lg transition-colors&quot;&#10;              &gt;&#10;                &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                  &lt;Avatar&#10;                    src={connection.avatarUrl || ''}&#10;                    alt={connection.fullName || connection.name || 'User'}&#10;                    size=&quot;md&quot;&#10;                    className=&quot;ring-2 ring-white shadow-sm&quot;&#10;                  /&gt;&#10;                  &lt;div&gt;&#10;                    &lt;h3 className=&quot;font-medium text-gray-900 vietnamese-text&quot;&gt;&#10;                      {connection.fullName || connection.name || 'Người dùng'}&#10;                    &lt;/h3&gt;&#10;                    &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                      &lt;span className={`text-xs px-2 py-0.5 rounded-full ${&#10;                        connection.role === 'LECTURER' &#10;                          ? 'bg-blue-100 text-blue-700' &#10;                          : 'bg-green-100 text-green-700'&#10;                      }`}&gt;&#10;                        {connection.role === 'LECTURER' ? 'Giảng viên' : 'Sinh viên'}&#10;                      &lt;/span&gt;&#10;                      {connection.isOnline &amp;&amp; (&#10;                        &lt;div className=&quot;flex items-center text-xs text-gray-500&quot;&gt;&#10;                          &lt;div className=&quot;w-2 h-2 bg-green-500 rounded-full mr-1&quot;&gt;&lt;/div&gt;&#10;                          Đang hoạt động&#10;                        &lt;/div&gt;&#10;                      )}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                  &lt;Button&#10;                    size=&quot;sm&quot;&#10;                    variant=&quot;outline&quot;&#10;                    onClick={() =&gt; handleMessage(connection.id)}&#10;                    className=&quot;text-xs&quot;&#10;                  &gt;&#10;                    Nhắn tin&#10;                  &lt;/Button&gt;&#10;                  &#10;                  {type !== 'friends' &amp;&amp; (&#10;                    &lt;Button&#10;                      size=&quot;sm&quot;&#10;                      variant={followingStates[connection.id] ? &quot;outline&quot; : &quot;primary&quot;}&#10;                      onClick={() =&gt; handleFollow(connection.id)}&#10;                      className=&quot;text-xs flex items-center space-x-1&quot;&#10;                    &gt;&#10;                      {followingStates[connection.id] ? (&#10;                        &lt;&gt;&#10;                          &lt;UserCheck className=&quot;h-3 w-3&quot; /&gt;&#10;                          &lt;span&gt;Đang theo dõi&lt;/span&gt;&#10;                        &lt;/&gt;&#10;                      ) : (&#10;                        &lt;&gt;&#10;                          &lt;UserPlus className=&quot;h-3 w-3&quot; /&gt;&#10;                          &lt;span&gt;Theo dõi&lt;/span&gt;&#10;                        &lt;/&gt;&#10;                      )}&#10;                    &lt;/Button&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ))&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Load More */}&#10;        {hasMore &amp;&amp; (&#10;          &lt;div className=&quot;text-center pt-4 border-t&quot;&gt;&#10;            &lt;Button&#10;              variant=&quot;outline&quot;&#10;              onClick={onLoadMore}&#10;              disabled={isLoading}&#10;              className=&quot;w-full&quot;&#10;            &gt;&#10;              {isLoading ? (&#10;                &lt;&gt;&#10;                  &lt;LoadingSpinner size=&quot;sm&quot; className=&quot;mr-2&quot; /&gt;&#10;                  Đang tải...&#10;                &lt;/&gt;&#10;              ) : (&#10;                'Xem thêm'&#10;              )}&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Close Button */}&#10;        &lt;div className=&quot;flex justify-end pt-4 border-t&quot;&gt;&#10;          &lt;Button variant=&quot;outline&quot; onClick={onClose}&gt;&#10;            Đóng&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/Modal&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/components/profile/LecturerProfileInfo.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/components/profile/LecturerProfileInfo.tsx" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React from 'react';&#10;import { User } from '@/types';&#10;import {&#10;  Briefcase,&#10;  Award,&#10;  MapPin,&#10;  Hash,&#10;  BookOpen,&#10;  Star,&#10;  Building&#10;} from 'lucide-react';&#10;&#10;interface LecturerProfileInfoProps {&#10;  user: User;&#10;}&#10;&#10;export const LecturerProfileInfo: React.FC&lt;LecturerProfileInfoProps&gt; = ({ user }) =&gt; {&#10;  const infoSections = [&#10;    {&#10;      title: 'Thông tin công việc',&#10;      icon: &lt;Briefcase className=&quot;h-5 w-5 text-blue-500&quot; /&gt;,&#10;      items: [&#10;        user.staffCode &amp;&amp; { label: 'Mã cán bộ', value: user.staffCode, icon: &lt;Hash className=&quot;h-4 w-4&quot; /&gt; },&#10;        user.position &amp;&amp; { label: 'Chức vụ', value: user.position.name, icon: &lt;Star className=&quot;h-4 w-4&quot; /&gt; },&#10;        user.faculty &amp;&amp; { label: 'Khoa', value: user.faculty.name, icon: &lt;Building className=&quot;h-4 w-4&quot; /&gt; },&#10;        user.college &amp;&amp; { label: 'Trường', value: user.college.name, icon: &lt;MapPin className=&quot;h-4 w-4&quot; /&gt; },&#10;      ].filter(Boolean)&#10;    },&#10;    {&#10;      title: 'Trình độ học vấn',&#10;      icon: &lt;Award className=&quot;h-5 w-5 text-green-500&quot; /&gt;,&#10;      items: [&#10;        user.degree &amp;&amp; { label: 'Bằng cấp', value: user.degree.name, icon: &lt;Award className=&quot;h-4 w-4&quot; /&gt; },&#10;        user.academic &amp;&amp; { label: 'Học hàm/Học vị', value: user.academic.name, icon: &lt;BookOpen className=&quot;h-4 w-4&quot; /&gt; },&#10;      ].filter(Boolean)&#10;    }&#10;  ];&#10;&#10;  return (&#10;    &lt;div className=&quot;bg-white rounded-lg shadow-sm p-6&quot;&gt;&#10;      &lt;h2 className=&quot;text-xl font-bold text-gray-900 mb-6 vietnamese-text&quot;&gt;Thông tin cá nhân&lt;/h2&gt;&#10;      &#10;      &lt;div className=&quot;space-y-6&quot;&gt;&#10;        {infoSections.map((section, sectionIndex) =&gt; (&#10;          &lt;div key={sectionIndex}&gt;&#10;            &lt;div className=&quot;flex items-center space-x-2 mb-4&quot;&gt;&#10;              {section.icon}&#10;              &lt;h3 className=&quot;font-semibold text-gray-800 vietnamese-text&quot;&gt;{section.title}&lt;/h3&gt;&#10;            &lt;/div&gt;&#10;            &#10;            &lt;div className=&quot;space-y-3&quot;&gt;&#10;              {section.items.map((item, itemIndex) =&gt; (&#10;                &lt;div key={itemIndex} className=&quot;flex items-center space-x-3 p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors&quot;&gt;&#10;                  &lt;div className=&quot;text-gray-500&quot;&gt;&#10;                    {item.icon}&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;flex-1&quot;&gt;&#10;                    &lt;div className=&quot;text-sm text-gray-600 vietnamese-text&quot;&gt;{item.label}&lt;/div&gt;&#10;                    &lt;div className=&quot;font-medium text-gray-900 vietnamese-text&quot;&gt;{item.value}&lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/components/profile/ProfileHeader.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/components/profile/ProfileHeader.tsx" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React, { useState } from 'react';&#10;import { User } from '@/types';&#10;import { Camera, MapPin, Calendar, Briefcase, GraduationCap, Edit3, UserPlus, MessageCircle, MoreHorizontal } from 'lucide-react';&#10;import { Button } from '@/components/ui/Button';&#10;import { formatTimeAgo } from '@/utils/localization';&#10;&#10;interface ProfileHeaderProps {&#10;  user: User;&#10;  isOwnProfile: boolean;&#10;  isFollowing?: boolean;&#10;  onFollow?: () =&gt; void;&#10;  onMessage?: () =&gt; void;&#10;  onEditProfile?: () =&gt; void;&#10;  onEditCover?: () =&gt; void;&#10;  onEditAvatar?: () =&gt; void;&#10;}&#10;&#10;export const ProfileHeader: React.FC&lt;ProfileHeaderProps&gt; = ({&#10;  user,&#10;  isOwnProfile,&#10;  isFollowing = false,&#10;  onFollow,&#10;  onMessage,&#10;  onEditProfile,&#10;  onEditCover,&#10;  onEditAvatar&#10;}) =&gt; {&#10;  const [showFullBio, setShowFullBio] = useState(false);&#10;&#10;  const getRoleDisplay = (role: string) =&gt; {&#10;    switch (role) {&#10;      case 'STUDENT': return 'Sinh viên';&#10;      case 'LECTURER': return 'Giảng viên';&#10;      case 'ADMIN': return 'Quản trị viên';&#10;      default: return 'Người dùng';&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;bg-white rounded-lg shadow-sm overflow-hidden&quot;&gt;&#10;      {/* Cover Photo */}&#10;      &lt;div className=&quot;relative h-80 bg-gradient-to-r from-blue-500 to-purple-600&quot;&gt;&#10;        {user.backgroundUrl ? (&#10;          &lt;img&#10;            src={user.backgroundUrl}&#10;            alt=&quot;Ảnh bìa&quot;&#10;            className=&quot;w-full h-full object-cover&quot;&#10;          /&gt;&#10;        ) : (&#10;          &lt;div className=&quot;w-full h-full bg-gradient-to-r from-blue-500 via-purple-500 to-pink-500&quot; /&gt;&#10;        )}&#10;        &#10;        {/* Cover Photo Edit Button */}&#10;        {isOwnProfile &amp;&amp; (&#10;          &lt;button&#10;            onClick={onEditCover}&#10;            className=&quot;absolute bottom-4 right-4 bg-white bg-opacity-90 hover:bg-opacity-100 rounded-lg px-3 py-2 text-gray-700 font-medium transition-all duration-200 flex items-center space-x-2&quot;&#10;          &gt;&#10;            &lt;Camera className=&quot;h-4 w-4&quot; /&gt;&#10;            &lt;span className=&quot;text-sm&quot;&gt;Chỉnh sửa ảnh bìa&lt;/span&gt;&#10;          &lt;/button&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      {/* Profile Info Section */}&#10;      &lt;div className=&quot;px-6 pb-6&quot;&gt;&#10;        &lt;div className=&quot;flex flex-col lg:flex-row lg:items-end lg:justify-between -mt-20 relative&quot;&gt;&#10;          {/* Avatar and Basic Info */}&#10;          &lt;div className=&quot;flex flex-col sm:flex-row sm:items-end sm:space-x-5&quot;&gt;&#10;            {/* Avatar */}&#10;            &lt;div className=&quot;relative&quot;&gt;&#10;              &lt;div className=&quot;w-40 h-40 rounded-full border-4 border-white shadow-xl overflow-hidden bg-gray-200&quot;&gt;&#10;                {user.avatarUrl ? (&#10;                  &lt;img&#10;                    src={user.avatarUrl}&#10;                    alt={user.fullName || user.name || 'Avatar'}&#10;                    className=&quot;w-full h-full object-cover&quot;&#10;                  /&gt;&#10;                ) : (&#10;                  &lt;div className=&quot;w-full h-full bg-gradient-to-br from-blue-400 to-purple-600 flex items-center justify-center text-white text-4xl font-bold&quot;&gt;&#10;                    {(user.fullName || user.name || 'U').charAt(0).toUpperCase()}&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;              &#10;              {/* Avatar Edit Button */}&#10;              {isOwnProfile &amp;&amp; (&#10;                &lt;button&#10;                  onClick={onEditAvatar}&#10;                  className=&quot;absolute bottom-2 right-2 bg-gray-100 hover:bg-gray-200 rounded-full p-2 shadow-lg transition-colors&quot;&#10;                &gt;&#10;                  &lt;Camera className=&quot;h-4 w-4 text-gray-600&quot; /&gt;&#10;                &lt;/button&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;&#10;            {/* Name and Title */}&#10;            &lt;div className=&quot;mt-4 sm:mt-0 flex-1&quot;&gt;&#10;              &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;                &lt;h1 className=&quot;text-3xl font-bold text-gray-900 vietnamese-text&quot;&gt;&#10;                  {user.fullName || user.name || 'Người dùng'}&#10;                &lt;/h1&gt;&#10;                {user.isVerified &amp;&amp; (&#10;                  &lt;div className=&quot;w-6 h-6 bg-blue-500 rounded-full flex items-center justify-center&quot;&gt;&#10;                    &lt;svg className=&quot;w-4 h-4 text-white&quot; fill=&quot;currentColor&quot; viewBox=&quot;0 0 20 20&quot;&gt;&#10;                      &lt;path fillRule=&quot;evenodd&quot; d=&quot;M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z&quot; clipRule=&quot;evenodd&quot; /&gt;&#10;                    &lt;/svg&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;              &#10;              &lt;div className=&quot;flex items-center space-x-2 mt-1&quot;&gt;&#10;                &lt;span className={`px-3 py-1 rounded-full text-sm font-medium ${&#10;                  user.role === 'LECTURER' &#10;                    ? 'bg-blue-100 text-blue-700' &#10;                    : 'bg-green-100 text-green-700'&#10;                }`}&gt;&#10;                  {getRoleDisplay(user.role)}&#10;                &lt;/span&gt;&#10;                {user.isOnline &amp;&amp; (&#10;                  &lt;span className=&quot;flex items-center text-sm text-gray-500&quot;&gt;&#10;                    &lt;div className=&quot;w-2 h-2 bg-green-500 rounded-full mr-1&quot;&gt;&lt;/div&gt;&#10;                    Đang hoạt động&#10;                  &lt;/span&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;&#10;              {/* Quick Info */}&#10;              &lt;div className=&quot;flex flex-wrap items-center mt-3 text-sm text-gray-600 space-x-4&quot;&gt;&#10;                {user.role === 'STUDENT' &amp;&amp; user.major &amp;&amp; (&#10;                  &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;                    &lt;GraduationCap className=&quot;h-4 w-4&quot; /&gt;&#10;                    &lt;span&gt;{user.major.name}&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;                &#10;                {user.role === 'LECTURER' &amp;&amp; user.faculty &amp;&amp; (&#10;                  &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;                    &lt;Briefcase className=&quot;h-4 w-4&quot; /&gt;&#10;                    &lt;span&gt;{user.faculty.name}&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;                &#10;                {user.createdAt &amp;&amp; (&#10;                  &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;                    &lt;Calendar className=&quot;h-4 w-4&quot; /&gt;&#10;                    &lt;span&gt;Tham gia {formatTimeAgo(user.createdAt)}&lt;/span&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Action Buttons */}&#10;          &lt;div className=&quot;flex items-center space-x-3 mt-4 lg:mt-0&quot;&gt;&#10;            {isOwnProfile ? (&#10;              &lt;&gt;&#10;                &lt;Button&#10;                  onClick={onEditProfile}&#10;                  variant=&quot;outline&quot;&#10;                  className=&quot;flex items-center space-x-2&quot;&#10;                &gt;&#10;                  &lt;Edit3 className=&quot;h-4 w-4&quot; /&gt;&#10;                  &lt;span&gt;Chỉnh sửa trang cá nhân&lt;/span&gt;&#10;                &lt;/Button&gt;&#10;              &lt;/&gt;&#10;            ) : (&#10;              &lt;&gt;&#10;                &lt;Button&#10;                  onClick={onFollow}&#10;                  variant={isFollowing ? &quot;outline&quot; : &quot;primary&quot;}&#10;                  className=&quot;flex items-center space-x-2&quot;&#10;                &gt;&#10;                  &lt;UserPlus className=&quot;h-4 w-4&quot; /&gt;&#10;                  &lt;span&gt;{isFollowing ? 'Đang theo dõi' : 'Theo dõi'}&lt;/span&gt;&#10;                &lt;/Button&gt;&#10;                &#10;                &lt;Button&#10;                  onClick={onMessage}&#10;                  variant=&quot;outline&quot;&#10;                  className=&quot;flex items-center space-x-2&quot;&#10;                &gt;&#10;                  &lt;MessageCircle className=&quot;h-4 w-4&quot; /&gt;&#10;                  &lt;span&gt;Nhắn tin&lt;/span&gt;&#10;                &lt;/Button&gt;&#10;                &#10;                &lt;button className=&quot;p-2 hover:bg-gray-100 rounded-lg transition-colors&quot;&gt;&#10;                  &lt;MoreHorizontal className=&quot;h-5 w-5 text-gray-600&quot; /&gt;&#10;                &lt;/button&gt;&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Bio Section */}&#10;        {user.bio &amp;&amp; (&#10;          &lt;div className=&quot;mt-6 bg-gray-50 rounded-lg p-4&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold text-gray-900 mb-2&quot;&gt;Giới thiệu&lt;/h3&gt;&#10;            &lt;p className=&quot;text-gray-700 vietnamese-text leading-relaxed&quot;&gt;&#10;              {showFullBio || user.bio.length &lt;= 200 &#10;                ? user.bio &#10;                : `${user.bio.substring(0, 200)}...`&#10;              }&#10;            &lt;/p&gt;&#10;            {user.bio.length &gt; 200 &amp;&amp; (&#10;              &lt;button&#10;                onClick={() =&gt; setShowFullBio(!showFullBio)}&#10;                className=&quot;text-blue-600 hover:text-blue-700 font-medium mt-2&quot;&#10;              &gt;&#10;                {showFullBio ? 'Thu gọn' : 'Xem thêm'}&#10;              &lt;/button&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/components/profile/ProfilePhotoModal.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/components/profile/ProfilePhotoModal.tsx" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React, { useState } from 'react';&#10;import { User } from '@/types';&#10;import { Camera, X, Upload, Loader2 } from 'lucide-react';&#10;import { Button } from '@/components/ui/Button';&#10;import { Modal } from '@/components/ui/Modal';&#10;&#10;interface ProfilePhotoModalProps {&#10;  isOpen: boolean;&#10;  onClose: () =&gt; void;&#10;  user: User;&#10;  type: 'avatar' | 'cover';&#10;  onPhotoUpdate: (photoUrl: string) =&gt; void;&#10;}&#10;&#10;export const ProfilePhotoModal: React.FC&lt;ProfilePhotoModalProps&gt; = ({&#10;  isOpen,&#10;  onClose,&#10;  user,&#10;  type,&#10;  onPhotoUpdate&#10;}) =&gt; {&#10;  const [selectedFile, setSelectedFile] = useState&lt;File | null&gt;(null);&#10;  const [previewUrl, setPreviewUrl] = useState&lt;string | null&gt;(null);&#10;  const [isUploading, setIsUploading] = useState(false);&#10;&#10;  const handleFileSelect = (event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;    const file = event.target.files?.[0];&#10;    if (file) {&#10;      setSelectedFile(file);&#10;      const url = URL.createObjectURL(file);&#10;      setPreviewUrl(url);&#10;    }&#10;  };&#10;&#10;  const handleUpload = async () =&gt; {&#10;    if (!selectedFile) return;&#10;&#10;    setIsUploading(true);&#10;    try {&#10;      // TODO: Implement actual upload logic&#10;      // const uploadResult = await mediaService.uploadImage(selectedFile);&#10;      // onPhotoUpdate(uploadResult.url);&#10;      &#10;      // Mock upload for now&#10;      setTimeout(() =&gt; {&#10;        onPhotoUpdate(previewUrl || '');&#10;        setIsUploading(false);&#10;        onClose();&#10;        resetModal();&#10;      }, 2000);&#10;    } catch (error) {&#10;      console.error('Error uploading photo:', error);&#10;      setIsUploading(false);&#10;    }&#10;  };&#10;&#10;  const resetModal = () =&gt; {&#10;    setSelectedFile(null);&#10;    if (previewUrl) {&#10;      URL.revokeObjectURL(previewUrl);&#10;    }&#10;    setPreviewUrl(null);&#10;  };&#10;&#10;  const handleClose = () =&gt; {&#10;    if (!isUploading) {&#10;      resetModal();&#10;      onClose();&#10;    }&#10;  };&#10;&#10;  const title = type === 'avatar' ? 'Cập nhật ảnh đại diện' : 'Cập nhật ảnh bìa';&#10;  const aspectRatio = type === 'avatar' ? 'aspect-square' : 'aspect-[3/1]';&#10;&#10;  return (&#10;    &lt;Modal isOpen={isOpen} onClose={handleClose} title={title}&gt;&#10;      &lt;div className=&quot;space-y-6&quot;&gt;&#10;        {/* Current Photo */}&#10;        &lt;div className=&quot;text-center&quot;&gt;&#10;          &lt;h3 className=&quot;text-sm font-medium text-gray-900 mb-3 vietnamese-text&quot;&gt;&#10;            {type === 'avatar' ? 'Ảnh đại diện hiện tại' : 'Ảnh bìa hiện tại'}&#10;          &lt;/h3&gt;&#10;          &lt;div className={`mx-auto bg-gray-200 rounded-lg overflow-hidden ${&#10;            type === 'avatar' ? 'w-32 h-32 rounded-full' : 'w-full h-40'&#10;          }`}&gt;&#10;            {(type === 'avatar' ? user.avatarUrl : user.backgroundUrl) ? (&#10;              &lt;img&#10;                src={type === 'avatar' ? user.avatarUrl! : user.backgroundUrl!}&#10;                alt={title}&#10;                className=&quot;w-full h-full object-cover&quot;&#10;              /&gt;&#10;            ) : (&#10;              &lt;div className=&quot;w-full h-full bg-gradient-to-br from-blue-400 to-purple-600 flex items-center justify-center text-white text-2xl font-bold&quot;&gt;&#10;                {type === 'avatar' ? (user.fullName || user.name || 'U').charAt(0).toUpperCase() : ''}&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Preview New Photo */}&#10;        {previewUrl &amp;&amp; (&#10;          &lt;div className=&quot;text-center&quot;&gt;&#10;            &lt;h3 className=&quot;text-sm font-medium text-gray-900 mb-3 vietnamese-text&quot;&gt;&#10;              Xem trước&#10;            &lt;/h3&gt;&#10;            &lt;div className={`mx-auto bg-gray-200 rounded-lg overflow-hidden ${&#10;              type === 'avatar' ? 'w-32 h-32 rounded-full' : 'w-full h-40'&#10;            }`}&gt;&#10;              &lt;img&#10;                src={previewUrl}&#10;                alt=&quot;Preview&quot;&#10;                className=&quot;w-full h-full object-cover&quot;&#10;              /&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* File Upload */}&#10;        &lt;div className=&quot;border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-gray-400 transition-colors&quot;&gt;&#10;          &lt;input&#10;            type=&quot;file&quot;&#10;            accept=&quot;image/*&quot;&#10;            onChange={handleFileSelect}&#10;            className=&quot;hidden&quot;&#10;            id=&quot;photo-upload&quot;&#10;            disabled={isUploading}&#10;          /&gt;&#10;          &lt;label htmlFor=&quot;photo-upload&quot; className=&quot;cursor-pointer&quot;&gt;&#10;            &lt;Upload className=&quot;h-12 w-12 text-gray-400 mx-auto mb-4&quot; /&gt;&#10;            &lt;p className=&quot;text-sm text-gray-600 vietnamese-text&quot;&gt;&#10;              Nhấp để chọn ảnh hoặc kéo thả ảnh vào đây&#10;            &lt;/p&gt;&#10;            &lt;p className=&quot;text-xs text-gray-500 mt-1 vietnamese-text&quot;&gt;&#10;              Định dạng: JPG, PNG (Tối đa 10MB)&#10;            &lt;/p&gt;&#10;          &lt;/label&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Action Buttons */}&#10;        &lt;div className=&quot;flex justify-end space-x-3&quot;&gt;&#10;          &lt;Button&#10;            variant=&quot;outline&quot;&#10;            onClick={handleClose}&#10;            disabled={isUploading}&#10;          &gt;&#10;            Hủy&#10;          &lt;/Button&gt;&#10;          &lt;Button&#10;            onClick={handleUpload}&#10;            disabled={!selectedFile || isUploading}&#10;            className=&quot;flex items-center space-x-2&quot;&#10;          &gt;&#10;            {isUploading ? (&#10;              &lt;&gt;&#10;                &lt;Loader2 className=&quot;h-4 w-4 animate-spin&quot; /&gt;&#10;                &lt;span&gt;Đang tải lên...&lt;/span&gt;&#10;              &lt;/&gt;&#10;            ) : (&#10;              &lt;&gt;&#10;                &lt;Camera className=&quot;h-4 w-4&quot; /&gt;&#10;                &lt;span&gt;Cập nhật ảnh&lt;/span&gt;&#10;              &lt;/&gt;&#10;            )}&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/Modal&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/components/profile/ProfilePostFeed.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/components/profile/ProfilePostFeed.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import React, { useState, useEffect, useCallback } from 'react';&#10;import { Post, PaginatedResponse } from '@/types';&#10;import { postService } from '@/services/postService';&#10;import { PostCard } from '@/components/post/PostCard';&#10;import { LoadingSpinner } from '@/components/ui/LoadingSpinner';&#10;import { ErrorAlert } from '@/components/ui/ErrorAlert';&#10;import { Button } from '@/components/ui/Button';&#10;import { RefreshCw, FileText, Image, Video, Clock } from 'lucide-react';&#10;import { useAuth } from '@/contexts/AuthContext';&#10;&#10;interface ProfilePostFeedProps {&#10;  userId: string;&#10;  userName?: string;&#10;  isOwnProfile?: boolean;&#10;  className?: string;&#10;}&#10;&#10;export const ProfilePostFeed: React.FC&lt;ProfilePostFeedProps&gt; = ({&#10;  userId,&#10;  userName,&#10;  isOwnProfile = false,&#10;  className = ''&#10;}) =&gt; {&#10;  const [posts, setPosts] = useState&lt;Post[]&gt;([]);&#10;  const [isLoading, setIsLoading] = useState(true);&#10;  const [isLoadingMore, setIsLoadingMore] = useState(false);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [hasMore, setHasMore] = useState(true);&#10;  const [currentPage, setCurrentPage] = useState(0);&#10;  const [totalPosts, setTotalPosts] = useState(0);&#10;  const [activeFilter, setActiveFilter] = useState&lt;'all' | 'text' | 'image' | 'video'&gt;('all');&#10;  const {user} = useAuth();&#10;  const loadUserPosts = useCallback(async (page = 0, append = false, filter = 'all') =&gt; {&#10;    try {&#10;      if (!append) {&#10;        setIsLoading(true);&#10;        setError(null);&#10;      } else {&#10;        setIsLoadingMore(true);&#10;      }&#10;      let response;&#10;      // TODO: Replace with actual API call to get user posts&#10;      if (userId !== user?.id) {&#10;        response = await postService.getUserPosts(userId, page, 10, filter);&#10;      } else {&#10;        response = await postService.getMyPosts(page, 10);&#10;      }&#10;&#10;        const mockResponse: PaginatedResponse&lt;Post&gt; = response;&#10;      // Mock data for now - replace with actual API call&#10;      /*const mockResponse: PaginatedResponse&lt;Post&gt; = {&#10;        content: [],&#10;        totalElements: 0,&#10;        totalPages: 0,&#10;        size: 10,&#10;        number: page,&#10;        first: page === 0,&#10;        last: true&#10;      };*/&#10;&#10;      if (append) {&#10;        setPosts(prev =&gt; [...prev, ...mockResponse.content]);&#10;      } else {&#10;        setPosts(mockResponse.content);&#10;      }&#10;&#10;      setTotalPosts(mockResponse.totalElements);&#10;      setHasMore(!mockResponse.last);&#10;      setCurrentPage(mockResponse.number);&#10;&#10;    } catch (err: any) {&#10;      console.error('Error loading user posts:', err);&#10;      setError('Không thể tải bài viết của người dùng');&#10;    } finally {&#10;      setIsLoading(false);&#10;      setIsLoadingMore(false);&#10;    }&#10;  }, [userId]);&#10;&#10;  useEffect(() =&gt; {&#10;    loadUserPosts(0, false, activeFilter);&#10;  }, [loadUserPosts, activeFilter]);&#10;&#10;  const handleLoadMore = () =&gt; {&#10;    if (hasMore &amp;&amp; !isLoadingMore) {&#10;      loadUserPosts(currentPage + 1, true, activeFilter);&#10;    }&#10;  };&#10;&#10;  const handleRefresh = () =&gt; {&#10;    loadUserPosts(0, false, activeFilter);&#10;  };&#10;&#10;  const handleFilterChange = (filter: 'all' | 'text' | 'image' | 'video') =&gt; {&#10;    setActiveFilter(filter);&#10;    setCurrentPage(0);&#10;  };&#10;&#10;  const handlePostUpdate = (updatedPost: Post) =&gt; {&#10;    setPosts(prev =&gt; prev.map(post =&gt;&#10;      post.id === updatedPost.id ? updatedPost : post&#10;    ));&#10;  };&#10;&#10;  const handlePostDelete = (postId: string) =&gt; {&#10;    setPosts(prev =&gt; prev.filter(post =&gt; post.id !== postId));&#10;    setTotalPosts(prev =&gt; prev - 1);&#10;  };&#10;&#10;  const getFilterIcon = (filter: string) =&gt; {&#10;    switch (filter) {&#10;      case 'text': return &lt;FileText className=&quot;h-4 w-4&quot; /&gt;;&#10;      case 'image': return &lt;Image className=&quot;h-4 w-4&quot; /&gt;;&#10;      case 'video': return &lt;Video className=&quot;h-4 w-4&quot; /&gt;;&#10;      default: return &lt;Clock className=&quot;h-4 w-4&quot; /&gt;;&#10;    }&#10;  };&#10;&#10;  const getFilterLabel = (filter: string) =&gt; {&#10;    switch (filter) {&#10;      case 'text': return 'Văn bản';&#10;      case 'image': return 'Hình ảnh';&#10;      case 'video': return 'Video';&#10;      default: return 'Tất cả';&#10;    }&#10;  };&#10;&#10;  if (isLoading) {&#10;    return (&#10;      &lt;div className={`space-y-6 ${className}`}&gt;&#10;        &lt;div className=&quot;flex justify-center py-12&quot;&gt;&#10;          &lt;div className=&quot;text-center&quot;&gt;&#10;            &lt;LoadingSpinner size=&quot;lg&quot; /&gt;&#10;            &lt;p className=&quot;text-gray-600 mt-4 vietnamese-text&quot;&gt;&#10;              Đang tải bài viết...&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  if (error) {&#10;    return (&#10;      &lt;div className={`space-y-6 ${className}`}&gt;&#10;        &lt;ErrorAlert&#10;          message={error}&#10;          onRetry={handleRefresh}&#10;        /&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className={`space-y-6 ${className}`}&gt;&#10;      {/* Header with Stats and Filters */}&#10;      &lt;div className=&quot;bg-white rounded-lg shadow-sm p-6&quot;&gt;&#10;        &lt;div className=&quot;flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4&quot;&gt;&#10;          {/* Post Count */}&#10;          &lt;div&gt;&#10;            &lt;h2 className=&quot;text-xl font-bold text-gray-900 vietnamese-text&quot;&gt;&#10;              Bài viết của {isOwnProfile ? 'bạn' : (userName || 'người dùng')}&#10;            &lt;/h2&gt;&#10;            &lt;p className=&quot;text-sm text-gray-600 vietnamese-text&quot;&gt;&#10;              {totalPosts} bài viết&#10;            &lt;/p&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* Refresh Button */}&#10;          &lt;Button&#10;            variant=&quot;outline&quot;&#10;            onClick={handleRefresh}&#10;            className=&quot;flex items-center space-x-2&quot;&#10;            disabled={isLoading}&#10;          &gt;&#10;            &lt;RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} /&gt;&#10;            &lt;span className=&quot;vietnamese-text&quot;&gt;Làm mới&lt;/span&gt;&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Filter Tabs */}&#10;        &lt;div className=&quot;mt-6 border-b border-gray-200&quot;&gt;&#10;          &lt;nav className=&quot;flex space-x-8&quot;&gt;&#10;            {[&#10;              { key: 'all', label: 'Tất cả' },&#10;              { key: 'text', label: 'Văn bản' },&#10;              { key: 'image', label: 'Hình ảnh' },&#10;              { key: 'video', label: 'Video' }&#10;            ].map((filter) =&gt; (&#10;              &lt;button&#10;                key={filter.key}&#10;                onClick={() =&gt; handleFilterChange(filter.key as any)}&#10;                className={`py-2 px-1 border-b-2 font-medium text-sm vietnamese-text transition-colors flex items-center space-x-2 ${&#10;                  activeFilter === filter.key&#10;                    ? 'border-blue-500 text-blue-600'&#10;                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'&#10;                }`}&#10;              &gt;&#10;                {getFilterIcon(filter.key)}&#10;                &lt;span&gt;{filter.label}&lt;/span&gt;&#10;              &lt;/button&gt;&#10;            ))}&#10;          &lt;/nav&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Posts List */}&#10;      {posts.length === 0 ? (&#10;        &lt;div className=&quot;bg-white rounded-lg shadow-sm p-12 text-center&quot;&gt;&#10;          &lt;div className=&quot;text-gray-400 mb-4&quot;&gt;&#10;            &lt;FileText className=&quot;h-16 w-16 mx-auto&quot; /&gt;&#10;          &lt;/div&gt;&#10;          &lt;h3 className=&quot;text-lg font-medium text-gray-900 mb-2 vietnamese-text&quot;&gt;&#10;            {isOwnProfile ? 'Bạn chưa có bài viết nào' : 'Người dùng này chưa có bài viết nào'}&#10;          &lt;/h3&gt;&#10;          &lt;p className=&quot;text-gray-600 vietnamese-text&quot;&gt;&#10;            {isOwnProfile&#10;              ? 'Hãy tạo bài viết đầu tiên để chia sẻ với mọi người!'&#10;              : 'Hãy quay lại sau để xem bài viết mới nhất.'&#10;            }&#10;          &lt;/p&gt;&#10;          {isOwnProfile &amp;&amp; (&#10;            &lt;Button&#10;              className=&quot;mt-4&quot;&#10;              onClick={() =&gt; window.location.href = '/posts/create'}&#10;            &gt;&#10;              Tạo bài viết đầu tiên&#10;            &lt;/Button&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      ) : (&#10;        &lt;&gt;&#10;          {/* Posts */}&#10;          &lt;div className=&quot;space-y-6&quot;&gt;&#10;            {posts.map((post) =&gt; (&#10;              &lt;PostCard&#10;                key={post.id}&#10;                post={post}&#10;                onPostUpdate={handlePostUpdate}&#10;                onPostDelete={handlePostDelete}&#10;                className=&quot;shadow-sm hover:shadow-md transition-shadow&quot;&#10;              /&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;&#10;          {/* Load More Button */}&#10;          {hasMore &amp;&amp; (&#10;            &lt;div className=&quot;text-center pt-6&quot;&gt;&#10;              &lt;Button&#10;                variant=&quot;outline&quot;&#10;                onClick={handleLoadMore}&#10;                disabled={isLoadingMore}&#10;                className=&quot;px-8&quot;&#10;              &gt;&#10;                {isLoadingMore ? (&#10;                  &lt;&gt;&#10;                    &lt;LoadingSpinner size=&quot;sm&quot; className=&quot;mr-2&quot; /&gt;&#10;                    &lt;span className=&quot;vietnamese-text&quot;&gt;Đang tải...&lt;/span&gt;&#10;                  &lt;/&gt;&#10;                ) : (&#10;                  &lt;span className=&quot;vietnamese-text&quot;&gt;Xem thêm bài viết&lt;/span&gt;&#10;                )}&#10;              &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {/* End Message */}&#10;          {!hasMore &amp;&amp; posts.length &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;text-center py-8&quot;&gt;&#10;              &lt;p className=&quot;text-gray-500 vietnamese-text&quot;&gt;&#10;                Bạn đã xem hết tất cả bài viết&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#13;&#10;&#13;&#10;import React, { useState, useEffect, useCallback } from 'react';&#13;&#10;import { Post, PaginatedResponse } from '@/types';&#13;&#10;import { postService } from '@/services/postService';&#13;&#10;import { PostCard } from '@/components/post/PostCard';&#13;&#10;import { LoadingSpinner } from '@/components/ui/LoadingSpinner';&#13;&#10;import { ErrorAlert } from '@/components/ui/ErrorAlert';&#13;&#10;import { Button } from '@/components/ui/Button';&#13;&#10;import { RefreshCw, FileText, Image, Video, Clock } from 'lucide-react';&#13;&#10;import { useAuth } from '@/contexts/AuthContext';&#13;&#10;&#13;&#10;interface ProfilePostFeedProps {&#13;&#10;  userId: string;&#13;&#10;  userName?: string;&#13;&#10;  isOwnProfile?: boolean;&#13;&#10;  className?: string;&#13;&#10;}&#13;&#10;&#13;&#10;export const ProfilePostFeed: React.FC&lt;ProfilePostFeedProps&gt; = ({&#13;&#10;  userId,&#13;&#10;  userName,&#13;&#10;  isOwnProfile = false,&#13;&#10;  className = ''&#13;&#10;}) =&gt; {&#13;&#10;  const [posts, setPosts] = useState&lt;Post[]&gt;([]);&#13;&#10;  const [isLoading, setIsLoading] = useState(true);&#13;&#10;  const [isLoadingMore, setIsLoadingMore] = useState(false);&#13;&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#13;&#10;  const [hasMore, setHasMore] = useState(true);&#13;&#10;  const [currentPage, setCurrentPage] = useState(0);&#13;&#10;  const [totalPosts, setTotalPosts] = useState(0);&#13;&#10;  const [activeFilter, setActiveFilter] = useState&lt;'all' | 'text' | 'image' | 'video'&gt;('all');&#13;&#10;  const {user} = useAuth();&#13;&#10;  const loadUserPosts = useCallback(async (page = 0, append = false, filter = 'all') =&gt; {&#13;&#10;    try {&#13;&#10;      if (!append) {&#13;&#10;        setIsLoading(true);&#13;&#10;        setError(null);&#13;&#10;      } else {&#13;&#10;        setIsLoadingMore(true);&#13;&#10;      }&#13;&#10;&#13;&#10;      // Call the correct API endpoint based on whether it's own profile or not&#13;&#10;      let response: PaginatedResponse&lt;Post&gt;;&#13;&#10;      &#13;&#10;      if (isOwnProfile) {&#13;&#10;        // For own profile, use getMyPosts which calls /posts/me&#13;&#10;        response = await postService.getMyPosts(page, 10);&#13;&#10;      } else {&#13;&#10;        // For other users, we need to implement getUserPosts in postService&#13;&#10;        // For now, let's create a temporary implementation&#13;&#10;        const apiResponse = await fetch(`/api/posts/user/${userId}?page=${page}&amp;size=10`, {&#13;&#10;          headers: {&#13;&#10;            'Authorization': `Bearer ${localStorage.getItem('token')}`,&#13;&#10;            'Content-Type': 'application/json'&#13;&#10;          }&#13;&#10;        });&#13;&#10;        &#13;&#10;        if (!apiResponse.ok) {&#13;&#10;          throw new Error('Failed to fetch user posts');&#13;&#10;        }&#13;&#10;        &#13;&#10;        response = await apiResponse.json();&#13;&#10;      }&#13;&#10;&#13;&#10;      if (append) {&#13;&#10;        setPosts(prev =&gt; [...prev, ...response.content]);&#13;&#10;      } else {&#13;&#10;        setPosts(response.content);&#13;&#10;      }&#13;&#10;&#13;&#10;      setTotalPosts(response.totalElements);&#13;&#10;      setHasMore(!response.last);&#13;&#10;      setCurrentPage(response.number);&#13;&#10;&#13;&#10;    } catch (err: any) {&#13;&#10;      console.error('Error loading user posts:', err);&#13;&#10;      setError('Không thể tải bài viết của người dùng');&#13;&#10;    } finally {&#13;&#10;      setIsLoading(false);&#13;&#10;      setIsLoadingMore(false);&#13;&#10;    }&#13;&#10;  }, [userId, isOwnProfile]);&#13;&#10;&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    loadUserPosts(0, false, activeFilter);&#13;&#10;  }, [loadUserPosts, activeFilter]);&#13;&#10;&#13;&#10;  const handleLoadMore = () =&gt; {&#13;&#10;    if (hasMore &amp;&amp; !isLoadingMore) {&#13;&#10;      loadUserPosts(currentPage + 1, true, activeFilter);&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleRefresh = () =&gt; {&#13;&#10;    loadUserPosts(0, false, activeFilter);&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleFilterChange = (filter: 'all' | 'text' | 'image' | 'video') =&gt; {&#13;&#10;    setActiveFilter(filter);&#13;&#10;    setCurrentPage(0);&#13;&#10;  };&#13;&#10;&#13;&#10;  const handlePostUpdate = (updatedPost: Post) =&gt; {&#13;&#10;    setPosts(prev =&gt; prev.map(post =&gt;&#13;&#10;      post.id === updatedPost.id ? updatedPost : post&#13;&#10;    ));&#13;&#10;  };&#13;&#10;&#13;&#10;  const handlePostDelete = (postId: string) =&gt; {&#13;&#10;    setPosts(prev =&gt; prev.filter(post =&gt; post.id !== postId));&#13;&#10;    setTotalPosts(prev =&gt; prev - 1);&#13;&#10;  };&#13;&#10;&#13;&#10;  const getFilterIcon = (filter: string) =&gt; {&#13;&#10;    switch (filter) {&#13;&#10;      case 'text': return &lt;FileText className=&quot;h-4 w-4&quot; /&gt;;&#13;&#10;      case 'image': return &lt;Image className=&quot;h-4 w-4&quot; /&gt;;&#13;&#10;      case 'video': return &lt;Video className=&quot;h-4 w-4&quot; /&gt;;&#13;&#10;      default: return &lt;Clock className=&quot;h-4 w-4&quot; /&gt;;&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  const getFilterLabel = (filter: string) =&gt; {&#13;&#10;    switch (filter) {&#13;&#10;      case 'text': return 'Văn bản';&#13;&#10;      case 'image': return 'Hình ảnh';&#13;&#10;      case 'video': return 'Video';&#13;&#10;      default: return 'Tất cả';&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  if (isLoading) {&#13;&#10;    return (&#13;&#10;      &lt;div className={`space-y-6 ${className}`}&gt;&#13;&#10;        &lt;div className=&quot;flex justify-center py-12&quot;&gt;&#13;&#10;          &lt;div className=&quot;text-center&quot;&gt;&#13;&#10;            &lt;LoadingSpinner size=&quot;lg&quot; /&gt;&#13;&#10;            &lt;p className=&quot;text-gray-600 mt-4 vietnamese-text&quot;&gt;&#13;&#10;              Đang tải bài viết...&#13;&#10;            &lt;/p&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    );&#13;&#10;  }&#13;&#10;&#13;&#10;  if (error) {&#13;&#10;    return (&#13;&#10;      &lt;div className={`space-y-6 ${className}`}&gt;&#13;&#10;        &lt;ErrorAlert&#13;&#10;          message={error}&#13;&#10;          onRetry={handleRefresh}&#13;&#10;        /&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    );&#13;&#10;  }&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className={`space-y-6 ${className}`}&gt;&#13;&#10;      {/* Header with Stats and Filters */}&#13;&#10;      &lt;div className=&quot;bg-white rounded-lg shadow-sm p-6&quot;&gt;&#13;&#10;        &lt;div className=&quot;flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4&quot;&gt;&#13;&#10;          {/* Post Count */}&#13;&#10;          &lt;div&gt;&#13;&#10;            &lt;h2 className=&quot;text-xl font-bold text-gray-900 vietnamese-text&quot;&gt;&#13;&#10;              Bài viết của {isOwnProfile ? 'bạn' : (userName || 'người dùng')}&#13;&#10;            &lt;/h2&gt;&#13;&#10;            &lt;p className=&quot;text-sm text-gray-600 vietnamese-text&quot;&gt;&#13;&#10;              {totalPosts} bài viết&#13;&#10;            &lt;/p&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          {/* Refresh Button */}&#13;&#10;          &lt;Button&#13;&#10;            variant=&quot;outline&quot;&#13;&#10;            onClick={handleRefresh}&#13;&#10;            className=&quot;flex items-center space-x-2&quot;&#13;&#10;            disabled={isLoading}&#13;&#10;          &gt;&#13;&#10;            &lt;RefreshCw className={`h-4 w-4 ${isLoading ? 'animate-spin' : ''}`} /&gt;&#13;&#10;            &lt;span className=&quot;vietnamese-text&quot;&gt;Làm mới&lt;/span&gt;&#13;&#10;          &lt;/Button&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        {/* Filter Tabs */}&#13;&#10;        &lt;div className=&quot;mt-6 border-b border-gray-200&quot;&gt;&#13;&#10;          &lt;nav className=&quot;flex space-x-8&quot;&gt;&#13;&#10;            {[&#13;&#10;              { key: 'all', label: 'Tất cả' },&#13;&#10;              { key: 'text', label: 'Văn bản' },&#13;&#10;              { key: 'image', label: 'Hình ảnh' },&#13;&#10;              { key: 'video', label: 'Video' }&#13;&#10;            ].map((filter) =&gt; (&#13;&#10;              &lt;button&#13;&#10;                key={filter.key}&#13;&#10;                onClick={() =&gt; handleFilterChange(filter.key as any)}&#13;&#10;                className={`py-2 px-1 border-b-2 font-medium text-sm vietnamese-text transition-colors flex items-center space-x-2 ${&#13;&#10;                  activeFilter === filter.key&#13;&#10;                    ? 'border-blue-500 text-blue-600'&#13;&#10;                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'&#13;&#10;                }`}&#13;&#10;              &gt;&#13;&#10;                {getFilterIcon(filter.key)}&#13;&#10;                &lt;span&gt;{filter.label}&lt;/span&gt;&#13;&#10;              &lt;/button&gt;&#13;&#10;            ))}&#13;&#10;          &lt;/nav&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;&#13;&#10;      {/* Posts List */}&#13;&#10;      {posts.length === 0 ? (&#13;&#10;        &lt;div className=&quot;bg-white rounded-lg shadow-sm p-12 text-center&quot;&gt;&#13;&#10;          &lt;div className=&quot;text-gray-400 mb-4&quot;&gt;&#13;&#10;            &lt;FileText className=&quot;h-16 w-16 mx-auto&quot; /&gt;&#13;&#10;          &lt;/div&gt;&#13;&#10;          &lt;h3 className=&quot;text-lg font-medium text-gray-900 mb-2 vietnamese-text&quot;&gt;&#13;&#10;            {isOwnProfile ? 'Bạn chưa có bài viết nào' : 'Người dùng này chưa có bài viết nào'}&#13;&#10;          &lt;/h3&gt;&#13;&#10;          &lt;p className=&quot;text-gray-600 vietnamese-text&quot;&gt;&#13;&#10;            {isOwnProfile&#13;&#10;              ? 'Hãy tạo bài viết đầu tiên để chia sẻ với mọi người!'&#13;&#10;              : 'Hãy quay lại sau để xem bài viết mới nhất.'&#13;&#10;            }&#13;&#10;          &lt;/p&gt;&#13;&#10;          {isOwnProfile &amp;&amp; (&#13;&#10;            &lt;Button&#13;&#10;              className=&quot;mt-4&quot;&#13;&#10;              onClick={() =&gt; window.location.href = '/posts/create'}&#13;&#10;            &gt;&#13;&#10;              Tạo bài viết đầu tiên&#13;&#10;            &lt;/Button&gt;&#13;&#10;          )}&#13;&#10;        &lt;/div&gt;&#13;&#10;      ) : (&#13;&#10;        &lt;&gt;&#13;&#10;          {/* Posts */}&#13;&#10;          &lt;div className=&quot;space-y-6&quot;&gt;&#13;&#10;            {posts.map((post) =&gt; (&#13;&#10;              &lt;PostCard&#13;&#10;                key={post.id}&#13;&#10;                post={post}&#13;&#10;                onPostUpdate={handlePostUpdate}&#13;&#10;                onPostDelete={handlePostDelete}&#13;&#10;                className=&quot;shadow-sm hover:shadow-md transition-shadow&quot;&#13;&#10;              /&gt;&#13;&#10;            ))}&#13;&#10;          &lt;/div&gt;&#13;&#10;&#13;&#10;          {/* Load More Button */}&#13;&#10;          {hasMore &amp;&amp; (&#13;&#10;            &lt;div className=&quot;text-center pt-6&quot;&gt;&#13;&#10;              &lt;Button&#13;&#10;                variant=&quot;outline&quot;&#13;&#10;                onClick={handleLoadMore}&#13;&#10;                disabled={isLoadingMore}&#13;&#10;                className=&quot;px-8&quot;&#13;&#10;              &gt;&#13;&#10;                {isLoadingMore ? (&#13;&#10;                  &lt;&gt;&#13;&#10;                    &lt;LoadingSpinner size=&quot;sm&quot; className=&quot;mr-2&quot; /&gt;&#13;&#10;                    &lt;span className=&quot;vietnamese-text&quot;&gt;Đang tải...&lt;/span&gt;&#13;&#10;                  &lt;/&gt;&#13;&#10;                ) : (&#13;&#10;                  &lt;span className=&quot;vietnamese-text&quot;&gt;Xem thêm bài viết&lt;/span&gt;&#13;&#10;                )}&#13;&#10;              &lt;/Button&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          )}&#13;&#10;&#13;&#10;          {/* End Message */}&#13;&#10;          {!hasMore &amp;&amp; posts.length &gt; 0 &amp;&amp; (&#13;&#10;            &lt;div className=&quot;text-center py-8&quot;&gt;&#13;&#10;              &lt;p className=&quot;text-gray-500 vietnamese-text&quot;&gt;&#13;&#10;                Bạn đã xem hết tất cả bài viết&#13;&#10;              &lt;/p&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          )}&#13;&#10;        &lt;/&gt;&#13;&#10;      )}&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/components/profile/ProfileStats.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/components/profile/ProfileStats.tsx" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React from 'react';&#10;import { Users, FileText, Heart, Eye } from 'lucide-react';&#10;&#10;interface ProfileStatsProps {&#10;  stats: {&#10;    posts?: number;&#10;    followers?: number;&#10;    following?: number;&#10;    likes?: number;&#10;    views?: number;&#10;  };&#10;  onStatsClick?: (type: 'posts' | 'followers' | 'following') =&gt; void;&#10;}&#10;&#10;export const ProfileStats: React.FC&lt;ProfileStatsProps&gt; = ({ stats, onStatsClick }) =&gt; {&#10;  const formatNumber = (num: number): string =&gt; {&#10;    if (num &gt;= 1000000) return `${(num / 1000000).toFixed(1)}M`;&#10;    if (num &gt;= 1000) return `${(num / 1000).toFixed(1)}K`;&#10;    return num.toString();&#10;  };&#10;&#10;  const statItems = [&#10;    {&#10;      key: 'posts' as const,&#10;      label: 'Bài viết',&#10;      value: stats.posts || 0,&#10;      icon: &lt;FileText className=&quot;h-5 w-5 text-blue-500&quot; /&gt;,&#10;      clickable: true&#10;    },&#10;    {&#10;      key: 'followers' as const,&#10;      label: 'Người theo dõi',&#10;      value: stats.followers || 0,&#10;      icon: &lt;Users className=&quot;h-5 w-5 text-green-500&quot; /&gt;,&#10;      clickable: true&#10;    },&#10;    {&#10;      key: 'following' as const,&#10;      label: 'Đang theo dõi',&#10;      value: stats.following || 0,&#10;      icon: &lt;Users className=&quot;h-5 w-5 text-purple-500&quot; /&gt;,&#10;      clickable: true&#10;    },&#10;    {&#10;      key: 'likes' as const,&#10;      label: 'Lượt thích',&#10;      value: stats.likes || 0,&#10;      icon: &lt;Heart className=&quot;h-5 w-5 text-red-500&quot; /&gt;,&#10;      clickable: false&#10;    },&#10;    {&#10;      key: 'views' as const,&#10;      label: 'Lượt xem',&#10;      value: stats.views || 0,&#10;      icon: &lt;Eye className=&quot;h-5 w-5 text-gray-500&quot; /&gt;,&#10;      clickable: false&#10;    }&#10;  ];&#10;&#10;  return (&#10;    &lt;div className=&quot;bg-white rounded-lg shadow-sm p-6&quot;&gt;&#10;      &lt;h2 className=&quot;text-xl font-bold text-gray-900 mb-6 vietnamese-text&quot;&gt;Thống kê&lt;/h2&gt;&#10;      &#10;      &lt;div className=&quot;grid grid-cols-2 lg:grid-cols-5 gap-4&quot;&gt;&#10;        {statItems.map((item) =&gt; (&#10;          &lt;div&#10;            key={item.key}&#10;            className={`text-center p-4 rounded-lg border ${&#10;              item.clickable &#10;                ? 'cursor-pointer hover:bg-gray-50 hover:border-gray-300 transition-all duration-200' &#10;                : 'bg-gray-50'&#10;            }`}&#10;            onClick={item.clickable ? () =&gt; onStatsClick?.(item.key) : undefined}&#10;          &gt;&#10;            &lt;div className=&quot;flex justify-center mb-2&quot;&gt;&#10;              {item.icon}&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;text-2xl font-bold text-gray-900 mb-1&quot;&gt;&#10;              {formatNumber(item.value)}&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;text-sm text-gray-600 vietnamese-text&quot;&gt;&#10;              {item.label}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/components/profile/StudentProfileInfo.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/components/profile/StudentProfileInfo.tsx" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React from 'react';&#10;import { User } from '@/types';&#10;import { &#10;  GraduationCap, &#10;  BookOpen, &#10;  Calendar, &#10;  Users, &#10;  MapPin,&#10;  Award,&#10;  Hash&#10;} from 'lucide-react';&#10;&#10;interface StudentProfileInfoProps {&#10;  user: User;&#10;}&#10;&#10;export const StudentProfileInfo: React.FC&lt;StudentProfileInfoProps&gt; = ({ user }) =&gt; {&#10;  const infoSections = [&#10;    {&#10;      title: 'Thông tin học tập',&#10;      icon: &lt;GraduationCap className=&quot;h-5 w-5 text-blue-500&quot; /&gt;,&#10;      items: [&#10;        user.studentId &amp;&amp; { label: 'Mã số sinh viên', value: user.studentId, icon: &lt;Hash className=&quot;h-4 w-4&quot; /&gt; },&#10;        user.major &amp;&amp; { label: 'Ngành học', value: user.major.name, icon: &lt;BookOpen className=&quot;h-4 w-4&quot; /&gt; },&#10;        user.faculty &amp;&amp; { label: 'Khoa', value: user.faculty.name, icon: &lt;Award className=&quot;h-4 w-4&quot; /&gt; },&#10;        user.college &amp;&amp; { label: 'Trường', value: user.college.name, icon: &lt;MapPin className=&quot;h-4 w-4&quot; /&gt; },&#10;        user.yearOfStudy &amp;&amp; { label: 'Năm học', value: `Năm ${user.yearOfStudy}`, icon: &lt;Calendar className=&quot;h-4 w-4&quot; /&gt; },&#10;        user.batch &amp;&amp; { label: 'Khóa', value: `Khóa ${user.batch.year}`, icon: &lt;Users className=&quot;h-4 w-4&quot; /&gt; },&#10;      ].filter(Boolean)&#10;    }&#10;  ];&#10;&#10;  return (&#10;    &lt;div className=&quot;bg-white rounded-lg shadow-sm p-6&quot;&gt;&#10;      &lt;h2 className=&quot;text-xl font-bold text-gray-900 mb-6 vietnamese-text&quot;&gt;Thông tin cá nhân&lt;/h2&gt;&#10;      &#10;      &lt;div className=&quot;space-y-6&quot;&gt;&#10;        {infoSections.map((section, sectionIndex) =&gt; (&#10;          &lt;div key={sectionIndex}&gt;&#10;            &lt;div className=&quot;flex items-center space-x-2 mb-4&quot;&gt;&#10;              {section.icon}&#10;              &lt;h3 className=&quot;font-semibold text-gray-800 vietnamese-text&quot;&gt;{section.title}&lt;/h3&gt;&#10;            &lt;/div&gt;&#10;            &#10;            &lt;div className=&quot;space-y-3&quot;&gt;&#10;              {section.items.map((item, itemIndex) =&gt; (&#10;                &lt;div key={itemIndex} className=&quot;flex items-center space-x-3 p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors&quot;&gt;&#10;                  &lt;div className=&quot;text-gray-500&quot;&gt;&#10;                    {item.icon}&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;flex-1&quot;&gt;&#10;                    &lt;div className=&quot;text-sm text-gray-600 vietnamese-text&quot;&gt;{item.label}&lt;/div&gt;&#10;                    &lt;div className=&quot;font-medium text-gray-900 vietnamese-text&quot;&gt;{item.value}&lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        ))}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/components/ui/ReactionButton.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/components/ui/ReactionButton.tsx" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React, { useState, useRef, useEffect } from 'react';&#10;import { ThumbsUp } from 'lucide-react';&#10;import { ReactionPicker, REACTIONS } from './ReactionPicker';&#10;&#10;interface ReactionButtonProps {&#10;  onReactionClick: (reactionId: string) =&gt; void;&#10;  onReactionRemove: () =&gt; void;&#10;  currentReaction?: string | null;&#10;  reactionCounts?: { [key: string]: number };&#10;  disabled?: boolean;&#10;  size?: 'sm' | 'md' | 'lg';&#10;  showPicker?: boolean;&#10;}&#10;&#10;export const ReactionButton: React.FC&lt;ReactionButtonProps&gt; = ({&#10;  onReactionClick,&#10;  onReactionRemove,&#10;  currentReaction,&#10;  reactionCounts = {},&#10;  disabled = false,&#10;  size = 'md',&#10;  showPicker = true&#10;}) =&gt; {&#10;  const [showReactionPicker, setShowReactionPicker] = useState(false);&#10;  const [isLongPress, setIsLongPress] = useState(false);&#10;  const timeoutRef = useRef&lt;NodeJS.Timeout&gt;();&#10;  const pickerRef = useRef&lt;HTMLDivElement&gt;(null);&#10;&#10;  const currentReactionData = REACTIONS.find(r =&gt; r.id === currentReaction);&#10;  const totalReactions = Object.values(reactionCounts).reduce((sum, count) =&gt; sum + count, 0);&#10;&#10;  // Handle click outside to close picker&#10;  useEffect(() =&gt; {&#10;    const handleClickOutside = (event: MouseEvent) =&gt; {&#10;      if (pickerRef.current &amp;&amp; !pickerRef.current.contains(event.target as Node)) {&#10;        setShowReactionPicker(false);&#10;      }&#10;    };&#10;&#10;    if (showReactionPicker) {&#10;      document.addEventListener('mousedown', handleClickOutside);&#10;    }&#10;&#10;    return () =&gt; {&#10;      document.removeEventListener('mousedown', handleClickOutside);&#10;    };&#10;  }, [showReactionPicker]);&#10;&#10;  const handleMouseDown = () =&gt; {&#10;    if (!showPicker) return;&#10;    &#10;    timeoutRef.current = setTimeout(() =&gt; {&#10;      setIsLongPress(true);&#10;      setShowReactionPicker(true);&#10;    }, 500); // 500ms for long press&#10;  };&#10;&#10;  const handleMouseUp = () =&gt; {&#10;    if (timeoutRef.current) {&#10;      clearTimeout(timeoutRef.current);&#10;    }&#10;    &#10;    if (!isLongPress) {&#10;      // Quick click - toggle like or remove current reaction&#10;      if (currentReaction) {&#10;        onReactionRemove();&#10;      } else {&#10;        onReactionClick('LIKE');&#10;      }&#10;    }&#10;    &#10;    setIsLongPress(false);&#10;  };&#10;&#10;  const handleMouseLeave = () =&gt; {&#10;    if (timeoutRef.current) {&#10;      clearTimeout(timeoutRef.current);&#10;    }&#10;    setIsLongPress(false);&#10;  };&#10;&#10;  const handleReactionSelect = (reactionId: string) =&gt; {&#10;    onReactionClick(reactionId);&#10;    setShowReactionPicker(false);&#10;  };&#10;&#10;  const buttonSizes = {&#10;    sm: 'px-2 py-1 text-xs',&#10;    md: 'px-3 py-2 text-sm',&#10;    lg: 'px-4 py-2 text-base'&#10;  };&#10;&#10;  const iconSizes = {&#10;    sm: 'h-3 w-3',&#10;    md: 'h-4 w-4',&#10;    lg: 'h-5 w-5'&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;relative&quot; ref={pickerRef}&gt;&#10;      &lt;button&#10;        onMouseDown={handleMouseDown}&#10;        onMouseUp={handleMouseUp}&#10;        onMouseLeave={handleMouseLeave}&#10;        onTouchStart={handleMouseDown}&#10;        onTouchEnd={handleMouseUp}&#10;        disabled={disabled}&#10;        className={`&#10;          flex items-center space-x-2 rounded-lg font-medium transition-all duration-200&#10;          ${buttonSizes[size]}&#10;          ${currentReaction &#10;            ? `${currentReactionData?.color} bg-blue-50 hover:bg-blue-100` &#10;            : 'text-gray-600 hover:bg-gray-50 hover:text-blue-600'&#10;          }&#10;          ${disabled ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}&#10;        `}&#10;      &gt;&#10;        {currentReactionData ? (&#10;          &lt;&gt;&#10;            &lt;span className={iconSizes[size]}&gt;{currentReactionData.emoji}&lt;/span&gt;&#10;            &lt;span className=&quot;vietnamese-text&quot;&gt;{currentReactionData.name}&lt;/span&gt;&#10;          &lt;/&gt;&#10;        ) : (&#10;          &lt;&gt;&#10;            &lt;ThumbsUp className={iconSizes[size]} /&gt;&#10;            &lt;span className=&quot;vietnamese-text&quot;&gt;Thích&lt;/span&gt;&#10;          &lt;/&gt;&#10;        )}&#10;        &#10;        {totalReactions &gt; 0 &amp;&amp; (&#10;          &lt;span className=&quot;ml-1 text-xs bg-white rounded-full px-1 min-w-[20px] text-center&quot;&gt;&#10;            {totalReactions}&#10;          &lt;/span&gt;&#10;        )}&#10;      &lt;/button&gt;&#10;&#10;      {/* Reaction Picker */}&#10;      {showPicker &amp;&amp; showReactionPicker &amp;&amp; (&#10;        &lt;div className=&quot;absolute bottom-full left-0 mb-2 z-50&quot;&gt;&#10;          &lt;ReactionPicker &#10;            onReactionClick={handleReactionSelect}&#10;            currentReaction={currentReaction}&#10;            size={size}&#10;          /&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {/* Reaction Count Summary */}&#10;      {totalReactions &gt; 0 &amp;&amp; (&#10;        &lt;div className=&quot;absolute -top-2 -right-2 bg-white rounded-full shadow-sm border border-gray-200 px-1 min-w-[20px] text-center&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;            {Object.entries(reactionCounts)&#10;              .filter(([_, count]) =&gt; count &gt; 0)&#10;              .slice(0, 3)&#10;              .map(([reactionId, count]) =&gt; {&#10;                const reaction = REACTIONS.find(r =&gt; r.id === reactionId);&#10;                return reaction ? (&#10;                  &lt;span key={reactionId} className=&quot;text-xs&quot; title={`${count} ${reaction.name}`}&gt;&#10;                    {reaction.emoji}&#10;                  &lt;/span&gt;&#10;                ) : null;&#10;              })}&#10;            &lt;span className=&quot;text-xs text-gray-600 font-medium&quot;&gt;&#10;              {totalReactions}&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/div&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/components/ui/ReactionPicker.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/components/ui/ReactionPicker.tsx" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React from 'react';&#10;import { Heart, ThumbsUp, Laugh, Frown, Angry, Surprise } from 'lucide-react';&#10;&#10;export interface ReactionType {&#10;  id: string;&#10;  name: string;&#10;  emoji: string;&#10;  icon: React.ReactNode;&#10;  color: string;&#10;  hoverColor: string;&#10;}&#10;&#10;export const REACTIONS: ReactionType[] = [&#10;  {&#10;    id: 'LIKE',&#10;    name: 'Thích',&#10;    emoji: '',&#10;    icon: &lt;ThumbsUp className=&quot;w-6 h-6&quot; /&gt;,&#10;    color: 'text-blue-600',&#10;    hoverColor: 'hover:bg-blue-50'&#10;  },&#10;  {&#10;    id: 'LOVE',&#10;    name: 'Yêu thích',&#10;    emoji: '❤️',&#10;    icon: &lt;Heart className=&quot;w-6 h-6&quot; /&gt;,&#10;    color: 'text-red-600',&#10;    hoverColor: 'hover:bg-red-50'&#10;  },&#10;  {&#10;    id: 'HAHA',&#10;    name: 'Haha',&#10;    emoji: '',&#10;    icon: &lt;Laugh className=&quot;w-6 h-6&quot; /&gt;,&#10;    color: 'text-yellow-600',&#10;    hoverColor: 'hover:bg-yellow-50'&#10;  },&#10;  {&#10;    id: 'WOW',&#10;    name: 'Wow',&#10;    emoji: '',&#10;    icon: &lt;Surprise className=&quot;w-6 h-6&quot; /&gt;,&#10;    color: 'text-orange-600',&#10;    hoverColor: 'hover:bg-orange-50'&#10;  },&#10;  {&#10;    id: 'SAD',&#10;    name: 'Buồn',&#10;    emoji: '',&#10;    icon: &lt;Frown className=&quot;w-6 h-6&quot; /&gt;,&#10;    color: 'text-yellow-700',&#10;    hoverColor: 'hover:bg-yellow-50'&#10;  },&#10;  {&#10;    id: 'ANGRY',&#10;    name: 'Phẫn nộ',&#10;    emoji: '',&#10;    icon: &lt;Angry className=&quot;w-6 h-6&quot; /&gt;,&#10;    color: 'text-red-700',&#10;    hoverColor: 'hover:bg-red-50'&#10;  }&#10;];&#10;&#10;interface ReactionPickerProps {&#10;  onReactionClick: (reactionId: string) =&gt; void;&#10;  currentReaction?: string | null;&#10;  size?: 'sm' | 'md' | 'lg';&#10;}&#10;&#10;export const ReactionPicker: React.FC&lt;ReactionPickerProps&gt; = ({&#10;  onReactionClick,&#10;  currentReaction,&#10;  size = 'md'&#10;}) =&gt; {&#10;  const sizeClasses = {&#10;    sm: 'p-1',&#10;    md: 'p-2',&#10;    lg: 'p-3'&#10;  };&#10;&#10;  const emojiSizes = {&#10;    sm: 'text-lg',&#10;    md: 'text-xl',&#10;    lg: 'text-2xl'&#10;  };&#10;&#10;  return (&#10;    &lt;div className=&quot;bg-white rounded-full shadow-lg border border-gray-200 flex items-center space-x-1 px-2 py-1 animate-fadeIn&quot;&gt;&#10;      {REACTIONS.map((reaction) =&gt; (&#10;        &lt;button&#10;          key={reaction.id}&#10;          onClick={() =&gt; onReactionClick(reaction.id)}&#10;          className={`&#10;            ${sizeClasses[size]} &#10;            ${reaction.hoverColor} &#10;            rounded-full transition-all duration-200 transform hover:scale-110&#10;            ${currentReaction === reaction.id ? 'bg-blue-50 ring-2 ring-blue-300' : ''}&#10;          `}&#10;          title={reaction.name}&#10;        &gt;&#10;          &lt;span className={`${emojiSizes[size]} block`}&gt;&#10;            {reaction.emoji}&#10;          &lt;/span&gt;&#10;        &lt;/button&gt;&#10;      ))}&#10;    &lt;/div&gt;&#10;  );&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/components/user/UserProfile.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/components/user/UserProfile.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import React, { useState, useEffect } from 'react';&#10;import { useAuth } from '@/contexts/AuthContext';&#10;import { User, Post } from '@/types';&#10;import { userService } from '@/services/userService';&#10;import { postService } from '@/services/postService';&#10;import { ProfileHeader } from '@/components/profile/ProfileHeader';&#10;import { ProfileStats } from '@/components/profile/ProfileStats';&#10;import { StudentProfileInfo } from '@/components/profile/StudentProfileInfo';&#10;import { LecturerProfileInfo } from '@/components/profile/LecturerProfileInfo';&#10;import { ProfilePostFeed } from '@/components/profile/ProfilePostFeed';&#10;import { LoadingSpinner } from '@/components/ui/LoadingSpinner';&#10;import { ErrorAlert } from '@/components/ui/ErrorAlert';&#10;&#10;interface UserProfileProps {&#10;  userId: string;&#10;}&#10;&#10;const UserProfile: React.FC&lt;UserProfileProps&gt; = ({ userId }) =&gt; {&#10;  const { user: currentUser } = useAuth();&#10;  const [profileUser, setProfileUser] = useState&lt;User | null&gt;(null);&#10;  const [userPosts, setUserPosts] = useState&lt;Post[]&gt;([]);&#10;  const [isLoading, setIsLoading] = useState(true);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [isFollowing, setIsFollowing] = useState(false);&#10;  const [activeTab, setActiveTab] = useState&lt;'posts' | 'about' | 'photos' | 'videos'&gt;('posts');&#10;  const [stats, setStats] = useState({&#10;    posts: 0,&#10;    followers: 0,&#10;    following: 0,&#10;    likes: 0,&#10;    views: 0&#10;  });&#10;&#10;  const isOwnProfile = currentUser?.id === userId;&#10;&#10;  useEffect(() =&gt; {&#10;    loadUserProfile();&#10;    if (userId) {&#10;      loadUserPosts();&#10;      loadUserStats();&#10;    }&#10;  }, [userId]);&#10;&#10;  const loadUserProfile = async () =&gt; {&#10;    try {&#10;      setIsLoading(true);&#10;      const user = await userService.getMyProfile();&#10;      setProfileUser(user);&#10;&#10;      // Check if current user is following this user&#10;      if (!isOwnProfile &amp;&amp; currentUser) {&#10;        // TODO: Implement follow status check&#10;        // const followStatus = await userService.getFollowStatus(userId);&#10;        // setIsFollowing(followStatus.isFollowing);&#10;      }&#10;    } catch (err) {&#10;      setError('Không thể tải thông tin người dùng');&#10;      console.error('Error loading user profile:', err);&#10;    } finally {&#10;      setIsLoading(false);&#10;    }&#10;  };&#10;&#10;  const loadUserPosts = async () =&gt; {&#10;    try {&#10;      // TODO: Implement user-specific posts loading&#10;      //  const posts = await postService.getMyPosts();&#10;      // setUserPosts(posts);&#10;      setUserPosts([]); // Temporary empty array&#10;    } catch (err) {&#10;      console.error('Error loading user posts:', err);&#10;    }&#10;  };&#10;&#10;  const loadUserStats = async () =&gt; {&#10;    try {&#10;      // TODO: Implement stats loading from backend&#10;      // For now, using mock data&#10;      setStats({&#10;        posts: Math.floor(Math.random() * 100),&#10;        followers: Math.floor(Math.random() * 1000),&#10;        following: Math.floor(Math.random() * 500),&#10;        likes: Math.floor(Math.random() * 5000),&#10;        views: Math.floor(Math.random() * 10000)&#10;      });&#10;    } catch (err) {&#10;      console.error('Error loading user stats:', err);&#10;    }&#10;  };&#10;&#10;  const handleFollow = async () =&gt; {&#10;    try {&#10;      if (isFollowing) {&#10;        await userService.unfollowUser(userId);&#10;        setIsFollowing(false);&#10;        setStats(prev =&gt; ({ ...prev, followers: prev.followers - 1 }));&#10;      } else {&#10;        await userService.followUser(userId);&#10;        setIsFollowing(true);&#10;        setStats(prev =&gt; ({ ...prev, followers: prev.followers + 1 }));&#10;      }&#10;    } catch (err) {&#10;      console.error('Error updating follow status:', err);&#10;    }&#10;  };&#10;&#10;  const handleMessage = () =&gt; {&#10;    // TODO: Implement messaging functionality&#10;    console.log('Open chat with user:', userId);&#10;  };&#10;&#10;  const handleEditProfile = () =&gt; {&#10;    // TODO: Implement profile editing&#10;    console.log('Edit profile');&#10;  };&#10;&#10;  const handleEditCover = () =&gt; {&#10;    // TODO: Implement cover photo editing&#10;    console.log('Edit cover photo');&#10;  };&#10;&#10;  const handleEditAvatar = () =&gt; {&#10;    // TODO: Implement avatar editing&#10;    console.log('Edit avatar');&#10;  };&#10;&#10;  const handleStatsClick = (type: 'posts' | 'followers' | 'following') =&gt; {&#10;    switch (type) {&#10;      case 'posts':&#10;        setActiveTab('posts');&#10;        break;&#10;      case 'followers':&#10;        // TODO: Show followers modal/page&#10;        console.log('Show followers');&#10;        break;&#10;      case 'following':&#10;        // TODO: Show following modal/page&#10;        console.log('Show following');&#10;        break;&#10;    }&#10;  };&#10;&#10;  if (isLoading) {&#10;    return (&#10;      &lt;div className=&quot;max-w-4xl mx-auto p-4&quot;&gt;&#10;        &lt;div className=&quot;flex justify-center items-center h-64&quot;&gt;&#10;          &lt;LoadingSpinner size=&quot;lg&quot; /&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  if (error || !profileUser) {&#10;    return (&#10;      &lt;div className=&quot;max-w-4xl mx-auto p-4&quot;&gt;&#10;        &lt;ErrorAlert message={error || 'Không tìm thấy người dùng'} /&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;max-w-6xl mx-auto p-4 space-y-6&quot;&gt;&#10;      {/* Profile Header */}&#10;      &lt;ProfileHeader&#10;        user={profileUser}&#10;        isOwnProfile={isOwnProfile}&#10;        isFollowing={isFollowing}&#10;        onFollow={handleFollow}&#10;        onMessage={handleMessage}&#10;        onEditProfile={handleEditProfile}&#10;        onEditCover={handleEditCover}&#10;        onEditAvatar={handleEditAvatar}&#10;      /&gt;&#10;&#10;      {/* Profile Stats */}&#10;      &lt;ProfileStats&#10;        stats={stats}&#10;        onStatsClick={handleStatsClick}&#10;      /&gt;&#10;&#10;      {/* Navigation Tabs */}&#10;      &lt;div className=&quot;bg-white rounded-lg shadow-sm&quot;&gt;&#10;        &lt;div className=&quot;border-b border-gray-200&quot;&gt;&#10;          &lt;nav className=&quot;flex space-x-8 px-6&quot;&gt;&#10;            {[&#10;              { key: 'posts', label: 'Bài viết' },&#10;              { key: 'about', label: 'Giới thiệu' },&#10;              { key: 'photos', label: 'Ảnh' },&#10;              { key: 'videos', label: 'Video' }&#10;            ].map((tab) =&gt; (&#10;              &lt;button&#10;                key={tab.key}&#10;                onClick={() =&gt; setActiveTab(tab.key as any)}&#10;                className={`py-4 px-1 border-b-2 font-medium text-sm vietnamese-text transition-colors ${&#10;                  activeTab === tab.key&#10;                    ? 'border-blue-500 text-blue-600'&#10;                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'&#10;                }`}&#10;              &gt;&#10;                {tab.label}&#10;              &lt;/button&gt;&#10;            ))}&#10;          &lt;/nav&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Tab Content */}&#10;        &lt;div className=&quot;p-6&quot;&gt;&#10;          {activeTab === 'posts' &amp;&amp; (&#10;            &lt;ProfilePostFeed&#10;              userId={userId}&#10;              userName={profileUser.fullName || profileUser.name}&#10;              isOwnProfile={isOwnProfile}&#10;            /&gt;&#10;          )}&#10;&#10;          {activeTab === 'about' &amp;&amp; (&#10;            &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-6&quot;&gt;&#10;              {profileUser.role === 'STUDENT' ? (&#10;                &lt;StudentProfileInfo user={profileUser} /&gt;&#10;              ) : (&#10;                &lt;LecturerProfileInfo user={profileUser} /&gt;&#10;              )}&#10;&#10;              {/* Additional Info Section */}&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#10;                {profileUser.bio &amp;&amp; (&#10;                  &lt;div className=&quot;bg-white rounded-lg shadow-sm p-6&quot;&gt;&#10;                    &lt;h3 className=&quot;text-lg font-semibold text-gray-900 mb-4 vietnamese-text&quot;&gt;&#10;                      Giới thiệu bản thân&#10;                    &lt;/h3&gt;&#10;                    &lt;p className=&quot;text-gray-700 leading-relaxed vietnamese-text&quot;&gt;&#10;                      {profileUser.bio}&#10;                    &lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                )}&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {activeTab === 'photos' &amp;&amp; (&#10;            &lt;div className=&quot;text-center py-12&quot;&gt;&#10;              &lt;div className=&quot;text-gray-400 mb-4&quot;&gt;&#10;                &lt;svg className=&quot;w-16 h-16 mx-auto&quot; fill=&quot;currentColor&quot; viewBox=&quot;0 0 20 20&quot;&gt;&#10;                  &lt;path fillRule=&quot;evenodd&quot; d=&quot;M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z&quot; clipRule=&quot;evenodd&quot; /&gt;&#10;                &lt;/svg&gt;&#10;              &lt;/div&gt;&#10;              &lt;p className=&quot;text-gray-500 vietnamese-text&quot;&gt;Chức năng xem ảnh đang được phát triển&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {activeTab === 'videos' &amp;&amp; (&#10;            &lt;div className=&quot;text-center py-12&quot;&gt;&#10;              &lt;div className=&quot;text-gray-400 mb-4&quot;&gt;&#10;                &lt;svg className=&quot;w-16 h-16 mx-auto&quot; fill=&quot;currentColor&quot; viewBox=&quot;0 0 20 20&quot;&gt;&#10;                  &lt;path fillRule=&quot;evenodd&quot; d=&quot;M2 6a2 2 0 012-2h6a2 2 0 012 2v8a2 2 0 01-2 2H4a2 2 0 01-2-2V6zM14.553 7.106A1 1 0 0014 8v4a1 1 0 00.553.894l2 1A1 1 0 0018 13V7a1 1 0 00-1.447-.894l-2 1z&quot; clipRule=&quot;evenodd&quot; /&gt;&#10;                &lt;/svg&gt;&#10;              &lt;/div&gt;&#10;              &lt;p className=&quot;text-gray-500 vietnamese-text&quot;&gt;Chức năng xem video đang được phát triển&lt;/p&gt;&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default UserProfile;&#10;" />
              <option name="updatedContent" value="'use client';&#13;&#10;&#13;&#10;import React, { useState, useEffect } from 'react';&#13;&#10;import { useAuth } from '@/contexts/AuthContext';&#13;&#10;import { User, Post } from '@/types';&#13;&#10;import { userService } from '@/services/userService';&#13;&#10;import { postService } from '@/services/postService';&#13;&#10;import { ProfileHeader } from '@/components/profile/ProfileHeader';&#13;&#10;import { ProfileStats } from '@/components/profile/ProfileStats';&#13;&#10;import { StudentProfileInfo } from '@/components/profile/StudentProfileInfo';&#13;&#10;import { LecturerProfileInfo } from '@/components/profile/LecturerProfileInfo';&#13;&#10;import { ProfilePostFeed } from '@/components/profile/ProfilePostFeed';&#13;&#10;import { LoadingSpinner } from '@/components/ui/LoadingSpinner';&#13;&#10;import { ErrorAlert } from '@/components/ui/ErrorAlert';&#13;&#10;&#13;&#10;interface UserProfileProps {&#13;&#10;  userId: string;&#13;&#10;}&#13;&#10;&#13;&#10;const UserProfile: React.FC&lt;UserProfileProps&gt; = ({ userId }) =&gt; {&#13;&#10;  const { user: currentUser } = useAuth();&#13;&#10;  const [profileUser, setProfileUser] = useState&lt;User | null&gt;(null);&#13;&#10;  const [userPosts, setUserPosts] = useState&lt;Post[]&gt;([]);&#13;&#10;  const [isLoading, setIsLoading] = useState(true);&#13;&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#13;&#10;  const [isFollowing, setIsFollowing] = useState(false);&#13;&#10;  const [activeTab, setActiveTab] = useState&lt;'posts' | 'about' | 'photos' | 'videos'&gt;('posts');&#13;&#10;  const [stats, setStats] = useState({&#13;&#10;    posts: 0,&#13;&#10;    followers: 0,&#13;&#10;    following: 0,&#13;&#10;    likes: 0,&#13;&#10;    views: 0&#13;&#10;  });&#13;&#10;&#13;&#10;  const isOwnProfile = currentUser?.id === userId;&#13;&#10;&#13;&#10;  useEffect(() =&gt; {&#13;&#10;    loadUserProfile();&#13;&#10;    if (userId) {&#13;&#10;      loadUserPosts();&#13;&#10;      loadUserStats();&#13;&#10;    }&#13;&#10;  }, [userId]);&#13;&#10;&#13;&#10;  const loadUserProfile = async () =&gt; {&#13;&#10;    try {&#13;&#10;      setIsLoading(true);&#13;&#10;      // Use the correct method based on whether it's own profile or not&#13;&#10;      const user = isOwnProfile &#13;&#10;        ? await userService.getMyProfile() &#13;&#10;        : await userService.getProfile(userId);&#13;&#10;      setProfileUser(user);&#13;&#10;      &#13;&#10;      // Check if current user is following this user&#13;&#10;      if (!isOwnProfile &amp;&amp; currentUser) {&#13;&#10;        // TODO: Implement follow status check&#13;&#10;        // const followStatus = await userService.getFollowStatus(userId);&#13;&#10;        // setIsFollowing(followStatus.isFollowing);&#13;&#10;      }&#13;&#10;    } catch (err) {&#13;&#10;      setError('Không thể tải thông tin người dùng');&#13;&#10;      console.error('Error loading user profile:', err);&#13;&#10;    } finally {&#13;&#10;      setIsLoading(false);&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  const loadUserPosts = async () =&gt; {&#13;&#10;    try {&#13;&#10;      // TODO: Implement user-specific posts loading&#13;&#10;      //  const posts = await postService.getMyPosts();&#13;&#10;      // setUserPosts(posts);&#13;&#10;      setUserPosts([]); // Temporary empty array&#13;&#10;    } catch (err) {&#13;&#10;      console.error('Error loading user posts:', err);&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  const loadUserStats = async () =&gt; {&#13;&#10;    try {&#13;&#10;      // TODO: Implement stats loading from backend&#13;&#10;      // For now, using mock data&#13;&#10;      setStats({&#13;&#10;        posts: Math.floor(Math.random() * 100),&#13;&#10;        followers: Math.floor(Math.random() * 1000),&#13;&#10;        following: Math.floor(Math.random() * 500),&#13;&#10;        likes: Math.floor(Math.random() * 5000),&#13;&#10;        views: Math.floor(Math.random() * 10000)&#13;&#10;      });&#13;&#10;    } catch (err) {&#13;&#10;      console.error('Error loading user stats:', err);&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleFollow = async () =&gt; {&#13;&#10;    try {&#13;&#10;      if (isFollowing) {&#13;&#10;        await userService.unfollowUser(userId);&#13;&#10;        setIsFollowing(false);&#13;&#10;        setStats(prev =&gt; ({ ...prev, followers: prev.followers - 1 }));&#13;&#10;      } else {&#13;&#10;        await userService.followUser(userId);&#13;&#10;        setIsFollowing(true);&#13;&#10;        setStats(prev =&gt; ({ ...prev, followers: prev.followers + 1 }));&#13;&#10;      }&#13;&#10;    } catch (err) {&#13;&#10;      console.error('Error updating follow status:', err);&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleMessage = () =&gt; {&#13;&#10;    // TODO: Implement messaging functionality&#13;&#10;    console.log('Open chat with user:', userId);&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleEditProfile = () =&gt; {&#13;&#10;    // TODO: Implement profile editing&#13;&#10;    console.log('Edit profile');&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleEditCover = () =&gt; {&#13;&#10;    // TODO: Implement cover photo editing&#13;&#10;    console.log('Edit cover photo');&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleEditAvatar = () =&gt; {&#13;&#10;    // TODO: Implement avatar editing&#13;&#10;    console.log('Edit avatar');&#13;&#10;  };&#13;&#10;&#13;&#10;  const handleStatsClick = (type: 'posts' | 'followers' | 'following') =&gt; {&#13;&#10;    switch (type) {&#13;&#10;      case 'posts':&#13;&#10;        setActiveTab('posts');&#13;&#10;        break;&#13;&#10;      case 'followers':&#13;&#10;        // TODO: Show followers modal/page&#13;&#10;        console.log('Show followers');&#13;&#10;        break;&#13;&#10;      case 'following':&#13;&#10;        // TODO: Show following modal/page&#13;&#10;        console.log('Show following');&#13;&#10;        break;&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  if (isLoading) {&#13;&#10;    return (&#13;&#10;      &lt;div className=&quot;max-w-4xl mx-auto p-4&quot;&gt;&#13;&#10;        &lt;div className=&quot;flex justify-center items-center h-64&quot;&gt;&#13;&#10;          &lt;LoadingSpinner size=&quot;lg&quot; /&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    );&#13;&#10;  }&#13;&#10;&#13;&#10;  if (error || !profileUser) {&#13;&#10;    return (&#13;&#10;      &lt;div className=&quot;max-w-4xl mx-auto p-4&quot;&gt;&#13;&#10;        &lt;ErrorAlert message={error || 'Không tìm thấy người dùng'} /&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    );&#13;&#10;  }&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;div className=&quot;max-w-6xl mx-auto p-4 space-y-6&quot;&gt;&#13;&#10;      {/* Profile Header */}&#13;&#10;      &lt;ProfileHeader&#13;&#10;        user={profileUser}&#13;&#10;        isOwnProfile={isOwnProfile}&#13;&#10;        isFollowing={isFollowing}&#13;&#10;        onFollow={handleFollow}&#13;&#10;        onMessage={handleMessage}&#13;&#10;        onEditProfile={handleEditProfile}&#13;&#10;        onEditCover={handleEditCover}&#13;&#10;        onEditAvatar={handleEditAvatar}&#13;&#10;      /&gt;&#13;&#10;&#13;&#10;      {/* Profile Stats */}&#13;&#10;      &lt;ProfileStats&#13;&#10;        stats={stats}&#13;&#10;        onStatsClick={handleStatsClick}&#13;&#10;      /&gt;&#13;&#10;&#13;&#10;      {/* Navigation Tabs */}&#13;&#10;      &lt;div className=&quot;bg-white rounded-lg shadow-sm&quot;&gt;&#13;&#10;        &lt;div className=&quot;border-b border-gray-200&quot;&gt;&#13;&#10;          &lt;nav className=&quot;flex space-x-8 px-6&quot;&gt;&#13;&#10;            {[&#13;&#10;              { key: 'posts', label: 'Bài viết' },&#13;&#10;              { key: 'about', label: 'Giới thiệu' },&#13;&#10;              { key: 'photos', label: 'Ảnh' },&#13;&#10;              { key: 'videos', label: 'Video' }&#13;&#10;            ].map((tab) =&gt; (&#13;&#10;              &lt;button&#13;&#10;                key={tab.key}&#13;&#10;                onClick={() =&gt; setActiveTab(tab.key as any)}&#13;&#10;                className={`py-4 px-1 border-b-2 font-medium text-sm vietnamese-text transition-colors ${&#13;&#10;                  activeTab === tab.key&#13;&#10;                    ? 'border-blue-500 text-blue-600'&#13;&#10;                    : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'&#13;&#10;                }`}&#13;&#10;              &gt;&#13;&#10;                {tab.label}&#13;&#10;              &lt;/button&gt;&#13;&#10;            ))}&#13;&#10;          &lt;/nav&gt;&#13;&#10;        &lt;/div&gt;&#13;&#10;&#13;&#10;        {/* Tab Content */}&#13;&#10;        &lt;div className=&quot;p-6&quot;&gt;&#13;&#10;          {activeTab === 'posts' &amp;&amp; (&#13;&#10;            &lt;ProfilePostFeed&#13;&#10;              userId={userId}&#13;&#10;              userName={profileUser.fullName || profileUser.name}&#13;&#10;              isOwnProfile={isOwnProfile}&#13;&#10;            /&gt;&#13;&#10;          )}&#13;&#10;&#13;&#10;          {activeTab === 'about' &amp;&amp; (&#13;&#10;            &lt;div className=&quot;grid grid-cols-1 lg:grid-cols-2 gap-6&quot;&gt;&#13;&#10;              {profileUser.role === 'STUDENT' ? (&#13;&#10;                &lt;StudentProfileInfo user={profileUser} /&gt;&#13;&#10;              ) : (&#13;&#10;                &lt;LecturerProfileInfo user={profileUser} /&gt;&#13;&#10;              )}&#13;&#10;&#13;&#10;              {/* Additional Info Section */}&#13;&#10;              &lt;div className=&quot;space-y-6&quot;&gt;&#13;&#10;                {profileUser.bio &amp;&amp; (&#13;&#10;                  &lt;div className=&quot;bg-white rounded-lg shadow-sm p-6&quot;&gt;&#13;&#10;                    &lt;h3 className=&quot;text-lg font-semibold text-gray-900 mb-4 vietnamese-text&quot;&gt;&#13;&#10;                      Giới thiệu bản thân&#13;&#10;                    &lt;/h3&gt;&#13;&#10;                    &lt;p className=&quot;text-gray-700 leading-relaxed vietnamese-text&quot;&gt;&#13;&#10;                      {profileUser.bio}&#13;&#10;                    &lt;/p&gt;&#13;&#10;                  &lt;/div&gt;&#13;&#10;                )}&#13;&#10;              &lt;/div&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          )}&#13;&#10;&#13;&#10;          {activeTab === 'photos' &amp;&amp; (&#13;&#10;            &lt;div className=&quot;text-center py-12&quot;&gt;&#13;&#10;              &lt;div className=&quot;text-gray-400 mb-4&quot;&gt;&#13;&#10;                &lt;svg className=&quot;w-16 h-16 mx-auto&quot; fill=&quot;currentColor&quot; viewBox=&quot;0 0 20 20&quot;&gt;&#13;&#10;                  &lt;path fillRule=&quot;evenodd&quot; d=&quot;M4 3a2 2 0 00-2 2v10a2 2 0 002 2h12a2 2 0 002-2V5a2 2 0 00-2-2H4zm12 12H4l4-8 3 6 2-4 3 6z&quot; clipRule=&quot;evenodd&quot; /&gt;&#13;&#10;                &lt;/svg&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;              &lt;p className=&quot;text-gray-500 vietnamese-text&quot;&gt;Chức năng xem ảnh đang được phát triển&lt;/p&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          )}&#13;&#10;&#13;&#10;          {activeTab === 'videos' &amp;&amp; (&#13;&#10;            &lt;div className=&quot;text-center py-12&quot;&gt;&#13;&#10;              &lt;div className=&quot;text-gray-400 mb-4&quot;&gt;&#13;&#10;                &lt;svg className=&quot;w-16 h-16 mx-auto&quot; fill=&quot;currentColor&quot; viewBox=&quot;0 0 20 20&quot;&gt;&#13;&#10;                  &lt;path fillRule=&quot;evenodd&quot; d=&quot;M2 6a2 2 0 012-2h6a2 2 0 012 2v8a2 2 0 01-2 2H4a2 2 0 01-2-2V6zM14.553 7.106A1 1 0 0014 8v4a1 1 0 00.553.894l2 1A1 1 0 0018 13V7a1 1 0 00-1.447-.894l-2 1z&quot; clipRule=&quot;evenodd&quot; /&gt;&#13;&#10;                &lt;/svg&gt;&#13;&#10;              &lt;/div&gt;&#13;&#10;              &lt;p className=&quot;text-gray-500 vietnamese-text&quot;&gt;Chức năng xem video đang được phát triển&lt;/p&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          )}&#13;&#10;        &lt;/div&gt;&#13;&#10;      &lt;/div&gt;&#13;&#10;    &lt;/div&gt;&#13;&#10;  );&#13;&#10;};&#13;&#10;&#13;&#10;export default UserProfile;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/lib/locales/vi.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/lib/locales/vi.ts" />
              <option name="updatedContent" value="// Vietnamese localization constants&#10;export const VI_LOCALE = {&#10;  // Common actions&#10;  actions: {&#10;    save: 'Lưu',&#10;    cancel: 'Hủy',&#10;    delete: 'Xóa',&#10;    edit: 'Chỉnh sửa',&#10;    submit: 'Gửi',&#10;    confirm: 'Xác nhận',&#10;    back: 'Quay lại',&#10;    next: 'Tiếp theo',&#10;    loading: 'Đang tải...',&#10;    retry: 'Thử lại',&#10;    close: 'Đóng',&#10;    open: 'Mở',&#10;    view: 'Xem',&#10;    share: 'Chia sẻ',&#10;    copy: 'Sao chép',&#10;    download: 'Tải xuống',&#10;    upload: 'Tải lên',&#10;    search: 'Tìm kiếm',&#10;    filter: 'Lọc',&#10;    sort: 'Sắp xếp',&#10;    refresh: 'Làm mới'&#10;  },&#10;&#10;  // Authentication&#10;  auth: {&#10;    login: 'Đăng nhập',&#10;    logout: 'Đăng xuất',&#10;    register: 'Đăng ký',&#10;    forgotPassword: 'Quên mật khẩu',&#10;    resetPassword: 'Đặt lại mật khẩu',&#10;    changePassword: 'Đổi mật khẩu',&#10;    verifyEmail: 'Xác thực email',&#10;    resendVerification: 'Gửi lại mã xác thực'&#10;  },&#10;&#10;  // Posts&#10;  posts: {&#10;    createPost: 'Tạo bài viết',&#10;    editPost: 'Chỉnh sửa bài viết',&#10;    deletePost: 'Xóa bài viết',&#10;    sharePost: 'Chia sẻ bài viết',&#10;    likePost: 'Thích bài viết',&#10;    unlikePost: 'Bỏ thích',&#10;    bookmarkPost: 'Lưu bài viết',&#10;    removeBookmark: 'Bỏ lưu',&#10;    commentPost: 'Bình luận',&#10;    viewComments: 'Xem bình luận',&#10;    hideComments: 'Ẩn bình luận',&#10;    writeComment: 'Viết bình luận...',&#10;    replyComment: 'Trả lời',&#10;    postTitle: 'Tiêu đề bài viết',&#10;    postContent: 'Nội dung bài viết',&#10;    addMedia: 'Thêm ảnh/video',&#10;    addTag: 'Thêm thẻ',&#10;    selectCategory: 'Chọn danh mục',&#10;    noPostsFound: 'Không tìm thấy bài viết nào',&#10;    loadMorePosts: 'Tải thêm bài viết'&#10;  },&#10;&#10;  // User profile&#10;  profile: {&#10;    profile: 'Hồ sơ',&#10;    editProfile: 'Chỉnh sửa hồ sơ',&#10;    viewProfile: 'Xem hồ sơ',&#10;    fullName: 'Họ và tên',&#10;    email: 'Email',&#10;    username: 'Tên đăng nhập',&#10;    bio: 'Giới thiệu',&#10;    avatar: 'Ảnh đại diện',&#10;    coverPhoto: 'Ảnh bìa',&#10;    birthday: 'Ngày sinh',&#10;    gender: 'Giới tính',&#10;    faculty: 'Khoa',&#10;    major: 'Ngành học',&#10;    studentId: 'Mã số sinh viên',&#10;    academicYear: 'Niên khóa',&#10;    phone: 'Số điện thoại',&#10;    address: 'Địa chỉ'&#10;  },&#10;&#10;  // Messages and notifications&#10;  messages: {&#10;    success: {&#10;      loginSuccess: 'Đăng nhập thành công',&#10;      logoutSuccess: 'Đăng xuất thành công',&#10;      registrationSuccess: 'Đăng ký thành công',&#10;      profileUpdated: 'Cập nhật hồ sơ thành công',&#10;      postCreated: 'Tạo bài viết thành công',&#10;      postUpdated: 'Cập nhật bài viết thành công',&#10;      postDeleted: 'Xóa bài viết thành công',&#10;      commentAdded: 'Thêm bình luận thành công',&#10;      passwordChanged: 'Đổi mật khẩu thành công',&#10;      emailVerified: 'Xác thực email thành công'&#10;    },&#10;    error: {&#10;      genericError: 'Đã xảy ra lỗi. Vui lòng thử lại.',&#10;      networkError: 'Lỗi kết nối mạng. Vui lòng kiểm tra kết nối internet.',&#10;      unauthorized: 'Bạn không có quyền truy cập.',&#10;      forbidden: 'Truy cập bị từ chối.',&#10;      notFound: 'Không tìm thấy tài nguyên.',&#10;      serverError: 'Lỗi máy chủ. Vui lòng thử lại sau.',&#10;      validationError: 'Dữ liệu không hợp lệ.',&#10;      loginFailed: 'Đăng nhập thất bại',&#10;      registrationFailed: 'Đăng ký thất bại',&#10;      uploadFailed: 'Tải file thất bại',&#10;      securityError: 'Xác thực bảo mật thất bại. Vui lòng thử lại.'&#10;    },&#10;    validation: {&#10;      required: 'Trường này là bắt buộc',&#10;      invalidEmail: 'Email không hợp lệ',&#10;      invalidPassword: 'Mật khẩu không hợp lệ',&#10;      passwordMismatch: 'Mật khẩu xác nhận không khớp',&#10;      minLength: 'Tối thiểu {min} ký tự',&#10;      maxLength: 'Tối đa {max} ký tự',&#10;      invalidFormat: 'Định dạng không hợp lệ'&#10;    }&#10;  },&#10;&#10;  // Time formatting&#10;  time: {&#10;    now: 'Vừa xong',&#10;    minutesAgo: '{count} phút trước',&#10;    hoursAgo: '{count} giờ trước',&#10;    daysAgo: '{count} ngày trước',&#10;    weeksAgo: '{count} tuần trước',&#10;    monthsAgo: '{count} tháng trước',&#10;    yearsAgo: '{count} năm trước'&#10;  },&#10;&#10;  // File upload&#10;  upload: {&#10;    selectFiles: 'Chọn tệp',&#10;    dragAndDrop: 'Kéo thả tệp vào đây',&#10;    maxFileSize: 'Kích thước tệp tối đa: {size}MB',&#10;    supportedFormats: 'Định dạng hỗ trợ: {formats}',&#10;    uploadProgress: 'Đang tải lên... {progress}%',&#10;    uploadComplete: 'Tải lên hoàn tất',&#10;    uploadFailed: 'Tải lên thất bại'&#10;  },&#10;&#10;  // Search and filters&#10;  search: {&#10;    searchPlaceholder: 'Tìm kiếm...',&#10;    noResults: 'Không tìm thấy kết quả',&#10;    searchResults: 'Kết quả tìm kiếm',&#10;    filters: 'Bộ lọc',&#10;    sortBy: 'Sắp xếp theo',&#10;    sortNewest: 'Mới nhất',&#10;    sortOldest: 'Cũ nhất',&#10;    sortMostLiked: 'Nhiều lượt thích nhất',&#10;    sortMostViewed: 'Nhiều lượt xem nhất'&#10;  },&#10;&#10;  // Categories&#10;  categories: {&#10;    academic: 'Học tập',&#10;    social: 'Sinh hoạt',&#10;    announcement: 'Thông báo',&#10;    career: 'Nghề nghiệp',&#10;    technology: 'Công nghệ',&#10;    sports: 'Thể thao',&#10;    entertainment: 'Giải trí',&#10;    other: 'Khác'&#10;  }&#10;} as const;&#10;&#10;export type LocaleKey = keyof typeof VI_LOCALE;&#10;export type LocaleValue = typeof VI_LOCALE[LocaleKey];" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/shared/services/post.service.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/shared/services/post.service.ts" />
              <option name="originalContent" value="import { apiClient } from '@/shared/config/api-client';&#10;import { API_ENDPOINTS } from '@/shared/constants';&#10;import { createApiUrl } from '@/shared/utils';&#10;import {&#10;  Post,&#10;  Comment,&#10;  CreatePostRequest,&#10;  UpdatePostRequest,&#10;  CreateCommentRequest,&#10;  UpdateCommentRequest,&#10;  PaginatedResponse,&#10;  ApiResponse,&#10;  PostVisibility,&#10;} from '@/shared/types';&#10;&#10;/**&#10; * Post Service&#10; * Handles all post-related API calls&#10; * Handles all post-related API calls&#10; */&#10;export class PostService {&#10;   * Create new post&#10;   * Create new post&#10;    const formData = new FormData();&#10;    formData.append('content', postData.content);&#10;&#10;    if (postData.visibility) {&#10;      formData.append('visibility', postData.visibility);&#10;    }&#10;    formData.append('content', postData.content);&#10;    if (postData.tags) {&#10;      postData.tags.forEach(tag =&gt; formData.append('tags', tag));&#10;    }&#10;&#10;    if (postData.images) {&#10;      postData.images.forEach(image =&gt; formData.append('images', image));&#10;    }&#10;&#10;    return apiClient.post&lt;Post&gt;(API_ENDPOINTS.POSTS.BASE, formData, {&#10;      headers: {&#10;        'Content-Type': 'multipart/form-data',&#10;      },&#10;    });&#10;      postData.tags.forEach(tag =&gt; formData.append('tags', tag));&#10;    }&#10;&#10;    if (postData.images) {&#10;      postData.images.forEach(image =&gt; formData.append('images', image));&#10;    }&#10;&#10;    return apiClient.post&lt;Post&gt;(API_ENDPOINTS.POSTS.BASE, formData, {&#10;      headers: {&#10;        'Content-Type': 'multipart/form-data',&#10;      },&#10;    });&#10;  }&#10;&#10;  /**&#10;   * Get posts feed&#10;   */&#10;  async getPosts(page = 0, size = 10): Promise&lt;PaginatedResponse&lt;Post&gt;&gt; {&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.BASE, undefined, { page, size });&#10;    return apiClient.get&lt;PaginatedResponse&lt;Post&gt;&gt;(url);&#10;  }&#10;&#10;  /**&#10;   * Get single post by ID&#10;   */&#10;  async getPost(postId: string): Promise&lt;Post&gt; {&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.BASE + '/:id', { id: postId });&#10;    return apiClient.get&lt;Post&gt;(url);&#10;  }&#10;&#10;  /**&#10;   * Get posts by user&#10;   */&#10;  async getUserPosts(&#10;    userId: string,&#10;    page = 0,&#10;    size = 10&#10;  ): Promise&lt;PaginatedResponse&lt;Post&gt;&gt; {&#10;    const url = createApiUrl(&#10;      API_ENDPOINTS.POSTS.BY_USER,&#10;      { id: userId },&#10;      { page, size }&#10;    );&#10;    return apiClient.get&lt;PaginatedResponse&lt;Post&gt;&gt;(url);&#10;  }&#10;&#10;  /**&#10;   * Update post&#10;   */&#10;  async updatePost(postId: string, updateData: UpdatePostRequest): Promise&lt;Post&gt; {&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.BASE + '/:id', { id: postId });&#10;    return apiClient.put&lt;Post&gt;(url, updateData);&#10;  }&#10;&#10;  /**&#10;   * Delete post&#10;   */&#10;  async deletePost(postId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.BASE + '/:id', { id: postId });&#10;    return apiClient.delete&lt;ApiResponse&lt;null&gt;&gt;(url);&#10;  }&#10;&#10;  /**&#10;   * Like post&#10;   */&#10;  async likePost(postId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.LIKE, { id: postId });&#10;    return apiClient.post&lt;ApiResponse&lt;null&gt;&gt;(url);&#10;  }&#10;&#10;  /**&#10;   * Unlike post&#10;   */&#10;  async unlikePost(postId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.LIKE, { id: postId });&#10;    return apiClient.delete&lt;ApiResponse&lt;null&gt;&gt;(url);&#10;  }&#10;&#10;  /**&#10;   * Get post comments&#10;   */&#10;  async getComments(&#10;    postId: string,&#10;    page = 0,&#10;    size = 10&#10;  ): Promise&lt;PaginatedResponse&lt;Comment&gt;&gt; {&#10;    const url = createApiUrl(&#10;      API_ENDPOINTS.POSTS.COMMENTS,&#10;      { id: postId },&#10;      { page, size }&#10;    );&#10;    return apiClient.get&lt;PaginatedResponse&lt;Comment&gt;&gt;(url);&#10;  }&#10;&#10;  /**&#10;   * Create comment&#10;   */&#10;  async createComment(commentData: CreateCommentRequest): Promise&lt;Comment&gt; {&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.COMMENTS, { id: commentData.postId });&#10;    return apiClient.post&lt;Comment&gt;(url, {&#10;      content: commentData.content,&#10;      parentId: commentData.parentId,&#10;    });&#10;  }&#10;&#10;  /**&#10;   * Update comment&#10;   */&#10;  async updateComment(&#10;    commentId: string,&#10;    updateData: UpdateCommentRequest&#10;  ): Promise&lt;Comment&gt; {&#10;    const url = createApiUrl('/comments/:id', { id: commentId });&#10;    return apiClient.put&lt;Comment&gt;(url, updateData);&#10;  }&#10;&#10;  /**&#10;   * Delete comment&#10;   */&#10;  async deleteComment(commentId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#10;    const url = createApiUrl('/comments/:id', { id: commentId });&#10;    return apiClient.delete&lt;ApiResponse&lt;null&gt;&gt;(url);&#10;  }&#10;&#10;  /**&#10;   * Like comment&#10;   */&#10;  async likeComment(commentId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.COMMENT_LIKE, { id: commentId });&#10;    return apiClient.post&lt;ApiResponse&lt;null&gt;&gt;(url);&#10;  }&#10;&#10;  /**&#10;   * Unlike comment&#10;   */&#10;  async unlikeComment(commentId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.COMMENT_LIKE, { id: commentId });&#10;    return apiClient.delete&lt;ApiResponse&lt;null&gt;&gt;(url);&#10;  }&#10;&#10;  /**&#10;   * Share post&#10;   */&#10;  async sharePost(postId: string, content?: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#10;    const url = createApiUrl('/posts/:id/share', { id: postId });&#10;    return apiClient.post&lt;ApiResponse&lt;null&gt;&gt;(url, { content });&#10;  }&#10;&#10;  /**&#10;   * Bookmark post&#10;   */&#10;  async bookmarkPost(postId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#10;    const url = createApiUrl('/posts/:id/bookmark', { id: postId });&#10;    return apiClient.post&lt;ApiResponse&lt;null&gt;&gt;(url);&#10;  }&#10;&#10;  /**&#10;   * Remove bookmark&#10;   */&#10;  async removeBookmark(postId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#10;    const url = createApiUrl('/posts/:id/bookmark', { id: postId });&#10;    return apiClient.delete&lt;ApiResponse&lt;null&gt;&gt;(url);&#10;  }&#10;}&#10;&#10;// Export singleton instance&#10;export const postService = new PostService();&#10;" />
              <option name="updatedContent" value="import { apiClient } from '@/shared/config/api-client';&#13;&#10;import { API_ENDPOINTS } from '@/shared/constants';&#13;&#10;import { createApiUrl } from '@/shared/utils';&#13;&#10;import {&#13;&#10;  Post,&#13;&#10;  Comment,&#13;&#10;  CreatePostRequest,&#13;&#10;  UpdatePostRequest,&#13;&#10;  CreateCommentRequest,&#13;&#10;  UpdateCommentRequest,&#13;&#10;  PaginatedResponse,&#13;&#10;  ApiResponse,&#13;&#10;  PostVisibility,&#13;&#10;} from '@/shared/types';&#13;&#10;&#13;&#10;/**&#13;&#10; * Post Service - Updated to sync with backend APIs&#13;&#10; */&#13;&#10;export class PostService {&#13;&#10;  /**&#13;&#10;   * Create new post - Updated to match EnhancedPostController&#13;&#10;   */&#13;&#10;  async createPost(postData: CreatePostRequest): Promise&lt;Post&gt; {&#13;&#10;    // Use JSON instead of FormData to match EnhancedPostController&#13;&#10;    return apiClient.post&lt;Post&gt;(API_ENDPOINTS.POSTS.BASE, postData);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Get personalized feed - Updated to match backend&#13;&#10;   */&#13;&#10;  async getPersonalizedFeed(page = 0, size = 10): Promise&lt;Post[]&gt; {&#13;&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.FEED, undefined, { page, size });&#13;&#10;    return apiClient.get&lt;Post[]&gt;(url);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Get posts feed&#13;&#10;   */&#13;&#10;  async getPosts(page = 0, size = 10): Promise&lt;PaginatedResponse&lt;Post&gt;&gt; {&#13;&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.BASE, undefined, { page, size });&#13;&#10;    return apiClient.get&lt;PaginatedResponse&lt;Post&gt;&gt;(url);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Get single post by ID&#13;&#10;   */&#13;&#10;  async getPost(postId: string): Promise&lt;Post&gt; {&#13;&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.BASE + '/:id', { id: postId });&#13;&#10;    return apiClient.get&lt;Post&gt;(url);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Get posts by user&#13;&#10;   */&#13;&#10;  async getUserPosts(&#13;&#10;    userId: string,&#13;&#10;    page = 0,&#13;&#10;    size = 10&#13;&#10;  ): Promise&lt;PaginatedResponse&lt;Post&gt;&gt; {&#13;&#10;    const url = createApiUrl(&#13;&#10;      API_ENDPOINTS.POSTS.BY_USER,&#13;&#10;      { id: userId },&#13;&#10;      { page, size }&#13;&#10;    );&#13;&#10;    return apiClient.get&lt;PaginatedResponse&lt;Post&gt;&gt;(url);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Update post&#13;&#10;   */&#13;&#10;  async updatePost(postId: string, updateData: UpdatePostRequest): Promise&lt;Post&gt; {&#13;&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.BASE + '/:id', { id: postId });&#13;&#10;    return apiClient.put&lt;Post&gt;(url, updateData);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Delete post&#13;&#10;   */&#13;&#10;  async deletePost(postId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#13;&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.BASE + '/:id', { id: postId });&#13;&#10;    return apiClient.delete&lt;ApiResponse&lt;null&gt;&gt;(url);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Like post&#13;&#10;   */&#13;&#10;  async likePost(postId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#13;&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.LIKE, { id: postId });&#13;&#10;    return apiClient.post&lt;ApiResponse&lt;null&gt;&gt;(url);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Unlike post&#13;&#10;   */&#13;&#10;  async unlikePost(postId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#13;&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.LIKE, { id: postId });&#13;&#10;    return apiClient.delete&lt;ApiResponse&lt;null&gt;&gt;(url);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Get post comments&#13;&#10;   */&#13;&#10;  async getComments(&#13;&#10;    postId: string,&#13;&#10;    page = 0,&#13;&#10;    size = 10&#13;&#10;  ): Promise&lt;PaginatedResponse&lt;Comment&gt;&gt; {&#13;&#10;    const url = createApiUrl(&#13;&#10;      API_ENDPOINTS.POSTS.COMMENTS,&#13;&#10;      { id: postId },&#13;&#10;      { page, size }&#13;&#10;    );&#13;&#10;    return apiClient.get&lt;PaginatedResponse&lt;Comment&gt;&gt;(url);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Create comment&#13;&#10;   */&#13;&#10;  async createComment(commentData: CreateCommentRequest): Promise&lt;Comment&gt; {&#13;&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.COMMENTS, { id: commentData.postId });&#13;&#10;    return apiClient.post&lt;Comment&gt;(url, {&#13;&#10;      content: commentData.content,&#13;&#10;      parentId: commentData.parentId,&#13;&#10;    });&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Update comment&#13;&#10;   */&#13;&#10;  async updateComment(&#13;&#10;    commentId: string,&#13;&#10;    updateData: UpdateCommentRequest&#13;&#10;  ): Promise&lt;Comment&gt; {&#13;&#10;    const url = createApiUrl('/comments/:id', { id: commentId });&#13;&#10;    return apiClient.put&lt;Comment&gt;(url, updateData);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Delete comment&#13;&#10;   */&#13;&#10;  async deleteComment(commentId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#13;&#10;    const url = createApiUrl('/comments/:id', { id: commentId });&#13;&#10;    return apiClient.delete&lt;ApiResponse&lt;null&gt;&gt;(url);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Like comment&#13;&#10;   */&#13;&#10;  async likeComment(commentId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#13;&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.COMMENT_LIKE, { id: commentId });&#13;&#10;    return apiClient.post&lt;ApiResponse&lt;null&gt;&gt;(url);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Unlike comment&#13;&#10;   */&#13;&#10;  async unlikeComment(commentId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#13;&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.COMMENT_LIKE, { id: commentId });&#13;&#10;    return apiClient.delete&lt;ApiResponse&lt;null&gt;&gt;(url);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Share post&#13;&#10;   */&#13;&#10;  async sharePost(postId: string, content?: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#13;&#10;    const url = createApiUrl('/posts/:id/share', { id: postId });&#13;&#10;    return apiClient.post&lt;ApiResponse&lt;null&gt;&gt;(url, { content });&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Bookmark post&#13;&#10;   */&#13;&#10;  async bookmarkPost(postId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#13;&#10;    const url = createApiUrl('/posts/:id/bookmark', { id: postId });&#13;&#10;    return apiClient.post&lt;ApiResponse&lt;null&gt;&gt;(url);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Remove bookmark&#13;&#10;   */&#13;&#10;  async removeBookmark(postId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#13;&#10;    const url = createApiUrl('/posts/:id/bookmark', { id: postId });&#13;&#10;    return apiClient.delete&lt;ApiResponse&lt;null&gt;&gt;(url);&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;// Export singleton instance&#13;&#10;export const postService = new PostService();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/PostServiceApplication.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/PostServiceApplication.java" />
              <option name="originalContent" value="package com.ctuconnect;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;import org.springframework.cloud.client.discovery.EnableDiscoveryClient;&#10;import org.springframework.cloud.openfeign.EnableFeignClients;&#10;import org.springframework.kafka.annotation.EnableKafka;&#10;&#10;@SpringBootApplication&#10;@EnableDiscoveryClient&#10;@EnableFeignClients&#10;@EnableKafka&#10;public class PostServiceApplication {&#10;&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(PostServiceApplication.class, args);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ctuconnect;&#13;&#10;&#13;&#10;import org.springframework.boot.SpringApplication;&#13;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#13;&#10;import org.springframework.cloud.client.discovery.EnableDiscoveryClient;&#13;&#10;import org.springframework.cloud.openfeign.EnableFeignClients;&#13;&#10;import org.springframework.kafka.annotation.EnableKafka;&#13;&#10;import org.springframework.data.mongodb.config.EnableMongoAuditing;&#13;&#10;&#13;&#10;@SpringBootApplication&#13;&#10;@EnableDiscoveryClient&#13;&#10;@EnableFeignClients&#13;&#10;@EnableKafka&#13;&#10;@EnableMongoAuditing // Enable MongoDB auditing for @CreatedDate and @LastModifiedDate&#13;&#10;public class PostServiceApplication {&#13;&#10;&#13;&#10;    public static void main(String[] args) {&#13;&#10;        SpringApplication.run(PostServiceApplication.class, args);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/client/MediaServiceClient.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/client/MediaServiceClient.java" />
              <option name="originalContent" value="package com.ctuconnect.client;&#10;&#10;import lombok.Data;&#10;import org.springframework.cloud.openfeign.FeignClient;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.web.multipart.MultipartFile;&#10;&#10;&#10;@FeignClient(name = &quot;media-service&quot;, url = &quot;${media-service.url:http://localhost:8080}&quot;)&#10;public interface MediaServiceClient {&#10;&#10;    @PostMapping(value = &quot;/api/media/upload&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)&#10;    MediaUploadResponse uploadFile(@RequestPart(&quot;file&quot;) MultipartFile file,&#10;                                  @RequestParam(&quot;type&quot;) String type);&#10;&#10;    @DeleteMapping(&quot;/api/media/{id}&quot;)&#10;    void deleteFile(@PathVariable(&quot;id&quot;) String fileId);&#10;&#10;    @GetMapping(&quot;/api/media/{id}&quot;)&#10;    MediaResponse getFileInfo(@PathVariable(&quot;id&quot;) String fileId);&#10;&#10;    // Response DTOs for media service&#10;    class MediaUploadResponse {&#10;        private String id;&#10;        private String fileName;&#10;        private String fileUrl;&#10;        private String fileType;&#10;        private long fileSize;&#10;&#10;        // Getters and Setters&#10;        public String getId() {&#10;            return id;&#10;        }&#10;&#10;        public void setId(String id) {&#10;            this.id = id;&#10;        }&#10;&#10;        public String getFileName() {&#10;            return fileName;&#10;        }&#10;&#10;        public void setFileName(String fileName) {&#10;            this.fileName = fileName;&#10;        }&#10;&#10;        public String getFileUrl() {&#10;            return fileUrl;&#10;        }&#10;&#10;        public void setFileUrl(String fileUrl) {&#10;            this.fileUrl = fileUrl;&#10;        }&#10;&#10;        public String getFileType() {&#10;            return fileType;&#10;        }&#10;&#10;        public void setFileType(String fileType) {&#10;            this.fileType = fileType;&#10;        }&#10;&#10;        public long getFileSize() {&#10;            return fileSize;&#10;        }&#10;&#10;        public void setFileSize(long fileSize) {&#10;            this.fileSize = fileSize;&#10;        }&#10;    }&#10;&#10;    @Data&#10;    class MediaResponse {&#10;        private String id;&#10;        private String fileName;&#10;        private String fileUrl;&#10;        private String fileType;&#10;        private long fileSize;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ctuconnect.client;&#13;&#10;&#13;&#10;import lombok.Data;&#13;&#10;import org.springframework.cloud.openfeign.FeignClient;&#13;&#10;import org.springframework.http.MediaType;&#13;&#10;import org.springframework.web.bind.annotation.*;&#13;&#10;import org.springframework.web.multipart.MultipartFile;&#13;&#10;import com.ctuconnect.config.FeignConfig;&#13;&#10;&#13;&#10;@FeignClient(&#13;&#10;    name = &quot;media-service&quot;, &#13;&#10;    url = &quot;${media-service.url}&quot;, &#13;&#10;    configuration = FeignConfig.class&#13;&#10;)&#13;&#10;public interface MediaServiceClient {&#13;&#10;&#13;&#10;    @PostMapping(value = &quot;/api/media/upload&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)&#13;&#10;    MediaUploadResponse uploadFile(@RequestPart(&quot;file&quot;) MultipartFile file,&#13;&#10;                                  @RequestParam(&quot;type&quot;) String type);&#13;&#10;&#13;&#10;    @DeleteMapping(&quot;/api/media/{id}&quot;)&#13;&#10;    void deleteFile(@PathVariable(&quot;id&quot;) String fileId);&#13;&#10;&#13;&#10;    @GetMapping(&quot;/api/media/{id}&quot;)&#13;&#10;    MediaResponse getFileInfo(@PathVariable(&quot;id&quot;) String fileId);&#13;&#10;&#13;&#10;    // Response DTOs for media service&#13;&#10;    class MediaUploadResponse {&#13;&#10;        private String id;&#13;&#10;        private String fileName;&#13;&#10;        private String fileUrl;&#13;&#10;        private String fileType;&#13;&#10;        private long fileSize;&#13;&#10;&#13;&#10;        // Getters and Setters&#13;&#10;        public String getId() {&#13;&#10;            return id;&#13;&#10;        }&#13;&#10;&#13;&#10;        public void setId(String id) {&#13;&#10;            this.id = id;&#13;&#10;        }&#13;&#10;&#13;&#10;        public String getFileName() {&#13;&#10;            return fileName;&#13;&#10;        }&#13;&#10;&#13;&#10;        public void setFileName(String fileName) {&#13;&#10;            this.fileName = fileName;&#13;&#10;        }&#13;&#10;&#13;&#10;        public String getFileUrl() {&#13;&#10;            return fileUrl;&#13;&#10;        }&#13;&#10;&#13;&#10;        public void setFileUrl(String fileUrl) {&#13;&#10;            this.fileUrl = fileUrl;&#13;&#10;        }&#13;&#10;&#13;&#10;        public String getFileType() {&#13;&#10;            return fileType;&#13;&#10;        }&#13;&#10;&#13;&#10;        public void setFileType(String fileType) {&#13;&#10;            this.fileType = fileType;&#13;&#10;        }&#13;&#10;&#13;&#10;        public long getFileSize() {&#13;&#10;            return fileSize;&#13;&#10;        }&#13;&#10;&#13;&#10;        public void setFileSize(long fileSize) {&#13;&#10;            this.fileSize = fileSize;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Data&#13;&#10;    class MediaResponse {&#13;&#10;        private String id;&#13;&#10;        private String fileName;&#13;&#10;        private String fileUrl;&#13;&#10;        private String fileType;&#13;&#10;        private long fileSize;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/client/UserServiceClientFallback.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/client/UserServiceClientFallback.java" />
              <option name="updatedContent" value="package com.ctuconnect.client;&#10;&#10;import com.ctuconnect.dto.AuthorInfo;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.stereotype.Component;&#10;&#10;import java.util.HashSet;&#10;import java.util.Set;&#10;&#10;/**&#10; * Fallback implementation for UserServiceClient when user-service is unavailable&#10; * Provides default values to prevent service failures&#10; */&#10;@Component&#10;@Slf4j&#10;public class UserServiceClientFallback implements UserServiceClient {&#10;&#10;    @Override&#10;    public AuthorInfo getAuthorInfo(String authorId) {&#10;        log.warn(&quot;User service unavailable, returning fallback author info for user: {}&quot;, authorId);&#10;        return AuthorInfo.builder()&#10;                .userId(authorId)&#10;                .username(&quot;Unknown User&quot;)&#10;                .fullName(&quot;Unknown User&quot;)&#10;                .avatarUrl(null)&#10;                .isVerified(false)&#10;                .build();&#10;    }&#10;&#10;    @Override&#10;    public Set&lt;String&gt; getFriendIds(String userId) {&#10;        log.warn(&quot;User service unavailable, returning empty friend list for user: {}&quot;, userId);&#10;        return new HashSet&lt;&gt;();&#10;    }&#10;&#10;    @Override&#10;    public Set&lt;String&gt; getCloseInteractionIds(String userId) {&#10;        log.warn(&quot;User service unavailable, returning empty close interactions for user: {}&quot;, userId);&#10;        return new HashSet&lt;&gt;();&#10;    }&#10;&#10;    @Override&#10;    public Set&lt;String&gt; getSameFacultyUserIds(String userId) {&#10;        log.warn(&quot;User service unavailable, returning empty same faculty users for user: {}&quot;, userId);&#10;        return new HashSet&lt;&gt;();&#10;    }&#10;&#10;    @Override&#10;    public Set&lt;String&gt; getSameMajorUserIds(String userId) {&#10;        log.warn(&quot;User service unavailable, returning empty same major users for user: {}&quot;, userId);&#10;        return new HashSet&lt;&gt;();&#10;    }&#10;&#10;    @Override&#10;    public Set&lt;String&gt; getUserInterestTags(String userId) {&#10;        log.warn(&quot;User service unavailable, returning empty interest tags for user: {}&quot;, userId);&#10;        return new HashSet&lt;&gt;();&#10;    }&#10;&#10;    @Override&#10;    public Set&lt;String&gt; getUserPreferredCategories(String userId) {&#10;        log.warn(&quot;User service unavailable, returning empty preferred categories for user: {}&quot;, userId);&#10;        return new HashSet&lt;&gt;();&#10;    }&#10;&#10;    @Override&#10;    public String getUserFacultyId(String userId) {&#10;        log.warn(&quot;User service unavailable, returning null faculty ID for user: {}&quot;, userId);&#10;        return null;&#10;    }&#10;&#10;    @Override&#10;    public String getUserMajorId(String userId) {&#10;        log.warn(&quot;User service unavailable, returning null major ID for user: {}&quot;, userId);&#10;        return null;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/config/CacheConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/config/CacheConfig.java" />
              <option name="updatedContent" value="package com.ctuconnect.config;&#10;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.data.redis.connection.RedisConnectionFactory;&#10;import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;&#10;import org.springframework.data.redis.core.RedisTemplate;&#10;import org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;&#10;import org.springframework.data.redis.serializer.StringRedisSerializer;&#10;&#10;@Configuration&#10;public class CacheConfig {&#10;&#10;    @Value(&quot;${spring.data.redis.host:localhost}&quot;)&#10;    private String redisHost;&#10;&#10;    @Value(&quot;${spring.data.redis.port:6379}&quot;)&#10;    private int redisPort;&#10;&#10;    @Bean&#10;    public RedisConnectionFactory redisConnectionFactory() {&#10;        return new LettuceConnectionFactory(redisHost, redisPort);&#10;    }&#10;&#10;    @Bean&#10;    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory connectionFactory) {&#10;        RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;&gt;();&#10;        template.setConnectionFactory(connectionFactory);&#10;        &#10;        // Use String serializer for keys&#10;        template.setKeySerializer(new StringRedisSerializer());&#10;        template.setHashKeySerializer(new StringRedisSerializer());&#10;        &#10;        // Use JSON serializer for values&#10;        template.setValueSerializer(new GenericJackson2JsonRedisSerializer());&#10;        template.setHashValueSerializer(new GenericJackson2JsonRedisSerializer());&#10;        &#10;        template.afterPropertiesSet();&#10;        return template;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/config/FeignConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/config/FeignConfig.java" />
              <option name="updatedContent" value="package com.ctuconnect.config;&#10;&#10;import feign.Logger;&#10;import feign.Request;&#10;import feign.Retryer;&#10;import feign.codec.ErrorDecoder;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;&#10;import java.util.concurrent.TimeUnit;&#10;&#10;/**&#10; * Feign client configuration for better error handling and retry mechanism&#10; */&#10;@Configuration&#10;public class FeignConfig {&#10;&#10;    @Bean&#10;    Logger.Level feignLoggerLevel() {&#10;        return Logger.Level.BASIC;&#10;    }&#10;&#10;    @Bean&#10;    public Request.Options requestOptions() {&#10;        return new Request.Options(&#10;                10, TimeUnit.SECONDS, // connect timeout&#10;                60, TimeUnit.SECONDS, // read timeout&#10;                true // follow redirects&#10;        );&#10;    }&#10;&#10;    @Bean&#10;    public Retryer retryer() {&#10;        return new Retryer.Default(&#10;                1000, // initial interval&#10;                3000, // max interval&#10;                3     // max attempts&#10;        );&#10;    }&#10;&#10;    @Bean&#10;    public ErrorDecoder errorDecoder() {&#10;        return new CustomFeignErrorDecoder();&#10;    }&#10;&#10;    /**&#10;     * Custom error decoder to handle service communication errors gracefully&#10;     */&#10;    public static class CustomFeignErrorDecoder implements ErrorDecoder {&#10;        &#10;        @Override&#10;        public Exception decode(String methodKey, feign.Response response) {&#10;            switch (response.status()) {&#10;                case 400:&#10;                    return new IllegalArgumentException(&quot;Bad Request: &quot; + methodKey);&#10;                case 404:&#10;                    return new RuntimeException(&quot;Service not found: &quot; + methodKey);&#10;                case 500:&#10;                    return new RuntimeException(&quot;Internal Server Error in &quot; + methodKey);&#10;                case 503:&#10;                    return new RuntimeException(&quot;Service Unavailable: &quot; + methodKey);&#10;                default:&#10;                    return new RuntimeException(&quot;Unknown error occurred in &quot; + methodKey + &quot;: &quot; + response.status());&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/config/HealthCheckConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/config/HealthCheckConfig.java" />
              <option name="updatedContent" value="package com.ctuconnect.config;&#10;&#10;import org.springframework.boot.actuator.health.Health;&#10;import org.springframework.boot.actuator.health.HealthIndicator;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.data.redis.connection.RedisConnectionFactory;&#10;import org.springframework.data.mongodb.core.MongoTemplate;&#10;&#10;@Configuration&#10;public class HealthCheckConfig {&#10;    &#10;    @Bean&#10;    public HealthIndicator redisHealthIndicator(RedisConnectionFactory redisConnectionFactory) {&#10;        return () -&gt; {&#10;            try {&#10;                redisConnectionFactory.getConnection().ping();&#10;                return Health.up()&#10;                    .withDetail(&quot;redis&quot;, &quot;Available&quot;)&#10;                    .build();&#10;            } catch (Exception e) {&#10;                return Health.down()&#10;                    .withDetail(&quot;redis&quot;, &quot;Unavailable&quot;)&#10;                    .withDetail(&quot;error&quot;, e.getMessage())&#10;                    .build();&#10;            }&#10;        };&#10;    }&#10;    &#10;    @Bean&#10;    public HealthIndicator mongoHealthIndicator(MongoTemplate mongoTemplate) {&#10;        return () -&gt; {&#10;            try {&#10;                mongoTemplate.getCollection(&quot;health_check&quot;).countDocuments();&#10;                return Health.up()&#10;                    .withDetail(&quot;mongodb&quot;, &quot;Available&quot;)&#10;                    .build();&#10;            } catch (Exception e) {&#10;                return Health.down()&#10;                    .withDetail(&quot;mongodb&quot;, &quot;Unavailable&quot;)&#10;                    .withDetail(&quot;error&quot;, e.getMessage())&#10;                    .build();&#10;            }&#10;        };&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/config/WebConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/config/WebConfig.java" />
              <option name="updatedContent" value="package com.ctuconnect.config;&#10;&#10;import com.ctuconnect.security.AuthenticationInterceptor;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.web.servlet.config.annotation.InterceptorRegistry;&#10;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;&#10;&#10;/**&#10; * Web configuration to register security interceptors&#10; */&#10;@Configuration&#10;@RequiredArgsConstructor&#10;public class WebConfig implements WebMvcConfigurer {&#10;&#10;    private final AuthenticationInterceptor authenticationInterceptor;&#10;&#10;    @Override&#10;    public void addInterceptors(InterceptorRegistry registry) {&#10;        registry.addInterceptor(authenticationInterceptor)&#10;                .addPathPatterns(&quot;/api/**&quot;) // Apply to all API endpoints&#10;                .excludePathPatterns(&#10;                        &quot;/api/posts/health&quot;,&#10;                        &quot;/api/posts/actuator/**&quot;,&#10;                        &quot;/api/posts/swagger-ui/**&quot;,&#10;                        &quot;/api/posts/v3/api-docs/**&quot;&#10;                );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/config/WebSocketConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/config/WebSocketConfig.java" />
              <option name="updatedContent" value="package com.ctuconnect.config;&#10;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.messaging.simp.config.MessageBrokerRegistry;&#10;import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;&#10;import org.springframework.web.socket.config.annotation.StompEndpointRegistry;&#10;import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;&#10;&#10;@Configuration&#10;@EnableWebSocketMessageBroker&#10;public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {&#10;&#10;    @Override&#10;    public void configureMessageBroker(MessageBrokerRegistry config) {&#10;        // Enable simple message broker for in-memory message handling&#10;        config.enableSimpleBroker(&quot;/topic&quot;, &quot;/queue&quot;);&#10;        config.setApplicationDestinationPrefixes(&quot;/app&quot;);&#10;        config.setUserDestinationPrefix(&quot;/user&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void registerStompEndpoints(StompEndpointRegistry registry) {&#10;        // Register STOMP endpoints for WebSocket connections&#10;        registry.addEndpoint(&quot;/ws&quot;)&#10;                .setAllowedOriginPatterns(&quot;*&quot;)&#10;                .withSockJS();&#10;        &#10;        registry.addEndpoint(&quot;/ws-notifications&quot;)&#10;                .setAllowedOriginPatterns(&quot;*&quot;)&#10;                .withSockJS();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/controller/EnhancedPostController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/controller/EnhancedPostController.java" />
              <option name="updatedContent" value="// This file has been merged into PostController.java&#10;// Delete this file to avoid conflicts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/controller/PostController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/controller/PostController.java" />
              <option name="originalContent" value="package com.ctuconnect.controller;&#10;&#10;import com.ctuconnect.client.UserServiceClient;&#10;import com.ctuconnect.dto.AuthorInfo;&#10;import jakarta.validation.Valid;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.domain.Sort;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.web.multipart.MultipartFile;&#10;import com.ctuconnect.dto.request.CommentRequest;&#10;import com.ctuconnect.dto.request.InteractionRequest;&#10;import com.ctuconnect.dto.request.PostRequest;&#10;import com.ctuconnect.dto.request.ScheduledPostRequest;&#10;import com.ctuconnect.dto.response.CommentResponse;&#10;import com.ctuconnect.dto.response.InteractionResponse;&#10;import com.ctuconnect.dto.response.PostResponse;&#10;import com.ctuconnect.dto.response.PostAnalyticsResponse;&#10;import com.ctuconnect.security.SecurityContextHolder;&#10;import com.ctuconnect.security.annotation.RequireAuth;&#10;import com.ctuconnect.security.AuthenticatedUser;&#10;import com.ctuconnect.service.CommentService;&#10;import com.ctuconnect.service.InteractionService;&#10;import com.ctuconnect.service.PostService;&#10;import com.ctuconnect.service.NewsFeedService;&#10;import com.ctuconnect.service.NotificationService;&#10;import com.ctuconnect.service.UserSyncService;&#10;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/posts&quot;)&#10;public class PostController {&#10;&#10;    @Autowired&#10;    private PostService postService;&#10;&#10;    @Autowired&#10;    private CommentService commentService;&#10;&#10;    @Autowired&#10;    private InteractionService interactionService;&#10;&#10;    @Autowired(required = false)&#10;    private NewsFeedService newsFeedService;&#10;&#10;    @Autowired(required = false)&#10;    private NotificationService notificationService;&#10;&#10;    @Autowired&#10;    private UserSyncService userSyncService;&#10;    @Autowired&#10;    private UserServiceClient userServiceClient;&#10;&#10;    // ========== ENHANCED ENDPOINTS (Primary) ==========&#10;&#10;    /**&#10;     * Create post - Primary endpoint (Enhanced)&#10;     */&#10;    @PostMapping&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; createPost(@Valid @RequestBody PostRequest request) {&#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            &#10;            // Try enhanced service first, fallback to regular service&#10;            PostResponse response;&#10;            try {&#10;                AuthenticatedUser user = new AuthenticatedUser(currentUserId, null, null);&#10;                response = postService.createEnhancedPost(request, user);&#10;            } catch (Exception e) {&#10;                // Fallback to regular post creation&#10;                response = postService.createPost(request, null, currentUserId);&#10;            }&#10;            &#10;            // Invalidate caches if newsFeedService is available&#10;            if (newsFeedService != null) {&#10;                try {&#10;                    newsFeedService.invalidateFeedCacheForUsers(&#10;                        postService.getAffectedUserIds(response.getId()));&#10;                } catch (Exception e) {&#10;                    // Log error but don't fail the request&#10;                    System.err.println(&quot;Failed to invalidate cache: &quot; + e.getMessage());&#10;                }&#10;            }&#10;            &#10;            return ResponseEntity.status(HttpStatus.CREATED).body(response);&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Authentication required&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.status(HttpStatus.BAD_REQUEST)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to create post&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Internal server error&quot;, &quot;message&quot;, &quot;Failed to create post&quot;));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Facebook-like personalized news feed&#10;     */&#10;    @GetMapping(&quot;/feed&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; getPersonalizedFeed(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size) {&#10;        &#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            &#10;            if (newsFeedService != null) {&#10;                List&lt;PostResponse&gt; feed = newsFeedService.generatePersonalizedFeed(&#10;                    currentUserId, page, size);&#10;                return ResponseEntity.ok(feed);&#10;            } else {&#10;                // Fallback to regular posts&#10;                Pageable pageable = PageRequest.of(page, size, Sort.by(&quot;createdAt&quot;).descending());&#10;                Page&lt;PostResponse&gt; posts = postService.getAllPosts(pageable);&#10;                return ResponseEntity.ok(posts.getContent());&#10;            }&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to retrieve feed&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get trending posts - Unified endpoint&#10;     */&#10;    @GetMapping(&quot;/trending&quot;)&#10;    public ResponseEntity&lt;?&gt; getTrendingPosts(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;20&quot;) int size) {&#10;        &#10;        try {&#10;            List&lt;PostResponse&gt; posts;&#10;            &#10;            if (newsFeedService != null) {&#10;                posts = newsFeedService.getTrendingPosts(page, size);&#10;            } else {&#10;                // Fallback to top viewed posts&#10;                posts = postService.getTopViewedPosts();&#10;            }&#10;            &#10;            return ResponseEntity.ok(posts);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to retrieve trending posts&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get user timeline (profile posts)&#10;     */&#10;    @GetMapping(&quot;/timeline/{userId}&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; getUserTimeline(&#10;            @PathVariable String userId,&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size) {&#10;        &#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            &#10;            if (newsFeedService != null) {&#10;                List&lt;PostResponse&gt; timeline = newsFeedService.generateUserTimeline(&#10;                    userId, currentUserId, page, size);&#10;                return ResponseEntity.ok(timeline);&#10;            } else {&#10;                // Fallback to posts by author&#10;                Pageable pageable = PageRequest.of(page, size, Sort.by(&quot;createdAt&quot;).descending());&#10;                Page&lt;PostResponse&gt; posts = postService.getPostsByAuthor(userId, pageable);&#10;                return ResponseEntity.ok(posts.getContent());&#10;            }&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to retrieve timeline&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    // ========== LEGACY ENDPOINTS (Maintained for compatibility) ==========&#10;&#10;    /**&#10;     * Create post with file upload support&#10;     */&#10;    @PostMapping(&quot;/upload&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; createPostWithFiles(&#10;            @Valid @RequestPart(&quot;post&quot;) PostRequest request,&#10;            @RequestPart(value = &quot;files&quot;, required = false) List&lt;MultipartFile&gt; files) {&#10;        &#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            PostResponse response = postService.createPost(request, files, currentUserId);&#10;            return ResponseEntity.status(HttpStatus.CREATED).body(response);&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Authentication required&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.status(HttpStatus.BAD_REQUEST)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to create post&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Internal server error&quot;, &quot;message&quot;, &quot;Failed to create post&quot;));&#10;        }&#10;    }&#10;&#10;    // ========== COMMON ENDPOINTS ==========&#10;&#10;    /**&#10;     * Get all posts with pagination and filters&#10;     */&#10;    @GetMapping&#10;    public ResponseEntity&lt;?&gt; getAllPosts(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size,&#10;            @RequestParam(defaultValue = &quot;createdAt&quot;) String sortBy,&#10;            @RequestParam(defaultValue = &quot;desc&quot;) String sortDir,&#10;            @RequestParam(required = false) String authorId,&#10;            @RequestParam(required = false) String category,&#10;            @RequestParam(required = false) String search) {&#10;&#10;        try {&#10;            Sort sort = sortDir.equalsIgnoreCase(&quot;desc&quot;) ?&#10;                Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();&#10;            Pageable pageable = PageRequest.of(page, size, sort);&#10;&#10;            Page&lt;PostResponse&gt; posts;&#10;&#10;            if (search != null &amp;&amp; !search.trim().isEmpty()) {&#10;                posts = postService.searchPosts(search.trim(), pageable);&#10;            } else if (authorId != null &amp;&amp; !authorId.trim().isEmpty()) {&#10;                posts = postService.getPostsByAuthor(authorId.trim(), pageable);&#10;            } else if (category != null &amp;&amp; !category.trim().isEmpty()) {&#10;                posts = postService.getPostsByCategory(category.trim(), pageable);&#10;            } else {&#10;                posts = postService.getAllPosts(pageable);&#10;            }&#10;&#10;            return ResponseEntity.ok(posts);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to retrieve posts&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    @GetMapping(&quot;/me&quot;)&#10;    public ResponseEntity&lt;?&gt; getMyPosts(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size) {&#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            Pageable pageable = PageRequest.of(page, size, Sort.by(&quot;createdAt&quot;).descending());&#10;            Page&lt;PostResponse&gt; posts = postService.getPostsByAuthor(currentUserId, pageable);&#10;            return ResponseEntity.ok(posts);&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Authentication required&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to retrieve posts&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    @GetMapping(&quot;/user/{userId}&quot;)&#10;    public ResponseEntity&lt;?&gt; getUserPosts(&#10;            @PathVariable String userId,&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size)&#10;    {&#10;        try {&#10;            Pageable pageable = PageRequest.of(page, size, Sort.by(&quot;createdAt&quot;).descending());&#10;            Page&lt;PostResponse&gt; posts = postService.getPostsByAuthor(userId, pageable);&#10;            return ResponseEntity.ok(posts);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to retrieve user posts&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get post by ID (auto-record VIEW interaction)&#10;     */&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;?&gt; getPostById(@PathVariable String id) {&#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserId();&#10;            PostResponse post = postService.getPostById(id, currentUserId);&#10;            return ResponseEntity.ok(post);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.status(HttpStatus.NOT_FOUND)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Post not found&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to retrieve post&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Update post (author only)&#10;     */&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; updatePost(&#10;            @PathVariable String id,&#10;            @Valid @RequestBody PostRequest request) {&#10;        try {&#10;            String authorId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            PostResponse updatedPost = postService.updatePost(id, request, authorId);&#10;            return ResponseEntity.ok(updatedPost);&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Authentication required&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (RuntimeException e) {&#10;            String message = e.getMessage();&#10;            if (message.contains(&quot;Only the author&quot;)) {&#10;                return ResponseEntity.status(HttpStatus.FORBIDDEN)&#10;                        .body(Map.of(&quot;error&quot;, &quot;Access denied&quot;, &quot;message&quot;, message));&#10;            }&#10;            return ResponseEntity.status(HttpStatus.NOT_FOUND)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Post not found&quot;, &quot;message&quot;, message));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to update post&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Delete post (author only)&#10;     */&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; deletePost(@PathVariable String id) {&#10;        try {&#10;            String authorId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            postService.deletePost(id, authorId);&#10;            return ResponseEntity.noContent().build();&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Authentication required&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (RuntimeException e) {&#10;            String message = e.getMessage();&#10;            if (message.contains(&quot;Only the author&quot;)) {&#10;                return ResponseEntity.status(HttpStatus.FORBIDDEN)&#10;                        .body(Map.of(&quot;error&quot;, &quot;Access denied&quot;, &quot;message&quot;, message));&#10;            }&#10;            return ResponseEntity.status(HttpStatus.NOT_FOUND)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Post not found&quot;, &quot;message&quot;, message));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to delete post&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    // ========== INTERACTION ENDPOINTS ==========&#10;&#10;    /**&#10;     * Enhanced post interaction (like, comment, share)&#10;     */&#10;    @PostMapping(&quot;/{postId}/interact&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; interactWithPost(&#10;            @PathVariable String postId,&#10;            @RequestParam String action, // LIKE, UNLIKE, SHARE&#10;            @RequestParam(required = false) String reactionType) {&#10;        &#10;        try {&#10;            String userId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            &#10;            // Try enhanced interaction first&#10;            try {&#10;                postService.handlePostInteraction(postId, userId, action, reactionType);&#10;                &#10;                // Create notification for post author if services are available&#10;                if (!&quot;UNLIKE&quot;.equals(action) &amp;&amp; notificationService != null) {&#10;                    try {&#10;                        String authorId = postService.getPostAuthorId(postId);&#10;                        notificationService.createNotification(&#10;                            authorId,&#10;                            userId,&#10;                            &quot;POST_&quot; + action,&#10;                            &quot;POST&quot;,&#10;                            postId,&#10;                            &quot;User &quot; + action.toLowerCase() + &quot;d your post&quot;&#10;                        );&#10;                    } catch (Exception e) {&#10;                        // Log error but don't fail the request&#10;                        System.err.println(&quot;Failed to create notification: &quot; + e.getMessage());&#10;                    }&#10;                }&#10;                &#10;                return ResponseEntity.ok().build();&#10;            } catch (Exception e) {&#10;                // Fallback to legacy interaction handling&#10;                InteractionRequest request = new InteractionRequest();&#10;                // Set appropriate interaction type based on action&#10;                request.setType(mapActionToInteractionType(action));&#10;                &#10;                InteractionResponse interaction = interactionService.createInteraction(postId, request, userId);&#10;                if (interaction == null) {&#10;                    return ResponseEntity.noContent().build();&#10;                }&#10;                return ResponseEntity.status(HttpStatus.CREATED).body(interaction);&#10;            }&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.BAD_REQUEST)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to process interaction&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Add comment to post - Legacy endpoint&#10;     */&#10;    @PostMapping(&quot;/{id}/comments&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; addComment(&#10;            @PathVariable String id,&#10;            @Valid @RequestBody CommentRequest request) {&#10;        &#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            CommentResponse comment = commentService.createComment(id, request, currentUserId);&#10;            &#10;            // Create notification if service is available&#10;            if (notificationService != null) {&#10;                try {&#10;                    String authorId = postService.getPostAuthorId(id);&#10;                    notificationService.createNotification(&#10;                        authorId,&#10;                        currentUserId,&#10;                        &quot;POST_COMMENTED&quot;,&#10;                        &quot;POST&quot;,&#10;                        id,&#10;                        &quot;User commented on your post&quot;&#10;                    );&#10;                } catch (Exception e) {&#10;                    // Log error but don't fail the request&#10;                    System.err.println(&quot;Failed to create notification: &quot; + e.getMessage());&#10;                }&#10;            }&#10;            &#10;            return ResponseEntity.status(HttpStatus.CREATED).body(comment);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.badRequest()&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to add comment&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Add comment with string content - Enhanced endpoint&#10;     */&#10;    @PostMapping(&quot;/{postId}/comments/simple&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; addSimpleComment(&#10;            @PathVariable String postId,&#10;            @RequestBody String content) {&#10;        &#10;        try {&#10;            String userId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            &#10;            // Try enhanced comment service first&#10;            try {&#10;                postService.addComment(postId, userId, content);&#10;                &#10;                // Create notification&#10;                if (notificationService != null) {&#10;                    try {&#10;                        String authorId = postService.getPostAuthorId(postId);&#10;                        notificationService.createNotification(&#10;                            authorId,&#10;                            userId,&#10;                            &quot;POST_COMMENTED&quot;,&#10;                            &quot;POST&quot;,&#10;                            postId,&#10;                            &quot;User commented on your post&quot;&#10;                        );&#10;                    } catch (Exception e) {&#10;                        System.err.println(&quot;Failed to create notification: &quot; + e.getMessage());&#10;                    }&#10;                }&#10;                &#10;                return ResponseEntity.ok().build();&#10;            } catch (Exception e) {&#10;                // Fallback to legacy comment service&#10;                CommentRequest request = new CommentRequest();&#10;                request.setContent(content);&#10;                CommentResponse comment = commentService.createComment(postId, request, userId);&#10;                return ResponseEntity.status(HttpStatus.CREATED).body(comment);&#10;            }&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.BAD_REQUEST)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to add comment&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get comments for post&#10;     */&#10;    @GetMapping(&quot;/{id}/comments&quot;)&#10;    public ResponseEntity&lt;Page&lt;CommentResponse&gt;&gt; getComments(&#10;            @PathVariable String id,&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size) {&#10;&#10;        Pageable pageable = PageRequest.of(page, size, Sort.by(&quot;createdAt&quot;).ascending());&#10;        Page&lt;CommentResponse&gt; comments = commentService.getCommentsByPost(id, pageable);&#10;        return ResponseEntity.ok(comments);&#10;    }&#10;&#10;    /**&#10;     * Record interaction (LIKE/SHARE/BOOKMARK) - Legacy endpoint&#10;     */&#10;    @PostMapping(&quot;/{id}/interactions&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;InteractionResponse&gt; recordInteraction(&#10;            @PathVariable String id,&#10;            @Valid @RequestBody InteractionRequest request) {&#10;        String userId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;        try {&#10;            InteractionResponse interaction = interactionService.createInteraction(id, request, userId);&#10;            if (interaction == null) {&#10;                // Interaction was removed (e.g., unlike)&#10;                return ResponseEntity.noContent().build();&#10;            }&#10;            return ResponseEntity.status(HttpStatus.CREATED).body(interaction);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Check if user has liked post&#10;     */&#10;    @GetMapping(&quot;/{id}/likes/check&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;Boolean&gt; hasUserLikedPost(@PathVariable String id) {&#10;        String userId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;        boolean hasLiked = interactionService.hasUserReacted(id, userId);&#10;        return ResponseEntity.ok(hasLiked);&#10;    }&#10;&#10;    // ========== INTERACTION STATUS ENDPOINTS ==========&#10;&#10;    /**&#10;     * Check if user has liked a post&#10;     * This endpoint helps frontend maintain like state after page refresh&#10;     */&#10;    @GetMapping(&quot;/{postId}/interactions/like/status&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; checkLikeStatus(@PathVariable String postId) {&#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            boolean hasLiked = interactionService.hasUserLikedPost(postId, currentUserId);&#10;            return ResponseEntity.ok(Map.of(&#10;                &quot;postId&quot;, postId,&#10;                &quot;hasLiked&quot;, hasLiked,&#10;                &quot;userId&quot;, currentUserId&#10;            ));&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Authentication required&quot;));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to check like status&quot;));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Check if user has bookmarked a post&#10;     * This endpoint helps frontend maintain bookmark state after page refresh&#10;     */&#10;    @GetMapping(&quot;/{postId}/interactions/bookmark/status&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; checkBookmarkStatus(@PathVariable String postId) {&#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            boolean hasBookmarked = interactionService.hasUserBookmarkedPost(postId, currentUserId);&#10;            return ResponseEntity.ok(Map.of(&#10;                &quot;postId&quot;, postId,&#10;                &quot;hasBookmarked&quot;, hasBookmarked,&#10;                &quot;userId&quot;, currentUserId&#10;            ));&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Authentication required&quot;));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to check bookmark status&quot;));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get all user interactions for a post&#10;     * This endpoint provides complete interaction state for frontend&#10;     */&#10;    @GetMapping(&quot;/{postId}/interactions/status&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; getUserInteractionStatus(@PathVariable String postId) {&#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            boolean hasLiked = interactionService.hasUserLikedPost(postId, currentUserId);&#10;            boolean hasBookmarked = interactionService.hasUserBookmarkedPost(postId, currentUserId);&#10;&#10;            return ResponseEntity.ok(Map.of(&#10;                &quot;postId&quot;, postId,&#10;                &quot;userId&quot;, currentUserId,&#10;                &quot;hasLiked&quot;, hasLiked,&#10;                &quot;hasBookmarked&quot;, hasBookmarked,&#10;                &quot;interactions&quot;, Map.of(&#10;                    &quot;LIKE&quot;, hasLiked,&#10;                    &quot;BOOKMARK&quot;, hasBookmarked&#10;                )&#10;            ));&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Authentication required&quot;));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to get interaction status&quot;));&#10;        }&#10;    }&#10;&#10;    // ========== USER PROFILE SYNCHRONIZATION ENDPOINTS ==========&#10;&#10;    /**&#10;     * Manual user profile synchronization endpoint&#10;     * This endpoint allows manual synchronization of user profile data across post-service&#10;     */&#10;    @PostMapping(&quot;/admin/sync-user-profile/{userId}&quot;)&#10;    @RequireAuth(roles = {&quot;ADMIN&quot;})&#10;    public ResponseEntity&lt;?&gt; syncUserProfile(@PathVariable String userId) {&#10;        try {&#10;            // Get updated user info from user-service&#10;            AuthorInfo updatedAuthor = userServiceClient.getAuthorInfo(userId);&#10;            if (updatedAuthor == null) {&#10;                return ResponseEntity.status(HttpStatus.NOT_FOUND)&#10;                        .body(Map.of(&quot;error&quot;, &quot;User not found&quot;, &quot;userId&quot;, userId));&#10;            }&#10;&#10;            // Perform manual sync&#10;            userSyncService.manualSyncUserProfile(userId, updatedAuthor);&#10;&#10;            return ResponseEntity.ok(Map.of(&#10;                &quot;message&quot;, &quot;User profile synchronized successfully&quot;,&#10;                &quot;userId&quot;, userId,&#10;                &quot;updatedAuthor&quot;, updatedAuthor&#10;            ));&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Admin access required&quot;));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to sync user profile&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    // ========== HELPER METHODS ==========&#10;&#10;    private String mapActionToInteractionType(String action) {&#10;        switch (action.toUpperCase()) {&#10;            case &quot;LIKE&quot;:&#10;                return &quot;LIKE&quot;;&#10;            case &quot;SHARE&quot;:&#10;                return &quot;SHARE&quot;;&#10;            case &quot;BOOKMARK&quot;:&#10;                return &quot;BOOKMARK&quot;;&#10;            default:&#10;                return &quot;LIKE&quot;;&#10;        }&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ctuconnect.controller;&#10;&#10;import com.ctuconnect.client.UserServiceClient;&#10;import com.ctuconnect.dto.AuthorInfo;&#10;import jakarta.validation.Valid;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.PageRequest;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.domain.Sort;&#10;import org.springframework.http.HttpStatus;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.web.multipart.MultipartFile;&#10;import com.ctuconnect.dto.request.CommentRequest;&#10;import com.ctuconnect.dto.request.InteractionRequest;&#10;import com.ctuconnect.dto.request.PostRequest;&#10;import com.ctuconnect.dto.request.ScheduledPostRequest;&#10;import com.ctuconnect.dto.response.CommentResponse;&#10;import com.ctuconnect.dto.response.InteractionResponse;&#10;import com.ctuconnect.dto.response.PostResponse;&#10;import com.ctuconnect.dto.response.PostAnalyticsResponse;&#10;import com.ctuconnect.security.SecurityContextHolder;&#10;import com.ctuconnect.security.annotation.RequireAuth;&#10;import com.ctuconnect.security.AuthenticatedUser;&#10;import com.ctuconnect.service.CommentService;&#10;import com.ctuconnect.service.InteractionService;&#10;import com.ctuconnect.service.PostService;&#10;import com.ctuconnect.service.NewsFeedService;&#10;import com.ctuconnect.service.NotificationService;&#10;import com.ctuconnect.service.UserSyncService;&#10;&#10;import java.util.List;&#10;import java.util.Map;&#10;&#10;@RestController&#10;@RequestMapping(&quot;/api/posts&quot;)&#10;public class PostController {&#10;&#10;    @Autowired&#10;    private PostService postService;&#10;&#10;    @Autowired&#10;    private CommentService commentService;&#10;&#10;    @Autowired&#10;    private InteractionService interactionService;&#10;&#10;    @Autowired(required = false)&#10;    private NewsFeedService newsFeedService;&#10;&#10;    @Autowired(required = false)&#10;    private NotificationService notificationService;&#10;&#10;    @Autowired&#10;    private UserSyncService userSyncService;&#10;    @Autowired&#10;    private UserServiceClient userServiceClient;&#10;&#10;    // ========== ENHANCED ENDPOINTS (Primary) ==========&#10;&#10;    /**&#10;     * Create post - Primary endpoint (Enhanced)&#10;     */&#10;    @PostMapping&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; createPost(@Valid @RequestBody PostRequest request) {&#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            &#10;            // Try enhanced service first, fallback to regular service&#10;            PostResponse response;&#10;            try {&#10;                AuthenticatedUser user = new AuthenticatedUser(currentUserId, null, null);&#10;                response = postService.createEnhancedPost(request, user);&#10;            } catch (Exception e) {&#10;                // Fallback to regular post creation&#10;                response = postService.createPost(request, null, currentUserId);&#10;            }&#10;            &#10;            // Invalidate caches if newsFeedService is available&#10;            if (newsFeedService != null) {&#10;                try {&#10;                    newsFeedService.invalidateFeedCacheForUsers(&#10;                        postService.getAffectedUserIds(response.getId()));&#10;                } catch (Exception e) {&#10;                    // Log error but don't fail the request&#10;                    System.err.println(&quot;Failed to invalidate cache: &quot; + e.getMessage());&#10;                }&#10;            }&#10;            &#10;            return ResponseEntity.status(HttpStatus.CREATED).body(response);&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Authentication required&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.status(HttpStatus.BAD_REQUEST)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to create post&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Internal server error&quot;, &quot;message&quot;, &quot;Failed to create post&quot;));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Facebook-like personalized news feed&#10;     */&#10;    @GetMapping(&quot;/feed&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; getPersonalizedFeed(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size) {&#10;        &#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            &#10;            if (newsFeedService != null) {&#10;                List&lt;PostResponse&gt; feed = newsFeedService.generatePersonalizedFeed(&#10;                    currentUserId, page, size);&#10;                return ResponseEntity.ok(feed);&#10;            } else {&#10;                // Fallback to regular posts&#10;                Pageable pageable = PageRequest.of(page, size, Sort.by(&quot;createdAt&quot;).descending());&#10;                Page&lt;PostResponse&gt; posts = postService.getAllPosts(pageable);&#10;                return ResponseEntity.ok(posts.getContent());&#10;            }&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to retrieve feed&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get trending posts - Unified endpoint&#10;     */&#10;    @GetMapping(&quot;/trending&quot;)&#10;    public ResponseEntity&lt;?&gt; getTrendingPosts(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;20&quot;) int size) {&#10;        &#10;        try {&#10;            List&lt;PostResponse&gt; posts;&#10;            &#10;            if (newsFeedService != null) {&#10;                posts = newsFeedService.getTrendingPosts(page, size);&#10;            } else {&#10;                // Fallback to top viewed posts&#10;                posts = postService.getTopViewedPosts();&#10;            }&#10;            &#10;            return ResponseEntity.ok(posts);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to retrieve trending posts&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get user timeline (profile posts)&#10;     */&#10;    @GetMapping(&quot;/timeline/{userId}&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; getUserTimeline(&#10;            @PathVariable String userId,&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size) {&#10;        &#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            &#10;            if (newsFeedService != null) {&#10;                List&lt;PostResponse&gt; timeline = newsFeedService.generateUserTimeline(&#10;                    userId, currentUserId, page, size);&#10;                return ResponseEntity.ok(timeline);&#10;            } else {&#10;                // Fallback to posts by author&#10;                Pageable pageable = PageRequest.of(page, size, Sort.by(&quot;createdAt&quot;).descending());&#10;                Page&lt;PostResponse&gt; posts = postService.getPostsByAuthor(userId, pageable);&#10;                return ResponseEntity.ok(posts.getContent());&#10;            }&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to retrieve timeline&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    // ========== LEGACY ENDPOINTS (Maintained for compatibility) ==========&#10;&#10;    /**&#10;     * Create post with file upload support&#10;     */&#10;    @PostMapping(&quot;/upload&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; createPostWithFiles(&#10;            @Valid @RequestPart(&quot;post&quot;) PostRequest request,&#10;            @RequestPart(value = &quot;files&quot;, required = false) List&lt;MultipartFile&gt; files) {&#10;        &#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            PostResponse response = postService.createPost(request, files, currentUserId);&#10;            return ResponseEntity.status(HttpStatus.CREATED).body(response);&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Authentication required&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.status(HttpStatus.BAD_REQUEST)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to create post&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Internal server error&quot;, &quot;message&quot;, &quot;Failed to create post&quot;));&#10;        }&#10;    }&#10;&#10;    // ========== COMMON ENDPOINTS ==========&#10;&#10;    /**&#10;     * Get all posts with pagination and filters&#10;     */&#10;    @GetMapping&#10;    public ResponseEntity&lt;?&gt; getAllPosts(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size,&#10;            @RequestParam(defaultValue = &quot;createdAt&quot;) String sortBy,&#10;            @RequestParam(defaultValue = &quot;desc&quot;) String sortDir,&#10;            @RequestParam(required = false) String authorId,&#10;            @RequestParam(required = false) String category,&#10;            @RequestParam(required = false) String search) {&#10;&#10;        try {&#10;            Sort sort = sortDir.equalsIgnoreCase(&quot;desc&quot;) ?&#10;                Sort.by(sortBy).descending() : Sort.by(sortBy).ascending();&#10;            Pageable pageable = PageRequest.of(page, size, sort);&#10;&#10;            Page&lt;PostResponse&gt; posts;&#10;&#10;            if (search != null &amp;&amp; !search.trim().isEmpty()) {&#10;                posts = postService.searchPosts(search.trim(), pageable);&#10;            } else if (authorId != null &amp;&amp; !authorId.trim().isEmpty()) {&#10;                posts = postService.getPostsByAuthor(authorId.trim(), pageable);&#10;            } else if (category != null &amp;&amp; !category.trim().isEmpty()) {&#10;                posts = postService.getPostsByCategory(category.trim(), pageable);&#10;            } else {&#10;                posts = postService.getAllPosts(pageable);&#10;            }&#10;&#10;            return ResponseEntity.ok(posts);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to retrieve posts&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    @GetMapping(&quot;/me&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; getMyPosts(&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size) {&#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            System.out.println(&quot;DEBUG: Getting posts for current user ID: &quot; + currentUserId);&#10;            &#10;            Pageable pageable = PageRequest.of(page, size, Sort.by(&quot;createdAt&quot;).descending());&#10;            Page&lt;PostResponse&gt; posts = postService.getPostsByAuthor(currentUserId, pageable);&#10;            &#10;            System.out.println(&quot;DEBUG: Found &quot; + posts.getTotalElements() + &quot; posts for user &quot; + currentUserId);&#10;            &#10;            // Additional debugging - log first few post author IDs&#10;            posts.getContent().stream().limit(3).forEach(post -&gt; {&#10;                System.out.println(&quot;DEBUG: Post ID: &quot; + post.getId() + &quot;, Author ID: &quot; + &#10;                    (post.getAuthor() != null ? post.getAuthor().getId() : &quot;null&quot;));&#10;            });&#10;            &#10;            return ResponseEntity.ok(posts);&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Authentication required&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (Exception e) {&#10;            System.err.println(&quot;ERROR in getMyPosts: &quot; + e.getMessage());&#10;            e.printStackTrace();&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to retrieve posts&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    @GetMapping(&quot;/user/{userId}&quot;)&#10;    public ResponseEntity&lt;?&gt; getUserPosts(&#10;            @PathVariable String userId,&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size)&#10;    {&#10;        try {&#10;            Pageable pageable = PageRequest.of(page, size, Sort.by(&quot;createdAt&quot;).descending());&#10;            Page&lt;PostResponse&gt; posts = postService.getPostsByAuthor(userId, pageable);&#10;            return ResponseEntity.ok(posts);&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to retrieve user posts&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get post by ID (auto-record VIEW interaction)&#10;     */&#10;    @GetMapping(&quot;/{id}&quot;)&#10;    public ResponseEntity&lt;?&gt; getPostById(@PathVariable String id) {&#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserId();&#10;            PostResponse post = postService.getPostById(id, currentUserId);&#10;            return ResponseEntity.ok(post);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.status(HttpStatus.NOT_FOUND)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Post not found&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to retrieve post&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Update post (author only)&#10;     */&#10;    @PutMapping(&quot;/{id}&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; updatePost(&#10;            @PathVariable String id,&#10;            @Valid @RequestBody PostRequest request) {&#10;        try {&#10;            String authorId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            PostResponse updatedPost = postService.updatePost(id, request, authorId);&#10;            return ResponseEntity.ok(updatedPost);&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Authentication required&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (RuntimeException e) {&#10;            String message = e.getMessage();&#10;            if (message.contains(&quot;Only the author&quot;)) {&#10;                return ResponseEntity.status(HttpStatus.FORBIDDEN)&#10;                        .body(Map.of(&quot;error&quot;, &quot;Access denied&quot;, &quot;message&quot;, message));&#10;            }&#10;            return ResponseEntity.status(HttpStatus.NOT_FOUND)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Post not found&quot;, &quot;message&quot;, message));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to update post&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Delete post (author only)&#10;     */&#10;    @DeleteMapping(&quot;/{id}&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; deletePost(@PathVariable String id) {&#10;        try {&#10;            String authorId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            postService.deletePost(id, authorId);&#10;            return ResponseEntity.noContent().build();&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Authentication required&quot;, &quot;message&quot;, e.getMessage()));&#10;        } catch (RuntimeException e) {&#10;            String message = e.getMessage();&#10;            if (message.contains(&quot;Only the author&quot;)) {&#10;                return ResponseEntity.status(HttpStatus.FORBIDDEN)&#10;                        .body(Map.of(&quot;error&quot;, &quot;Access denied&quot;, &quot;message&quot;, message));&#10;            }&#10;            return ResponseEntity.status(HttpStatus.NOT_FOUND)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Post not found&quot;, &quot;message&quot;, message));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to delete post&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    // ========== INTERACTION ENDPOINTS ==========&#10;&#10;    /**&#10;     * Enhanced post interaction (like, comment, share)&#10;     */&#10;    @PostMapping(&quot;/{postId}/interact&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; interactWithPost(&#10;            @PathVariable String postId,&#10;            @RequestParam String action, // LIKE, UNLIKE, SHARE&#10;            @RequestParam(required = false) String reactionType) {&#10;        &#10;        try {&#10;            String userId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            &#10;            // Try enhanced interaction first&#10;            try {&#10;                postService.handlePostInteraction(postId, userId, action, reactionType);&#10;                &#10;                // Create notification for post author if services are available&#10;                if (!&quot;UNLIKE&quot;.equals(action) &amp;&amp; notificationService != null) {&#10;                    try {&#10;                        String authorId = postService.getPostAuthorId(postId);&#10;                        notificationService.createNotification(&#10;                            authorId,&#10;                            userId,&#10;                            &quot;POST_&quot; + action,&#10;                            &quot;POST&quot;,&#10;                            postId,&#10;                            &quot;User &quot; + action.toLowerCase() + &quot;d your post&quot;&#10;                        );&#10;                    } catch (Exception e) {&#10;                        // Log error but don't fail the request&#10;                        System.err.println(&quot;Failed to create notification: &quot; + e.getMessage());&#10;                    }&#10;                }&#10;                &#10;                return ResponseEntity.ok().build();&#10;            } catch (Exception e) {&#10;                // Fallback to legacy interaction handling&#10;                InteractionRequest request = new InteractionRequest();&#10;                // Set appropriate interaction type based on action&#10;                request.setType(mapActionToInteractionType(action));&#10;                &#10;                InteractionResponse interaction = interactionService.createInteraction(postId, request, userId);&#10;                if (interaction == null) {&#10;                    return ResponseEntity.noContent().build();&#10;                }&#10;                return ResponseEntity.status(HttpStatus.CREATED).body(interaction);&#10;            }&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.BAD_REQUEST)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to process interaction&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Add comment to post - Legacy endpoint&#10;     */&#10;    @PostMapping(&quot;/{id}/comments&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; addComment(&#10;            @PathVariable String id,&#10;            @Valid @RequestBody CommentRequest request) {&#10;        &#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            CommentResponse comment = commentService.createComment(id, request, currentUserId);&#10;            &#10;            // Create notification if service is available&#10;            if (notificationService != null) {&#10;                try {&#10;                    String authorId = postService.getPostAuthorId(id);&#10;                    notificationService.createNotification(&#10;                        authorId,&#10;                        currentUserId,&#10;                        &quot;POST_COMMENTED&quot;,&#10;                        &quot;POST&quot;,&#10;                        id,&#10;                        &quot;User commented on your post&quot;&#10;                    );&#10;                } catch (Exception e) {&#10;                    // Log error but don't fail the request&#10;                    System.err.println(&quot;Failed to create notification: &quot; + e.getMessage());&#10;                }&#10;            }&#10;            &#10;            return ResponseEntity.status(HttpStatus.CREATED).body(comment);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.badRequest()&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to add comment&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Add comment with string content - Enhanced endpoint&#10;     */&#10;    @PostMapping(&quot;/{postId}/comments/simple&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; addSimpleComment(&#10;            @PathVariable String postId,&#10;            @RequestBody String content) {&#10;        &#10;        try {&#10;            String userId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            &#10;            // Try enhanced comment service first&#10;            try {&#10;                postService.addComment(postId, userId, content);&#10;                &#10;                // Create notification&#10;                if (notificationService != null) {&#10;                    try {&#10;                        String authorId = postService.getPostAuthorId(postId);&#10;                        notificationService.createNotification(&#10;                            authorId,&#10;                            userId,&#10;                            &quot;POST_COMMENTED&quot;,&#10;                            &quot;POST&quot;,&#10;                            postId,&#10;                            &quot;User commented on your post&quot;&#10;                        );&#10;                    } catch (Exception e) {&#10;                        System.err.println(&quot;Failed to create notification: &quot; + e.getMessage());&#10;                    }&#10;                }&#10;                &#10;                return ResponseEntity.ok().build();&#10;            } catch (Exception e) {&#10;                // Fallback to legacy comment service&#10;                CommentRequest request = new CommentRequest();&#10;                request.setContent(content);&#10;                CommentResponse comment = commentService.createComment(postId, request, userId);&#10;                return ResponseEntity.status(HttpStatus.CREATED).body(comment);&#10;            }&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.BAD_REQUEST)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to add comment&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get comments for post&#10;     */&#10;    @GetMapping(&quot;/{id}/comments&quot;)&#10;    public ResponseEntity&lt;Page&lt;CommentResponse&gt;&gt; getComments(&#10;            @PathVariable String id,&#10;            @RequestParam(defaultValue = &quot;0&quot;) int page,&#10;            @RequestParam(defaultValue = &quot;10&quot;) int size) {&#10;&#10;        Pageable pageable = PageRequest.of(page, size, Sort.by(&quot;createdAt&quot;).ascending());&#10;        Page&lt;CommentResponse&gt; comments = commentService.getCommentsByPost(id, pageable);&#10;        return ResponseEntity.ok(comments);&#10;    }&#10;&#10;    /**&#10;     * Record interaction (LIKE/SHARE/BOOKMARK) - Legacy endpoint&#10;     */&#10;    @PostMapping(&quot;/{id}/interactions&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;InteractionResponse&gt; recordInteraction(&#10;            @PathVariable String id,&#10;            @Valid @RequestBody InteractionRequest request) {&#10;        String userId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;        try {&#10;            InteractionResponse interaction = interactionService.createInteraction(id, request, userId);&#10;            if (interaction == null) {&#10;                // Interaction was removed (e.g., unlike)&#10;                return ResponseEntity.noContent().build();&#10;            }&#10;            return ResponseEntity.status(HttpStatus.CREATED).body(interaction);&#10;        } catch (RuntimeException e) {&#10;            return ResponseEntity.badRequest().build();&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Check if user has liked post&#10;     */&#10;    @GetMapping(&quot;/{id}/likes/check&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;Boolean&gt; hasUserLikedPost(@PathVariable String id) {&#10;        String userId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;        boolean hasLiked = interactionService.hasUserReacted(id, userId);&#10;        return ResponseEntity.ok(hasLiked);&#10;    }&#10;&#10;    // ========== INTERACTION STATUS ENDPOINTS ==========&#10;&#10;    /**&#10;     * Check if user has liked a post&#10;     * This endpoint helps frontend maintain like state after page refresh&#10;     */&#10;    @GetMapping(&quot;/{postId}/interactions/like/status&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; checkLikeStatus(@PathVariable String postId) {&#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            boolean hasLiked = interactionService.hasUserLikedPost(postId, currentUserId);&#10;            return ResponseEntity.ok(Map.of(&#10;                &quot;postId&quot;, postId,&#10;                &quot;hasLiked&quot;, hasLiked,&#10;                &quot;userId&quot;, currentUserId&#10;            ));&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Authentication required&quot;));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to check like status&quot;));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Check if user has bookmarked a post&#10;     * This endpoint helps frontend maintain bookmark state after page refresh&#10;     */&#10;    @GetMapping(&quot;/{postId}/interactions/bookmark/status&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; checkBookmarkStatus(@PathVariable String postId) {&#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            boolean hasBookmarked = interactionService.hasUserBookmarkedPost(postId, currentUserId);&#10;            return ResponseEntity.ok(Map.of(&#10;                &quot;postId&quot;, postId,&#10;                &quot;hasBookmarked&quot;, hasBookmarked,&#10;                &quot;userId&quot;, currentUserId&#10;            ));&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Authentication required&quot;));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to check bookmark status&quot;));&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Get all user interactions for a post&#10;     * This endpoint provides complete interaction state for frontend&#10;     */&#10;    @GetMapping(&quot;/{postId}/interactions/status&quot;)&#10;    @RequireAuth&#10;    public ResponseEntity&lt;?&gt; getUserInteractionStatus(@PathVariable String postId) {&#10;        try {&#10;            String currentUserId = SecurityContextHolder.getCurrentUserIdOrThrow();&#10;            boolean hasLiked = interactionService.hasUserLikedPost(postId, currentUserId);&#10;            boolean hasBookmarked = interactionService.hasUserBookmarkedPost(postId, currentUserId);&#10;&#10;            return ResponseEntity.ok(Map.of(&#10;                &quot;postId&quot;, postId,&#10;                &quot;userId&quot;, currentUserId,&#10;                &quot;hasLiked&quot;, hasLiked,&#10;                &quot;hasBookmarked&quot;, hasBookmarked,&#10;                &quot;interactions&quot;, Map.of(&#10;                    &quot;LIKE&quot;, hasLiked,&#10;                    &quot;BOOKMARK&quot;, hasBookmarked&#10;                )&#10;            ));&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Authentication required&quot;));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to get interaction status&quot;));&#10;        }&#10;    }&#10;&#10;    // ========== USER PROFILE SYNCHRONIZATION ENDPOINTS ==========&#10;&#10;    /**&#10;     * Manual user profile synchronization endpoint&#10;     * This endpoint allows manual synchronization of user profile data across post-service&#10;     */&#10;    @PostMapping(&quot;/admin/sync-user-profile/{userId}&quot;)&#10;    @RequireAuth(roles = {&quot;ADMIN&quot;})&#10;    public ResponseEntity&lt;?&gt; syncUserProfile(@PathVariable String userId) {&#10;        try {&#10;            // Get updated user info from user-service&#10;            AuthorInfo updatedAuthor = userServiceClient.getAuthorInfo(userId);&#10;            if (updatedAuthor == null) {&#10;                return ResponseEntity.status(HttpStatus.NOT_FOUND)&#10;                        .body(Map.of(&quot;error&quot;, &quot;User not found&quot;, &quot;userId&quot;, userId));&#10;            }&#10;&#10;            // Perform manual sync&#10;            userSyncService.manualSyncUserProfile(userId, updatedAuthor);&#10;&#10;            return ResponseEntity.ok(Map.of(&#10;                &quot;message&quot;, &quot;User profile synchronized successfully&quot;,&#10;                &quot;userId&quot;, userId,&#10;                &quot;updatedAuthor&quot;, updatedAuthor&#10;            ));&#10;        } catch (SecurityException e) {&#10;            return ResponseEntity.status(HttpStatus.UNAUTHORIZED)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Admin access required&quot;));&#10;        } catch (Exception e) {&#10;            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR)&#10;                    .body(Map.of(&quot;error&quot;, &quot;Failed to sync user profile&quot;, &quot;message&quot;, e.getMessage()));&#10;        }&#10;    }&#10;&#10;    // ========== HELPER METHODS ==========&#10;&#10;    private String mapActionToInteractionType(String action) {&#10;        switch (action.toUpperCase()) {&#10;            case &quot;LIKE&quot;:&#10;                return &quot;LIKE&quot;;&#10;            case &quot;SHARE&quot;:&#10;                return &quot;SHARE&quot;;&#10;            case &quot;BOOKMARK&quot;:&#10;                return &quot;BOOKMARK&quot;;&#10;            default:&#10;                return &quot;LIKE&quot;;&#10;        }&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/repository/CommentRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/repository/CommentRepository.java" />
              <option name="originalContent" value="package com.ctuconnect.repository;&#10;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.mongodb.repository.MongoRepository;&#10;import org.springframework.data.mongodb.repository.Query;&#10;import org.springframework.stereotype.Repository;&#10;import com.ctuconnect.entity.CommentEntity;&#10;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface CommentRepository extends MongoRepository&lt;CommentEntity, String&gt; {&#10;&#10;    Page&lt;CommentEntity&gt; findByPostId(String postId, Pageable pageable);&#10;&#10;    List&lt;CommentEntity&gt; findByPostIdAndParentCommentIdIsNull(String postId);&#10;&#10;    List&lt;CommentEntity&gt; findByParentCommentId(String parentCommentId);&#10;&#10;    long countByPostId(String postId);&#10;&#10;    // Fix: Use MongoDB query for nested author object&#10;    @Query(value = &quot;{ 'author.id': ?0 }&quot;, count = true)&#10;    long countByAuthor_Id(String authorId);&#10;&#10;    void deleteByPostId(String postId);&#10;&#10;    // Additional useful queries for nested author structure&#10;    @Query(&quot;{ 'author.id': ?0 }&quot;)&#10;    Page&lt;CommentEntity&gt; findByAuthor_Id(String authorId, Pageable pageable);&#10;&#10;    // Add method that AdminController is calling (without underscore)&#10;    @Query(value = &quot;{ 'author.id': ?0 }&quot;, count = true)&#10;    long countByAuthorId(String authorId);&#10;}&#10;" />
              <option name="updatedContent" value="package com.ctuconnect.repository;&#13;&#10;&#13;&#10;import org.springframework.data.domain.Page;&#13;&#10;import org.springframework.data.domain.Pageable;&#13;&#10;import org.springframework.data.mongodb.repository.MongoRepository;&#13;&#10;import org.springframework.data.mongodb.repository.Query;&#13;&#10;import org.springframework.stereotype.Repository;&#13;&#10;import com.ctuconnect.entity.CommentEntity;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;@Repository&#13;&#10;public interface CommentRepository extends MongoRepository&lt;CommentEntity, String&gt; {&#13;&#10;&#13;&#10;    Page&lt;CommentEntity&gt; findByPostId(String postId, Pageable pageable);&#13;&#10;&#13;&#10;    List&lt;CommentEntity&gt; findByPostIdAndParentCommentIdIsNull(String postId);&#13;&#10;&#13;&#10;    List&lt;CommentEntity&gt; findByParentCommentId(String parentCommentId);&#13;&#10;&#13;&#10;    long countByPostId(String postId);&#13;&#10;&#13;&#10;    // Fix: Use MongoDB query for nested author object&#13;&#10;    @Query(value = &quot;{ 'author.id': ?0 }&quot;, count = true)&#13;&#10;    long countByAuthor_Id(String authorId);&#13;&#10;&#13;&#10;    void deleteByPostId(String postId);&#13;&#10;&#13;&#10;    // Additional useful queries for nested author structure&#13;&#10;    @Query(&quot;{ 'author.id': ?0 }&quot;)&#13;&#10;    Page&lt;CommentEntity&gt; findByAuthor_Id(String authorId, Pageable pageable);&#13;&#10;&#13;&#10;    // Add method that AdminController is calling (without underscore)&#13;&#10;    @Query(value = &quot;{ 'author.id': ?0 }&quot;, count = true)&#13;&#10;    long countByAuthorId(String authorId);&#13;&#10;&#13;&#10;    // Method for user profile synchronization - find all comments by author ID&#13;&#10;    @Query(&quot;{ 'author.id': ?0 }&quot;)&#13;&#10;    List&lt;CommentEntity&gt; findByAuthor_Id(String authorId);&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/service/PostService.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/service/PostService.java" />
              <option name="originalContent" value="package com.ctuconnect.service;&#10;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.stereotype.Service;&#10;import org.springframework.web.multipart.MultipartFile;&#10;import com.ctuconnect.client.MediaServiceClient;&#10;import com.ctuconnect.client.UserServiceClient;&#10;import com.ctuconnect.dto.AuthorInfo;&#10;import com.ctuconnect.dto.request.PostRequest;&#10;import com.ctuconnect.dto.request.ScheduledPostRequest;&#10;import com.ctuconnect.dto.response.PostResponse;&#10;import com.ctuconnect.dto.response.PostAnalyticsResponse;&#10;import com.ctuconnect.entity.InteractionEntity;&#10;import com.ctuconnect.entity.PostEntity;&#10;import com.ctuconnect.entity.CommentEntity;&#10;import com.ctuconnect.repository.CommentRepository;&#10;import com.ctuconnect.repository.InteractionRepository;&#10;import com.ctuconnect.repository.PostRepository;&#10;import com.ctuconnect.security.AuthenticatedUser;&#10;&#10;import java.util.ArrayList;&#10;import java.util.HashSet;&#10;import java.util.List;&#10;import java.util.Optional;&#10;import java.util.Set;&#10;import java.util.stream.Collectors;&#10;&#10;@Service&#10;public class PostService {&#10;&#10;    @Autowired&#10;    private PostRepository postRepository;&#10;&#10;    @Autowired&#10;    private CommentRepository commentRepository;&#10;&#10;    @Autowired&#10;    private InteractionRepository interactionRepository;&#10;&#10;    @Autowired&#10;    private MediaServiceClient mediaServiceClient;&#10;&#10;    @Autowired&#10;    private UserServiceClient userServiceClient;&#10;&#10;    @Autowired&#10;    private EventService eventService;&#10;&#10;    public PostResponse createPost(PostRequest request, List&lt;MultipartFile&gt; files, String authorId) {&#10;        AuthorInfo author = userServiceClient.getAuthorInfo(authorId);&#10;        if (author == null) {&#10;            throw new RuntimeException(&quot;Author not found with id: &quot; + authorId);&#10;        }&#10;&#10;        PostEntity post = PostEntity.builder()&#10;                .title(request.getTitle())&#10;                .content(request.getContent())&#10;                .author(author)&#10;                .images(new ArrayList&lt;&gt;())&#10;                .tags(request.getTags() != null ? request.getTags() : new ArrayList&lt;&gt;())&#10;                .category(request.getCategory())&#10;                .privacy(request.getVisibility() != null ? request.getVisibility() : &quot;PUBLIC&quot;)&#10;                .stats(new PostEntity.PostStats())&#10;                .build();&#10;&#10;        // Upload files to media-service&#10;        if (files != null &amp;&amp; !files.isEmpty()) {&#10;            List&lt;String&gt; imageUrls = new ArrayList&lt;&gt;();&#10;            for (MultipartFile file : files) {&#10;                if (!file.isEmpty()) {&#10;                    try {&#10;                        MediaServiceClient.MediaUploadResponse uploadResponse =&#10;                            mediaServiceClient.uploadFile(file, getFileType(file));&#10;                        imageUrls.add(uploadResponse.getFileUrl());&#10;                    } catch (Exception e) {&#10;                        // Log error but continue processing&#10;                        System.err.println(&quot;Failed to upload file: &quot; + e.getMessage());&#10;                    }&#10;                }&#10;            }&#10;            post.setImages(imageUrls);&#10;        }&#10;&#10;        PostEntity savedPost = postRepository.save(post);&#10;&#10;        // Publish event&#10;        eventService.publishPostEvent(&quot;POST_CREATED&quot;, savedPost.getId(), savedPost.getAuthorId(), savedPost);&#10;&#10;        return new PostResponse(savedPost);&#10;    }&#10;&#10;    public Page&lt;PostResponse&gt; getAllPosts(Pageable pageable) {&#10;        Page&lt;PostEntity&gt; posts = postRepository.findAll(pageable);&#10;        &#10;        // Recalculate stats for each post before returning&#10;        posts.forEach(this::recalculatePostStats);&#10;        postRepository.saveAll(posts.getContent());&#10;        &#10;        return posts.map(PostResponse::new);&#10;    }&#10;&#10;    public Page&lt;PostResponse&gt; getPostsByAuthor(String authorId, Pageable pageable) {&#10;        Page&lt;PostEntity&gt; posts = postRepository.findByAuthor_Id(authorId, pageable);&#10;        &#10;        // Recalculate stats for each post before returning&#10;        posts.forEach(this::recalculatePostStats);&#10;        postRepository.saveAll(posts.getContent());&#10;        &#10;        return posts.map(PostResponse::new);&#10;    }&#10;&#10;    public Page&lt;PostResponse&gt; getPostsByCategory(String category, Pageable pageable) {&#10;        return postRepository.findByCategory(category, pageable)&#10;                .map(PostResponse::new);&#10;    }&#10;&#10;    public Page&lt;PostResponse&gt; searchPosts(String searchTerm, Pageable pageable) {&#10;        return postRepository.findByTitleContainingOrContentContaining(searchTerm, searchTerm, pageable)&#10;                .map(PostResponse::new);&#10;    }&#10;&#10;    public PostResponse getPostById(String id, String currentUserId) {&#10;        Optional&lt;PostEntity&gt; postOpt = postRepository.findById(id);&#10;        if (postOpt.isPresent()) {&#10;            PostEntity post = postOpt.get();&#10;&#10;            // Record view interaction if user is different from author&#10;            if (currentUserId != null &amp;&amp; !currentUserId.equals(post.getAuthorId())) {&#10;                recordViewInteraction(post.getId(), currentUserId);&#10;            }&#10;&#10;            // Recalculate stats from database before returning&#10;            recalculatePostStats(post);&#10;            postRepository.save(post);&#10;            &#10;            return new PostResponse(post);&#10;        }&#10;        throw new RuntimeException(&quot;Post not found with id: &quot; + id);&#10;    }&#10;&#10;    /**&#10;     * Recalculate post stats from actual interactions in database&#10;     * This fixes the issue where stats show 0 even when interactions exist&#10;     */&#10;    private void recalculatePostStats(PostEntity post) {&#10;        // Count actual likes from interactions&#10;        long likeCount = interactionRepository.countByPostIdAndType(post.getId(), InteractionEntity.InteractionType.LIKE);&#10;        long bookmarkCount = interactionRepository.countByPostIdAndType(post.getId(), InteractionEntity.InteractionType.BOOKMARK);&#10;        long shareCount = interactionRepository.countByPostIdAndType(post.getId(), InteractionEntity.InteractionType.SHARE);&#10;        &#10;        // Count comments&#10;        long commentCount = commentRepository.countByPostId(post.getId());&#10;        &#10;        // Update post stats&#10;        post.getStats().setLikes(likeCount);&#10;        post.getStats().setComments(commentCount); &#10;        post.getStats().setShares(shareCount);&#10;        &#10;        // Update reactions map for LIKE type&#10;        post.getStats().getReactions().put(InteractionEntity.ReactionType.LIKE, (int) likeCount);&#10;    }&#10;&#10;    public PostResponse updatePost(String id, PostRequest request, String authorId) {&#10;        Optional&lt;PostEntity&gt; postOpt = postRepository.findById(id);&#10;        if (postOpt.isPresent()) {&#10;            PostEntity post = postOpt.get();&#10;&#10;            // Check if user is the author&#10;            if (!post.getAuthorId().equals(authorId)) {&#10;                throw new RuntimeException(&quot;Only the author can update this post&quot;);&#10;            }&#10;&#10;            if (request.getTitle() != null) {&#10;                post.setTitle(request.getTitle());&#10;            }&#10;            if (request.getContent() != null) {&#10;                post.setContent(request.getContent());&#10;            }&#10;            if (request.getTags() != null) {&#10;                post.setTags(request.getTags());&#10;            }&#10;            if (request.getCategory() != null) {&#10;                post.setCategory(request.getCategory());&#10;            }&#10;            if (request.getVisibility() != null) {&#10;                post.setVisibility(request.getVisibility());&#10;            }&#10;&#10;            PostEntity savedPost = postRepository.save(post);&#10;&#10;            // Publish event&#10;            eventService.publishPostEvent(&quot;POST_UPDATED&quot;, savedPost.getId(), savedPost.getAuthorId(), savedPost);&#10;&#10;            return new PostResponse(savedPost);&#10;        }&#10;        throw new RuntimeException(&quot;Post not found with id: &quot; + id);&#10;    }&#10;&#10;    public void deletePost(String id, String authorId) {&#10;        Optional&lt;PostEntity&gt; postOpt = postRepository.findById(id);&#10;        if (postOpt.isPresent()) {&#10;            PostEntity post = postOpt.get();&#10;&#10;            // Check if user is the author&#10;            if (!post.getAuthorId().equals(authorId)) {&#10;                throw new RuntimeException(&quot;Only the author can delete this post&quot;);&#10;            }&#10;&#10;            // Delete associated comments and interactions&#10;            commentRepository.deleteByPostId(id);&#10;            interactionRepository.deleteByPostId(id);&#10;&#10;            // Delete the post&#10;            postRepository.deleteById(id);&#10;&#10;            // Publish event&#10;            eventService.publishPostEvent(&quot;POST_DELETED&quot;, id, authorId, post);&#10;        } else {&#10;            throw new RuntimeException(&quot;Post not found with id: &quot; + id);&#10;        }&#10;    }&#10;&#10;    private void recordViewInteraction(String postId, String userId) {&#10;        try {&#10;            AuthorInfo author = userServiceClient.getAuthorInfo(userId);&#10;            if (author == null) return;&#10;&#10;            // Check if user already viewed this post recently (within last hour)&#10;            Optional&lt;InteractionEntity&gt; existingView = interactionRepository&#10;                    .findByPostIdAndAuthor_IdAndType(postId, userId, InteractionEntity.InteractionType.VIEW);&#10;&#10;            if (existingView.isEmpty()) {&#10;                // Create view interaction&#10;                InteractionEntity viewInteraction = new InteractionEntity(postId, author, InteractionEntity.InteractionType.VIEW);&#10;                interactionRepository.save(viewInteraction);&#10;&#10;                // Update post stats&#10;                Optional&lt;PostEntity&gt; postOpt = postRepository.findById(postId);&#10;                if (postOpt.isPresent()) {&#10;                    PostEntity post = postOpt.get();&#10;                    post.getStats().incrementViews();&#10;                    postRepository.save(post);&#10;                }&#10;&#10;                // Publish interaction event&#10;                eventService.publishInteractionEvent(postId, userId, &quot;VIEW&quot;);&#10;            }&#10;        } catch (Exception e) {&#10;            // Log error but don't fail the main operation&#10;            System.err.println(&quot;Failed to record view interaction: &quot; + e.getMessage());&#10;        }&#10;    }&#10;&#10;    private String getFileType(MultipartFile file) {&#10;        String contentType = file.getContentType();&#10;        if (contentType != null) {&#10;            if (contentType.startsWith(&quot;image/&quot;)) return &quot;IMAGE&quot;;&#10;            if (contentType.startsWith(&quot;video/&quot;)) return &quot;VIDEO&quot;;&#10;            if (contentType.startsWith(&quot;audio/&quot;)) return &quot;AUDIO&quot;;&#10;            if (contentType.equals(&quot;application/pdf&quot;)) return &quot;PDF&quot;;&#10;        }&#10;        return &quot;DOCUMENT&quot;;&#10;    }&#10;&#10;    public List&lt;PostResponse&gt; getTopViewedPosts() {&#10;        return postRepository.findTop10ByOrderByStatsViewsDesc()&#10;                .stream()&#10;                .map(PostResponse::new)&#10;                .toList();&#10;    }&#10;&#10;    public List&lt;PostResponse&gt; getTopLikedPosts() {&#10;        return postRepository.findTop10ByOrderByStatsLikesDesc()&#10;                .stream()&#10;                .map(PostResponse::new)&#10;                .toList();&#10;    }&#10;&#10;    /**&#10;     * Enhanced post creation with Facebook-like features&#10;     */&#10;    public PostResponse createEnhancedPost(PostRequest request, AuthenticatedUser user) {&#10;        AuthorInfo author = userServiceClient.getAuthorInfo(user.getId());&#10;        if (author == null) {&#10;            throw new RuntimeException(&quot;Author not found with id: &quot; + user.getId());&#10;        }&#10;&#10;        PostEntity post = PostEntity.builder()&#10;                .title(request.getTitle())&#10;                .content(request.getContent())&#10;                .author(author)&#10;                .images(request.getImages() != null ? request.getImages() : new ArrayList&lt;&gt;())&#10;                .videos(request.getVideos() != null ? request.getVideos() : new ArrayList&lt;&gt;())&#10;                .tags(request.getTags() != null ? request.getTags() : new ArrayList&lt;&gt;())&#10;                .category(request.getCategory())&#10;                .privacy(request.getVisibility() != null ? request.getVisibility() : &quot;PUBLIC&quot;)&#10;                .postType(request.getPostType() != null ? PostEntity.PostType.valueOf(request.getPostType()) : PostEntity.PostType.TEXT)&#10;                .stats(new PostEntity.PostStats())&#10;                .audienceSettings(new PostEntity.AudienceSettings())&#10;                .engagement(new PostEntity.EngagementMetrics())&#10;                .build();&#10;&#10;        // Set audience settings if provided&#10;        if (request.getAudienceSettings() != null) {&#10;            post.setAudienceSettings(request.getAudienceSettings());&#10;        }&#10;&#10;        // Handle scheduled posts&#10;        if (request.getScheduledAt() != null) {&#10;            post.setScheduledAt(request.getScheduledAt());&#10;            post.setScheduled(true);&#10;        }&#10;&#10;        PostEntity savedPost = postRepository.save(post);&#10;&#10;        // Publish event&#10;        eventService.publishPostEvent(&quot;POST_CREATED&quot;, savedPost.getId(), savedPost.getAuthorId(), savedPost);&#10;&#10;        return new PostResponse(savedPost);&#10;    }&#10;&#10;    /**&#10;     * Get users affected by a post (for cache invalidation)&#10;     */&#10;    public Set&lt;String&gt; getAffectedUserIds(String postId) {&#10;        Optional&lt;PostEntity&gt; postOpt = postRepository.findById(postId);&#10;        if (postOpt.isPresent()) {&#10;            PostEntity post = postOpt.get();&#10;            Set&lt;String&gt; affectedUsers = new HashSet&lt;&gt;();&#10;&#10;            // Add author&#10;            affectedUsers.add(post.getAuthorId());&#10;&#10;            // Add friends if post is visible to friends&#10;            if (&quot;FRIENDS&quot;.equals(post.getPrivacy()) || &quot;PUBLIC&quot;.equals(post.getPrivacy())) {&#10;                Set&lt;String&gt; authorFriends = userServiceClient.getFriendIds(post.getAuthorId());&#10;                affectedUsers.addAll(authorFriends);&#10;            }&#10;&#10;            return affectedUsers;&#10;        }&#10;        return new HashSet&lt;&gt;();&#10;    }&#10;&#10;    /**&#10;     * Handle post interactions (like, comment, share)&#10;     */&#10;    public void handlePostInteraction(String postId, String userId, String action, String reactionType) {&#10;        Optional&lt;PostEntity&gt; postOpt = postRepository.findById(postId);&#10;        if (postOpt.isEmpty()) {&#10;            throw new RuntimeException(&quot;Post not found with id: &quot; + postId);&#10;        }&#10;&#10;        PostEntity post = postOpt.get();&#10;        AuthorInfo user = userServiceClient.getAuthorInfo(userId);&#10;        if (user == null) {&#10;            throw new RuntimeException(&quot;User not found with id: &quot; + userId);&#10;        }&#10;&#10;        switch (action.toUpperCase()) {&#10;            case &quot;LIKE&quot;:&#10;                handleLikeInteraction(postId, userId, reactionType, post, user);&#10;                break;&#10;            case &quot;UNLIKE&quot;:&#10;                handleUnlikeInteraction(postId, userId, post);&#10;                break;&#10;            case &quot;SHARE&quot;:&#10;                handleShareInteraction(postId, userId, post, user);&#10;                break;&#10;            default:&#10;                throw new RuntimeException(&quot;Unsupported action: &quot; + action);&#10;        }&#10;&#10;        // Update engagement metrics&#10;        updateEngagementMetrics(post);&#10;        postRepository.save(post);&#10;    }&#10;&#10;    /**&#10;     * Get post author ID&#10;     */&#10;    public String getPostAuthorId(String postId) {&#10;        Optional&lt;PostEntity&gt; postOpt = postRepository.findById(postId);&#10;        if (postOpt.isPresent()) {&#10;            return postOpt.get().getAuthorId();&#10;        }&#10;        throw new RuntimeException(&quot;Post not found with id: &quot; + postId);&#10;    }&#10;&#10;    /**&#10;     * Add comment to post&#10;     */&#10;    public void addComment(String postId, String userId, String content) {&#10;        Optional&lt;PostEntity&gt; postOpt = postRepository.findById(postId);&#10;        if (postOpt.isEmpty()) {&#10;            throw new RuntimeException(&quot;Post not found with id: &quot; + postId);&#10;        }&#10;&#10;        AuthorInfo author = userServiceClient.getAuthorInfo(userId);&#10;        if (author == null) {&#10;            throw new RuntimeException(&quot;User not found with id: &quot; + userId);&#10;        }&#10;&#10;        CommentEntity comment = CommentEntity.builder()&#10;                .postId(postId)&#10;                .author(author)&#10;                .content(content)&#10;                .build();&#10;&#10;        commentRepository.save(comment);&#10;&#10;        // Update post comment count&#10;        PostEntity post = postOpt.get();&#10;        post.getStats().incrementComments();&#10;        updateEngagementMetrics(post);&#10;        postRepository.save(post);&#10;&#10;        // Publish event&#10;        eventService.publishPostEvent(&quot;COMMENT_ADDED&quot;, postId, userId, comment);&#10;    }&#10;&#10;    /**&#10;     * Get post analytics&#10;     */&#10;    public PostAnalyticsResponse getPostAnalytics(String postId, String userId) {&#10;        Optional&lt;PostEntity&gt; postOpt = postRepository.findById(postId);&#10;        if (postOpt.isEmpty()) {&#10;            throw new RuntimeException(&quot;Post not found with id: &quot; + postId);&#10;        }&#10;&#10;        PostEntity post = postOpt.get();&#10;&#10;        // Check if user is the post author&#10;        if (!post.getAuthorId().equals(userId)) {&#10;            throw new RuntimeException(&quot;Only post author can view analytics&quot;);&#10;        }&#10;&#10;        return PostAnalyticsResponse.builder()&#10;                .postId(postId)&#10;                .views(post.getStats().getViews())&#10;                .likes(post.getStats().getLikes())&#10;                .comments(post.getStats().getComments())&#10;                .shares(post.getStats().getShares())&#10;                .engagementRate(post.getEngagement().getEngagementRate())&#10;                .reactions(post.getStats().getReactions())&#10;                .build();&#10;    }&#10;&#10;    /**&#10;     * Schedule post for later publishing&#10;     */&#10;    public PostResponse schedulePost(ScheduledPostRequest request, AuthenticatedUser user) {&#10;        AuthorInfo author = userServiceClient.getAuthorInfo(user.getId());&#10;        if (author == null) {&#10;            throw new RuntimeException(&quot;Author not found with id: &quot; + user.getId());&#10;        }&#10;&#10;        PostEntity post = PostEntity.builder()&#10;                .title(request.getTitle())&#10;                .content(request.getContent())&#10;                .author(author)&#10;                .images(request.getImages() != null ? request.getImages() : new ArrayList&lt;&gt;())&#10;                .tags(request.getTags() != null ? request.getTags() : new ArrayList&lt;&gt;())&#10;                .category(request.getCategory())&#10;                .privacy(request.getVisibility() != null ? request.getVisibility() : &quot;PUBLIC&quot;)&#10;                .scheduledAt(request.getScheduledAt())&#10;                .isScheduled(true)&#10;                .stats(new PostEntity.PostStats())&#10;                .build();&#10;&#10;        PostEntity savedPost = postRepository.save(post);&#10;        return new PostResponse(savedPost);&#10;    }&#10;&#10;    /**&#10;     * Enhanced search with filters&#10;     */&#10;    public List&lt;PostResponse&gt; searchPosts(String query, String category, String faculty,&#10;                                        String dateRange, Pageable pageable) {&#10;        // This would need to be implemented with proper MongoDB queries&#10;        // For now, implementing basic search&#10;        Page&lt;PostEntity&gt; posts;&#10;&#10;        if (category != null &amp;&amp; !category.isEmpty()) {&#10;            posts = postRepository.findByCategoryAndTitleContainingOrContentContaining(&#10;                category, query, query, pageable);&#10;        } else {&#10;            posts = postRepository.findByTitleContainingOrContentContaining(query, query, pageable);&#10;        }&#10;&#10;        return posts.stream()&#10;                .map(PostResponse::new)&#10;                .collect(Collectors.toList());&#10;    }&#10;&#10;    /**&#10;     * Update author information in posts (for data consistency)&#10;     */&#10;    public void updateAuthorInfoInPosts(String userId, String fullName, String avatarUrl) {&#10;        List&lt;PostEntity&gt; userPosts = postRepository.findByAuthor_Id(userId);&#10;&#10;        for (PostEntity post : userPosts) {&#10;            AuthorInfo updatedAuthor = post.getAuthor();&#10;            updatedAuthor.setFullName(fullName);&#10;            updatedAuthor.setAvatarUrl(avatarUrl);&#10;            post.setAuthor(updatedAuthor);&#10;        }&#10;&#10;        if (!userPosts.isEmpty()) {&#10;            postRepository.saveAll(userPosts);&#10;        }&#10;    }&#10;&#10;    // Helper methods&#10;    private void handleLikeInteraction(String postId, String userId, String reactionType,&#10;                                     PostEntity post, AuthorInfo user) {&#10;        InteractionEntity.ReactionType reaction =&#10;            reactionType != null ?&#10;            InteractionEntity.ReactionType.valueOf(reactionType.toUpperCase()) :&#10;            InteractionEntity.ReactionType.LIKE;&#10;&#10;        // Check if user already reacted&#10;        Optional&lt;InteractionEntity&gt; existingInteraction = interactionRepository&#10;                .findByPostIdAndAuthor_IdAndType(postId, userId, InteractionEntity.InteractionType.REACTION);&#10;&#10;        if (existingInteraction.isEmpty()) {&#10;            // Create new reaction&#10;            InteractionEntity interaction = InteractionEntity.builder()&#10;                    .postId(postId)&#10;                    .author(user)&#10;                    .type(InteractionEntity.InteractionType.REACTION)&#10;                    .reactionType(reaction)&#10;                    .build();&#10;&#10;            interactionRepository.save(interaction);&#10;            post.getStats().incrementReaction(reaction);&#10;        }&#10;    }&#10;&#10;    private void handleUnlikeInteraction(String postId, String userId, PostEntity post) {&#10;        Optional&lt;InteractionEntity&gt; existingInteraction = interactionRepository&#10;                .findByPostIdAndAuthor_IdAndType(postId, userId, InteractionEntity.InteractionType.REACTION);&#10;&#10;        if (existingInteraction.isPresent()) {&#10;            InteractionEntity interaction = existingInteraction.get();&#10;            post.getStats().decrementReaction(interaction.getReactionType());&#10;            interactionRepository.delete(interaction);&#10;        }&#10;    }&#10;&#10;    private void handleShareInteraction(String postId, String userId, PostEntity post, AuthorInfo user) {&#10;        InteractionEntity interaction = InteractionEntity.builder()&#10;                .postId(postId)&#10;                .author(user)&#10;                .type(InteractionEntity.InteractionType.SHARE)&#10;                .build();&#10;&#10;        interactionRepository.save(interaction);&#10;        post.getStats().incrementShares();&#10;    }&#10;&#10;    private void updateEngagementMetrics(PostEntity post) {&#10;        PostEntity.EngagementMetrics engagement = post.getEngagement();&#10;        PostEntity.PostStats stats = post.getStats();&#10;&#10;        engagement.updateEngagement(&#10;            (int) stats.getLikes(),&#10;            (int) stats.getComments(),&#10;            (int) stats.getShares(),&#10;            (int) stats.getViews()&#10;        );&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ctuconnect.service;&#13;&#10;&#13;&#10;import org.springframework.beans.factory.annotation.Autowired;&#13;&#10;import org.springframework.data.domain.Page;&#13;&#10;import org.springframework.data.domain.Pageable;&#13;&#10;import org.springframework.stereotype.Service;&#13;&#10;import org.springframework.web.multipart.MultipartFile;&#13;&#10;import com.ctuconnect.client.MediaServiceClient;&#13;&#10;import com.ctuconnect.client.UserServiceClient;&#13;&#10;import com.ctuconnect.dto.AuthorInfo;&#13;&#10;import com.ctuconnect.dto.request.PostRequest;&#13;&#10;import com.ctuconnect.dto.request.ScheduledPostRequest;&#13;&#10;import com.ctuconnect.dto.response.PostResponse;&#13;&#10;import com.ctuconnect.dto.response.PostAnalyticsResponse;&#13;&#10;import com.ctuconnect.entity.InteractionEntity;&#13;&#10;import com.ctuconnect.entity.PostEntity;&#13;&#10;import com.ctuconnect.entity.CommentEntity;&#13;&#10;import com.ctuconnect.repository.CommentRepository;&#13;&#10;import com.ctuconnect.repository.InteractionRepository;&#13;&#10;import com.ctuconnect.repository.PostRepository;&#13;&#10;import com.ctuconnect.security.AuthenticatedUser;&#13;&#10;&#13;&#10;import java.util.ArrayList;&#13;&#10;import java.util.HashSet;&#13;&#10;import java.util.List;&#13;&#10;import java.util.Optional;&#13;&#10;import java.util.Set;&#13;&#10;import java.util.stream.Collectors;&#13;&#10;&#13;&#10;@Service&#13;&#10;public class PostService {&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private PostRepository postRepository;&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private CommentRepository commentRepository;&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private InteractionRepository interactionRepository;&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private MediaServiceClient mediaServiceClient;&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private UserServiceClient userServiceClient;&#13;&#10;&#13;&#10;    @Autowired&#13;&#10;    private EventService eventService;&#13;&#10;&#13;&#10;    public PostResponse createPost(PostRequest request, List&lt;MultipartFile&gt; files, String authorId) {&#13;&#10;        AuthorInfo author = userServiceClient.getAuthorInfo(authorId);&#13;&#10;        if (author == null) {&#13;&#10;            throw new RuntimeException(&quot;Author not found with id: &quot; + authorId);&#13;&#10;        }&#13;&#10;&#13;&#10;        PostEntity post = PostEntity.builder()&#13;&#10;                .title(request.getTitle())&#13;&#10;                .content(request.getContent())&#13;&#10;                .author(author)&#13;&#10;                .images(new ArrayList&lt;&gt;())&#13;&#10;                .tags(request.getTags() != null ? request.getTags() : new ArrayList&lt;&gt;())&#13;&#10;                .category(request.getCategory())&#13;&#10;                .privacy(request.getVisibility() != null ? request.getVisibility() : &quot;PUBLIC&quot;)&#13;&#10;                .stats(new PostEntity.PostStats())&#13;&#10;                .build();&#13;&#10;&#13;&#10;        // Upload files to media-service&#13;&#10;        if (files != null &amp;&amp; !files.isEmpty()) {&#13;&#10;            List&lt;String&gt; imageUrls = new ArrayList&lt;&gt;();&#13;&#10;            for (MultipartFile file : files) {&#13;&#10;                if (!file.isEmpty()) {&#13;&#10;                    try {&#13;&#10;                        MediaServiceClient.MediaUploadResponse uploadResponse =&#13;&#10;                            mediaServiceClient.uploadFile(file, getFileType(file));&#13;&#10;                        imageUrls.add(uploadResponse.getFileUrl());&#13;&#10;                    } catch (Exception e) {&#13;&#10;                        // Log error but continue processing&#13;&#10;                        System.err.println(&quot;Failed to upload file: &quot; + e.getMessage());&#13;&#10;                    }&#13;&#10;                }&#13;&#10;            }&#13;&#10;            post.setImages(imageUrls);&#13;&#10;        }&#13;&#10;&#13;&#10;        PostEntity savedPost = postRepository.save(post);&#13;&#10;&#13;&#10;        // Publish event&#13;&#10;        eventService.publishPostEvent(&quot;POST_CREATED&quot;, savedPost.getId(), savedPost.getAuthorId(), savedPost);&#13;&#10;&#13;&#10;        return new PostResponse(savedPost);&#13;&#10;    }&#13;&#10;&#13;&#10;    public Page&lt;PostResponse&gt; getAllPosts(Pageable pageable) {&#13;&#10;        Page&lt;PostEntity&gt; posts = postRepository.findAll(pageable);&#13;&#10;        &#13;&#10;        // Recalculate stats for each post before returning&#13;&#10;        posts.forEach(this::recalculatePostStats);&#13;&#10;        postRepository.saveAll(posts.getContent());&#13;&#10;        &#13;&#10;        return posts.map(PostResponse::new);&#13;&#10;    }&#13;&#10;&#13;&#10;    public Page&lt;PostResponse&gt; getPostsByAuthor(String authorId, Pageable pageable) {&#13;&#10;        System.out.println(&quot;DEBUG: PostService.getPostsByAuthor called with authorId: &quot; + authorId);&#13;&#10;        &#13;&#10;        Page&lt;PostEntity&gt; posts = postRepository.findByAuthor_Id(authorId, pageable);&#13;&#10;        System.out.println(&quot;DEBUG: Repository query returned &quot; + posts.getTotalElements() + &quot; posts&quot;);&#13;&#10;        &#13;&#10;        // Debug first few posts from repository&#13;&#10;        posts.getContent().stream().limit(3).forEach(post -&gt; {&#13;&#10;            System.out.println(&quot;DEBUG: Repository returned post ID: &quot; + post.getId() + &#13;&#10;                &quot;, Author ID: &quot; + (post.getAuthor() != null ? post.getAuthor().getId() : &quot;null&quot;) +&#13;&#10;                &quot;, Author Name: &quot; + (post.getAuthor() != null ? post.getAuthor().getName() : &quot;null&quot;));&#13;&#10;        });&#13;&#10;        &#13;&#10;        // Recalculate stats for each post before returning&#13;&#10;        posts.forEach(this::recalculatePostStats);&#13;&#10;        postRepository.saveAll(posts.getContent());&#13;&#10;        &#13;&#10;        return posts.map(PostResponse::new);&#13;&#10;    }&#13;&#10;&#13;&#10;    public Page&lt;PostResponse&gt; getPostsByCategory(String category, Pageable pageable) {&#13;&#10;        return postRepository.findByCategory(category, pageable)&#13;&#10;                .map(PostResponse::new);&#13;&#10;    }&#13;&#10;&#13;&#10;    public Page&lt;PostResponse&gt; searchPosts(String searchTerm, Pageable pageable) {&#13;&#10;        return postRepository.findByTitleContainingOrContentContaining(searchTerm, searchTerm, pageable)&#13;&#10;                .map(PostResponse::new);&#13;&#10;    }&#13;&#10;&#13;&#10;    public PostResponse getPostById(String id, String currentUserId) {&#13;&#10;        Optional&lt;PostEntity&gt; postOpt = postRepository.findById(id);&#13;&#10;        if (postOpt.isPresent()) {&#13;&#10;            PostEntity post = postOpt.get();&#13;&#10;&#13;&#10;            // Record view interaction if user is different from author&#13;&#10;            if (currentUserId != null &amp;&amp; !currentUserId.equals(post.getAuthorId())) {&#13;&#10;                recordViewInteraction(post.getId(), currentUserId);&#13;&#10;            }&#13;&#10;&#13;&#10;            // Recalculate stats from database before returning&#13;&#10;            recalculatePostStats(post);&#13;&#10;            postRepository.save(post);&#13;&#10;            &#13;&#10;            return new PostResponse(post);&#13;&#10;        }&#13;&#10;        throw new RuntimeException(&quot;Post not found with id: &quot; + id);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Recalculate post stats from actual interactions in database&#13;&#10;     * This fixes the issue where stats show 0 even when interactions exist&#13;&#10;     */&#13;&#10;    private void recalculatePostStats(PostEntity post) {&#13;&#10;        // Count actual likes from interactions&#13;&#10;        long likeCount = interactionRepository.countByPostIdAndType(post.getId(), InteractionEntity.InteractionType.LIKE);&#13;&#10;        long bookmarkCount = interactionRepository.countByPostIdAndType(post.getId(), InteractionEntity.InteractionType.BOOKMARK);&#13;&#10;        long shareCount = interactionRepository.countByPostIdAndType(post.getId(), InteractionEntity.InteractionType.SHARE);&#13;&#10;        &#13;&#10;        // Count comments&#13;&#10;        long commentCount = commentRepository.countByPostId(post.getId());&#13;&#10;        &#13;&#10;        // Update post stats&#13;&#10;        post.getStats().setLikes(likeCount);&#13;&#10;        post.getStats().setComments(commentCount); &#13;&#10;        post.getStats().setShares(shareCount);&#13;&#10;        &#13;&#10;        // Update reactions map for LIKE type&#13;&#10;        post.getStats().getReactions().put(InteractionEntity.ReactionType.LIKE, (int) likeCount);&#13;&#10;    }&#13;&#10;&#13;&#10;    public PostResponse updatePost(String id, PostRequest request, String authorId) {&#13;&#10;        Optional&lt;PostEntity&gt; postOpt = postRepository.findById(id);&#13;&#10;        if (postOpt.isPresent()) {&#13;&#10;            PostEntity post = postOpt.get();&#13;&#10;&#13;&#10;            // Check if user is the author&#13;&#10;            if (!post.getAuthorId().equals(authorId)) {&#13;&#10;                throw new RuntimeException(&quot;Only the author can update this post&quot;);&#13;&#10;            }&#13;&#10;&#13;&#10;            if (request.getTitle() != null) {&#13;&#10;                post.setTitle(request.getTitle());&#13;&#10;            }&#13;&#10;            if (request.getContent() != null) {&#13;&#10;                post.setContent(request.getContent());&#13;&#10;            }&#13;&#10;            if (request.getTags() != null) {&#13;&#10;                post.setTags(request.getTags());&#13;&#10;            }&#13;&#10;            if (request.getCategory() != null) {&#13;&#10;                post.setCategory(request.getCategory());&#13;&#10;            }&#13;&#10;            if (request.getVisibility() != null) {&#13;&#10;                post.setVisibility(request.getVisibility());&#13;&#10;            }&#13;&#10;&#13;&#10;            PostEntity savedPost = postRepository.save(post);&#13;&#10;&#13;&#10;            // Publish event&#13;&#10;            eventService.publishPostEvent(&quot;POST_UPDATED&quot;, savedPost.getId(), savedPost.getAuthorId(), savedPost);&#13;&#10;&#13;&#10;            return new PostResponse(savedPost);&#13;&#10;        }&#13;&#10;        throw new RuntimeException(&quot;Post not found with id: &quot; + id);&#13;&#10;    }&#13;&#10;&#13;&#10;    public void deletePost(String id, String authorId) {&#13;&#10;        Optional&lt;PostEntity&gt; postOpt = postRepository.findById(id);&#13;&#10;        if (postOpt.isPresent()) {&#13;&#10;            PostEntity post = postOpt.get();&#13;&#10;&#13;&#10;            // Check if user is the author&#13;&#10;            if (!post.getAuthorId().equals(authorId)) {&#13;&#10;                throw new RuntimeException(&quot;Only the author can delete this post&quot;);&#13;&#10;            }&#13;&#10;&#13;&#10;            // Delete associated comments and interactions&#13;&#10;            commentRepository.deleteByPostId(id);&#13;&#10;            interactionRepository.deleteByPostId(id);&#13;&#10;&#13;&#10;            // Delete the post&#13;&#10;            postRepository.deleteById(id);&#13;&#10;&#13;&#10;            // Publish event&#13;&#10;            eventService.publishPostEvent(&quot;POST_DELETED&quot;, id, authorId, post);&#13;&#10;        } else {&#13;&#10;            throw new RuntimeException(&quot;Post not found with id: &quot; + id);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void recordViewInteraction(String postId, String userId) {&#13;&#10;        try {&#13;&#10;            AuthorInfo author = userServiceClient.getAuthorInfo(userId);&#13;&#10;            if (author == null) return;&#13;&#10;&#13;&#10;            // Check if user already viewed this post recently (within last hour)&#13;&#10;            Optional&lt;InteractionEntity&gt; existingView = interactionRepository&#13;&#10;                    .findByPostIdAndAuthor_IdAndType(postId, userId, InteractionEntity.InteractionType.VIEW);&#13;&#10;&#13;&#10;            if (existingView.isEmpty()) {&#13;&#10;                // Create view interaction&#13;&#10;                InteractionEntity viewInteraction = new InteractionEntity(postId, author, InteractionEntity.InteractionType.VIEW);&#13;&#10;                interactionRepository.save(viewInteraction);&#13;&#10;&#13;&#10;                // Update post stats&#13;&#10;                Optional&lt;PostEntity&gt; postOpt = postRepository.findById(postId);&#13;&#10;                if (postOpt.isPresent()) {&#13;&#10;                    PostEntity post = postOpt.get();&#13;&#10;                    post.getStats().incrementViews();&#13;&#10;                    postRepository.save(post);&#13;&#10;                }&#13;&#10;&#13;&#10;                // Publish interaction event&#13;&#10;                eventService.publishInteractionEvent(postId, userId, &quot;VIEW&quot;);&#13;&#10;            }&#13;&#10;        } catch (Exception e) {&#13;&#10;            // Log error but don't fail the main operation&#13;&#10;            System.err.println(&quot;Failed to record view interaction: &quot; + e.getMessage());&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private String getFileType(MultipartFile file) {&#13;&#10;        String contentType = file.getContentType();&#13;&#10;        if (contentType != null) {&#13;&#10;            if (contentType.startsWith(&quot;image/&quot;)) return &quot;IMAGE&quot;;&#13;&#10;            if (contentType.startsWith(&quot;video/&quot;)) return &quot;VIDEO&quot;;&#13;&#10;            if (contentType.startsWith(&quot;audio/&quot;)) return &quot;AUDIO&quot;;&#13;&#10;            if (contentType.equals(&quot;application/pdf&quot;)) return &quot;PDF&quot;;&#13;&#10;        }&#13;&#10;        return &quot;DOCUMENT&quot;;&#13;&#10;    }&#13;&#10;&#13;&#10;    public List&lt;PostResponse&gt; getTopViewedPosts() {&#13;&#10;        return postRepository.findTop10ByOrderByStatsViewsDesc()&#13;&#10;                .stream()&#13;&#10;                .map(PostResponse::new)&#13;&#10;                .toList();&#13;&#10;    }&#13;&#10;&#13;&#10;    public List&lt;PostResponse&gt; getTopLikedPosts() {&#13;&#10;        return postRepository.findTop10ByOrderByStatsLikesDesc()&#13;&#10;                .stream()&#13;&#10;                .map(PostResponse::new)&#13;&#10;                .toList();&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Enhanced post creation with Facebook-like features&#13;&#10;     */&#13;&#10;    public PostResponse createEnhancedPost(PostRequest request, AuthenticatedUser user) {&#13;&#10;        AuthorInfo author = userServiceClient.getAuthorInfo(user.getId());&#13;&#10;        if (author == null) {&#13;&#10;            throw new RuntimeException(&quot;Author not found with id: &quot; + user.getId());&#13;&#10;        }&#13;&#10;&#13;&#10;        PostEntity post = PostEntity.builder()&#13;&#10;                .title(request.getTitle())&#13;&#10;                .content(request.getContent())&#13;&#10;                .author(author)&#13;&#10;                .images(request.getImages() != null ? request.getImages() : new ArrayList&lt;&gt;())&#13;&#10;                .videos(request.getVideos() != null ? request.getVideos() : new ArrayList&lt;&gt;())&#13;&#10;                .tags(request.getTags() != null ? request.getTags() : new ArrayList&lt;&gt;())&#13;&#10;                .category(request.getCategory())&#13;&#10;                .privacy(request.getVisibility() != null ? request.getVisibility() : &quot;PUBLIC&quot;)&#13;&#10;                .postType(request.getPostType() != null ? PostEntity.PostType.valueOf(request.getPostType()) : PostEntity.PostType.TEXT)&#13;&#10;                .stats(new PostEntity.PostStats())&#13;&#10;                .audienceSettings(new PostEntity.AudienceSettings())&#13;&#10;                .engagement(new PostEntity.EngagementMetrics())&#13;&#10;                .build();&#13;&#10;&#13;&#10;        // Set audience settings if provided&#13;&#10;        if (request.getAudienceSettings() != null) {&#13;&#10;            post.setAudienceSettings(request.getAudienceSettings());&#13;&#10;        }&#13;&#10;&#13;&#10;        // Handle scheduled posts&#13;&#10;        if (request.getScheduledAt() != null) {&#13;&#10;            post.setScheduledAt(request.getScheduledAt());&#13;&#10;            post.setScheduled(true);&#13;&#10;        }&#13;&#10;&#13;&#10;        PostEntity savedPost = postRepository.save(post);&#13;&#10;&#13;&#10;        // Publish event&#13;&#10;        eventService.publishPostEvent(&quot;POST_CREATED&quot;, savedPost.getId(), savedPost.getAuthorId(), savedPost);&#13;&#10;&#13;&#10;        return new PostResponse(savedPost);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Get users affected by a post (for cache invalidation)&#13;&#10;     */&#13;&#10;    public Set&lt;String&gt; getAffectedUserIds(String postId) {&#13;&#10;        Optional&lt;PostEntity&gt; postOpt = postRepository.findById(postId);&#13;&#10;        if (postOpt.isPresent()) {&#13;&#10;            PostEntity post = postOpt.get();&#13;&#10;            Set&lt;String&gt; affectedUsers = new HashSet&lt;&gt;();&#13;&#10;&#13;&#10;            // Add author&#13;&#10;            affectedUsers.add(post.getAuthorId());&#13;&#10;&#13;&#10;            // Add friends if post is visible to friends&#13;&#10;            if (&quot;FRIENDS&quot;.equals(post.getPrivacy()) || &quot;PUBLIC&quot;.equals(post.getPrivacy())) {&#13;&#10;                Set&lt;String&gt; authorFriends = userServiceClient.getFriendIds(post.getAuthorId());&#13;&#10;                affectedUsers.addAll(authorFriends);&#13;&#10;            }&#13;&#10;&#13;&#10;            return affectedUsers;&#13;&#10;        }&#13;&#10;        return new HashSet&lt;&gt;();&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Handle post interactions (like, comment, share)&#13;&#10;     */&#13;&#10;    public void handlePostInteraction(String postId, String userId, String action, String reactionType) {&#13;&#10;        Optional&lt;PostEntity&gt; postOpt = postRepository.findById(postId);&#13;&#10;        if (postOpt.isEmpty()) {&#13;&#10;            throw new RuntimeException(&quot;Post not found with id: &quot; + postId);&#13;&#10;        }&#13;&#10;&#13;&#10;        PostEntity post = postOpt.get();&#13;&#10;        AuthorInfo user = userServiceClient.getAuthorInfo(userId);&#13;&#10;        if (user == null) {&#13;&#10;            throw new RuntimeException(&quot;User not found with id: &quot; + userId);&#13;&#10;        }&#13;&#10;&#13;&#10;        switch (action.toUpperCase()) {&#13;&#10;            case &quot;LIKE&quot;:&#13;&#10;                handleLikeInteraction(postId, userId, reactionType, post, user);&#13;&#10;                break;&#13;&#10;            case &quot;UNLIKE&quot;:&#13;&#10;                handleUnlikeInteraction(postId, userId, post);&#13;&#10;                break;&#13;&#10;            case &quot;SHARE&quot;:&#13;&#10;                handleShareInteraction(postId, userId, post, user);&#13;&#10;                break;&#13;&#10;            default:&#13;&#10;                throw new RuntimeException(&quot;Unsupported action: &quot; + action);&#13;&#10;        }&#13;&#10;&#13;&#10;        // Update engagement metrics&#13;&#10;        updateEngagementMetrics(post);&#13;&#10;        postRepository.save(post);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Get post author ID&#13;&#10;     */&#13;&#10;    public String getPostAuthorId(String postId) {&#13;&#10;        Optional&lt;PostEntity&gt; postOpt = postRepository.findById(postId);&#13;&#10;        if (postOpt.isPresent()) {&#13;&#10;            return postOpt.get().getAuthorId();&#13;&#10;        }&#13;&#10;        throw new RuntimeException(&quot;Post not found with id: &quot; + postId);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Add comment to post&#13;&#10;     */&#13;&#10;    public void addComment(String postId, String userId, String content) {&#13;&#10;        Optional&lt;PostEntity&gt; postOpt = postRepository.findById(postId);&#13;&#10;        if (postOpt.isEmpty()) {&#13;&#10;            throw new RuntimeException(&quot;Post not found with id: &quot; + postId);&#13;&#10;        }&#13;&#10;&#13;&#10;        AuthorInfo author = userServiceClient.getAuthorInfo(userId);&#13;&#10;        if (author == null) {&#13;&#10;            throw new RuntimeException(&quot;User not found with id: &quot; + userId);&#13;&#10;        }&#13;&#10;&#13;&#10;        CommentEntity comment = CommentEntity.builder()&#13;&#10;                .postId(postId)&#13;&#10;                .author(author)&#13;&#10;                .content(content)&#13;&#10;                .build();&#13;&#10;&#13;&#10;        commentRepository.save(comment);&#13;&#10;&#13;&#10;        // Update post comment count&#13;&#10;        PostEntity post = postOpt.get();&#13;&#10;        post.getStats().incrementComments();&#13;&#10;        updateEngagementMetrics(post);&#13;&#10;        postRepository.save(post);&#13;&#10;&#13;&#10;        // Publish event&#13;&#10;        eventService.publishPostEvent(&quot;COMMENT_ADDED&quot;, postId, userId, comment);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Get post analytics&#13;&#10;     */&#13;&#10;    public PostAnalyticsResponse getPostAnalytics(String postId, String userId) {&#13;&#10;        Optional&lt;PostEntity&gt; postOpt = postRepository.findById(postId);&#13;&#10;        if (postOpt.isEmpty()) {&#13;&#10;            throw new RuntimeException(&quot;Post not found with id: &quot; + postId);&#13;&#10;        }&#13;&#10;&#13;&#10;        PostEntity post = postOpt.get();&#13;&#10;&#13;&#10;        // Check if user is the post author&#13;&#10;        if (!post.getAuthorId().equals(userId)) {&#13;&#10;            throw new RuntimeException(&quot;Only post author can view analytics&quot;);&#13;&#10;        }&#13;&#10;&#13;&#10;        return PostAnalyticsResponse.builder()&#13;&#10;                .postId(postId)&#13;&#10;                .views(post.getStats().getViews())&#13;&#10;                .likes(post.getStats().getLikes())&#13;&#10;                .comments(post.getStats().getComments())&#13;&#10;                .shares(post.getStats().getShares())&#13;&#10;                .engagementRate(post.getEngagement().getEngagementRate())&#13;&#10;                .reactions(post.getStats().getReactions())&#13;&#10;                .build();&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Schedule post for later publishing&#13;&#10;     */&#13;&#10;    public PostResponse schedulePost(ScheduledPostRequest request, AuthenticatedUser user) {&#13;&#10;        AuthorInfo author = userServiceClient.getAuthorInfo(user.getId());&#13;&#10;        if (author == null) {&#13;&#10;            throw new RuntimeException(&quot;Author not found with id: &quot; + user.getId());&#13;&#10;        }&#13;&#10;&#13;&#10;        PostEntity post = PostEntity.builder()&#13;&#10;                .title(request.getTitle())&#13;&#10;                .content(request.getContent())&#13;&#10;                .author(author)&#13;&#10;                .images(request.getImages() != null ? request.getImages() : new ArrayList&lt;&gt;())&#13;&#10;                .tags(request.getTags() != null ? request.getTags() : new ArrayList&lt;&gt;())&#13;&#10;                .category(request.getCategory())&#13;&#10;                .privacy(request.getVisibility() != null ? request.getVisibility() : &quot;PUBLIC&quot;)&#13;&#10;                .scheduledAt(request.getScheduledAt())&#13;&#10;                .isScheduled(true)&#13;&#10;                .stats(new PostEntity.PostStats())&#13;&#10;                .build();&#13;&#10;&#13;&#10;        PostEntity savedPost = postRepository.save(post);&#13;&#10;        return new PostResponse(savedPost);&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Enhanced search with filters&#13;&#10;     */&#13;&#10;    public List&lt;PostResponse&gt; searchPosts(String query, String category, String faculty,&#13;&#10;                                        String dateRange, Pageable pageable) {&#13;&#10;        // This would need to be implemented with proper MongoDB queries&#13;&#10;        // For now, implementing basic search&#13;&#10;        Page&lt;PostEntity&gt; posts;&#13;&#10;&#13;&#10;        if (category != null &amp;&amp; !category.isEmpty()) {&#13;&#10;            posts = postRepository.findByCategoryAndTitleContainingOrContentContaining(&#13;&#10;                category, query, query, pageable);&#13;&#10;        } else {&#13;&#10;            posts = postRepository.findByTitleContainingOrContentContaining(query, query, pageable);&#13;&#10;        }&#13;&#10;&#13;&#10;        return posts.stream()&#13;&#10;                .map(PostResponse::new)&#13;&#10;                .collect(Collectors.toList());&#13;&#10;    }&#13;&#10;&#13;&#10;    /**&#13;&#10;     * Update author information in posts (for data consistency)&#13;&#10;     */&#13;&#10;    public void updateAuthorInfoInPosts(String userId, String fullName, String avatarUrl) {&#13;&#10;        List&lt;PostEntity&gt; userPosts = postRepository.findByAuthor_Id(userId);&#13;&#10;&#13;&#10;        for (PostEntity post : userPosts) {&#13;&#10;            AuthorInfo updatedAuthor = post.getAuthor();&#13;&#10;            updatedAuthor.setFullName(fullName);&#13;&#10;            updatedAuthor.setAvatarUrl(avatarUrl);&#13;&#10;            post.setAuthor(updatedAuthor);&#13;&#10;        }&#13;&#10;&#13;&#10;        if (!userPosts.isEmpty()) {&#13;&#10;            postRepository.saveAll(userPosts);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    // Helper methods&#13;&#10;    private void handleLikeInteraction(String postId, String userId, String reactionType,&#13;&#10;                                     PostEntity post, AuthorInfo user) {&#13;&#10;        InteractionEntity.ReactionType reaction =&#13;&#10;            reactionType != null ?&#13;&#10;            InteractionEntity.ReactionType.valueOf(reactionType.toUpperCase()) :&#13;&#10;            InteractionEntity.ReactionType.LIKE;&#13;&#10;&#13;&#10;        // Check if user already reacted&#13;&#10;        Optional&lt;InteractionEntity&gt; existingInteraction = interactionRepository&#13;&#10;                .findByPostIdAndAuthor_IdAndType(postId, userId, InteractionEntity.InteractionType.REACTION);&#13;&#10;&#13;&#10;        if (existingInteraction.isEmpty()) {&#13;&#10;            // Create new reaction&#13;&#10;            InteractionEntity interaction = InteractionEntity.builder()&#13;&#10;                    .postId(postId)&#13;&#10;                    .author(user)&#13;&#10;                    .type(InteractionEntity.InteractionType.REACTION)&#13;&#10;                    .reactionType(reaction)&#13;&#10;                    .build();&#13;&#10;&#13;&#10;            interactionRepository.save(interaction);&#13;&#10;            post.getStats().incrementReaction(reaction);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void handleUnlikeInteraction(String postId, String userId, PostEntity post) {&#13;&#10;        Optional&lt;InteractionEntity&gt; existingInteraction = interactionRepository&#13;&#10;                .findByPostIdAndAuthor_IdAndType(postId, userId, InteractionEntity.InteractionType.REACTION);&#13;&#10;&#13;&#10;        if (existingInteraction.isPresent()) {&#13;&#10;            InteractionEntity interaction = existingInteraction.get();&#13;&#10;            post.getStats().decrementReaction(interaction.getReactionType());&#13;&#10;            interactionRepository.delete(interaction);&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    private void handleShareInteraction(String postId, String userId, PostEntity post, AuthorInfo user) {&#13;&#10;        InteractionEntity interaction = InteractionEntity.builder()&#13;&#10;                .postId(postId)&#13;&#10;                .author(user)&#13;&#10;                .type(InteractionEntity.InteractionType.SHARE)&#13;&#10;                .build();&#13;&#10;&#13;&#10;        interactionRepository.save(interaction);&#13;&#10;        post.getStats().incrementShares();&#13;&#10;    }&#13;&#10;&#13;&#10;    private void updateEngagementMetrics(PostEntity post) {&#13;&#10;        PostEntity.EngagementMetrics engagement = post.getEngagement();&#13;&#10;        PostEntity.PostStats stats = post.getStats();&#13;&#10;&#13;&#10;        engagement.updateEngagement(&#13;&#10;            (int) stats.getLikes(),&#13;&#10;            (int) stats.getComments(),&#13;&#10;            (int) stats.getShares(),&#13;&#10;            (int) stats.getViews()&#13;&#10;        );&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/service/UserServiceClient.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/service/UserServiceClient.java" />
              <option name="updatedContent" value="package com.ctuconnect.service;&#10;&#10;import org.springframework.cloud.openfeign.FeignClient;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.PathVariable;&#10;&#10;import java.util.Set;&#10;&#10;@FeignClient(name = &quot;user-service&quot;, url = &quot;${user-service.url:http://user-service:8081}&quot;)&#10;public interface UserServiceClient {&#10;    &#10;    @GetMapping(&quot;/api/users/{userId}/friends/ids&quot;)&#10;    Set&lt;String&gt; getFriendIds(@PathVariable String userId);&#10;    &#10;    @GetMapping(&quot;/api/users/{userId}/close-interactions&quot;)&#10;    Set&lt;String&gt; getCloseInteractionIds(@PathVariable String userId);&#10;    &#10;    @GetMapping(&quot;/api/users/{userId}/same-faculty&quot;)&#10;    Set&lt;String&gt; getSameFacultyUserIds(@PathVariable String userId);&#10;    &#10;    @GetMapping(&quot;/api/users/{userId}/same-major&quot;)&#10;    Set&lt;String&gt; getSameMajorUserIds(@PathVariable String userId);&#10;    &#10;    @GetMapping(&quot;/api/users/{userId}/interest-tags&quot;)&#10;    Set&lt;String&gt; getUserInterestTags(@PathVariable String userId);&#10;    &#10;    @GetMapping(&quot;/api/users/{userId}/preferred-categories&quot;)&#10;    Set&lt;String&gt; getUserPreferredCategories(@PathVariable String userId);&#10;    &#10;    @GetMapping(&quot;/api/users/{userId}/faculty-id&quot;)&#10;    String getUserFacultyId(@PathVariable String userId);&#10;    &#10;    @GetMapping(&quot;/api/users/{userId}/major-id&quot;)&#10;    String getUserMajorId(@PathVariable String userId);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/resources/application-docker.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/resources/application-docker.properties" />
              <option name="originalContent" value="# Docker-specific configuration for post-service&#10;spring.application.name=post-service&#10;server.port=8085&#10;&#10;# MongoDB Configuration - Docker service name&#10;spring.data.mongodb.database=post_db&#10;spring.data.mongodb.host=post_db&#10;spring.data.mongodb.port=27017&#10;&#10;# Redis Configuration - Docker service name&#10;spring.data.redis.host=redis&#10;spring.data.redis.port=6379&#10;spring.data.redis.timeout=60000ms&#10;spring.data.redis.lettuce.pool.max-active=8&#10;spring.data.redis.lettuce.pool.max-idle=8&#10;spring.data.redis.lettuce.pool.min-idle=0&#10;&#10;# Kafka Configuration - Docker service name&#10;spring.kafka.bootstrap-servers=kafka:9092&#10;spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer&#10;spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer&#10;&#10;spring.kafka.consumer.group-id=post-service-group&#10;spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer&#10;spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer&#10;spring.kafka.consumer.properties.spring.json.trusted.packages=*&#10;spring.kafka.consumer.auto-offset-reset=earliest&#10;spring.kafka.consumer.enable-auto-commit=true&#10;&#10;# Eureka Configuration - Docker service name&#10;eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/&#10;eureka.instance.prefer-ip-address=true&#10;eureka.instance.instance-id=${spring.application.name}:${server.port}&#10;&#10;# Media Service Configuration - Docker service name&#10;media-service.url=http://media-service:8084&#10;&#10;# File Upload Configuration&#10;spring.servlet.multipart.max-file-size=10MB&#10;spring.servlet.multipart.max-request-size=50MB&#10;&#10;# Actuator Configuration&#10;management.endpoints.web.exposure.include=health,info,metrics&#10;management.endpoint.health.show-details=always&#10;&#10;# Logging Configuration&#10;logging.level.com.ctuconnect=DEBUG&#10;logging.level.org.springframework.kafka=INFO&#10;logging.level.org.springframework.data.mongodb=INFO&#10;" />
              <option name="updatedContent" value="# Docker-specific configuration for post-service&#13;&#10;spring.application.name=post-service&#13;&#10;server.port=8085&#13;&#10;&#13;&#10;# MongoDB Configuration - Docker service name&#13;&#10;spring.data.mongodb.database=post_db&#13;&#10;spring.data.mongodb.host=post_db&#13;&#10;spring.data.mongodb.port=27017&#13;&#10;&#13;&#10;# Redis Configuration - Docker service name&#13;&#10;spring.data.redis.host=redis&#13;&#10;spring.data.redis.port=6379&#13;&#10;spring.data.redis.timeout=60000ms&#13;&#10;spring.data.redis.lettuce.pool.max-active=8&#13;&#10;spring.data.redis.lettuce.pool.min-idle=0&#13;&#10;&#13;&#10;# Kafka Configuration - Docker service name&#13;&#10;spring.kafka.bootstrap-servers=kafka:9092&#13;&#10;spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer&#13;&#10;spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer&#13;&#10;&#13;&#10;spring.kafka.consumer.group-id=post-service-group&#13;&#10;spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer&#13;&#10;spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer&#13;&#10;spring.kafka.consumer.properties.spring.json.trusted.packages=*&#13;&#10;spring.kafka.consumer.auto-offset-reset=earliest&#13;&#10;spring.kafka.consumer.enable-auto-commit=true&#13;&#10;&#13;&#10;# Eureka Configuration - Docker service name&#13;&#10;eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/&#13;&#10;eureka.instance.prefer-ip-address=true&#13;&#10;eureka.instance.instance-id=${spring.application.name}:${server.port}&#13;&#10;&#13;&#10;# User Service Configuration - Docker service name&#13;&#10;user-service.url=http://user-service:8081&#13;&#10;&#13;&#10;# Media Service Configuration - Docker service name&#13;&#10;media-service.url=http://media-service:8084&#13;&#10;&#13;&#10;# Feign Configuration&#13;&#10;feign.client.config.default.connect-timeout=10000&#13;&#10;feign.client.config.default.read-timeout=10000&#13;&#10;feign.client.config.default.logger-level=basic&#13;&#10;&#13;&#10;# File Upload Configuration&#13;&#10;spring.servlet.multipart.max-file-size=10MB&#13;&#10;spring.servlet.multipart.max-request-size=50MB&#13;&#10;&#13;&#10;# Actuator Configuration&#13;&#10;management.endpoints.web.exposure.include=health,info,metrics&#13;&#10;management.endpoint.health.show-details=always&#13;&#10;&#13;&#10;# Logging Configuration&#13;&#10;logging.level.com.ctuconnect=DEBUG&#13;&#10;logging.level.org.springframework.kafka=INFO&#13;&#10;logging.level.org.springframework.data.mongodb=INFO" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/resources/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/resources/application.properties" />
              <option name="originalContent" value="spring.application.name=post-service&#10;server.port=8085&#10;&#10;# MongoDB Configuration&#10;spring.data.mongodb.database=post_db&#10;spring.data.mongodb.host=localhost&#10;spring.data.mongodb.port=27018&#10;&#10;# Kafka Configuration&#10;spring.kafka.bootstrap-servers=localhost:9092&#10;spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer&#10;spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer&#10;&#10;# Kafka Consumer Configuration - Fix missing group-id error&#10;spring.kafka.consumer.group-id=post-service-group&#10;spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer&#10;spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer&#10;spring.kafka.consumer.properties.spring.json.trusted.packages=*&#10;spring.kafka.consumer.auto-offset-reset=earliest&#10;spring.kafka.consumer.enable-auto-commit=true&#10;&#10;# Eureka Configuration&#10;eureka.client.service-url.defaultZone=http://localhost:8761/eureka/&#10;eureka.instance.prefer-ip-address=true&#10;eureka.instance.instance-id=${spring.application.name}:${server.port}&#10;&#10;# Redis Configuration - Fix for Docker container networking&#10;spring.data.redis.host=redis&#10;spring.data.redis.port=6379&#10;spring.data.redis.timeout=60000ms&#10;spring.data.redis.lettuce.pool.max-active=8&#10;spring.data.redis.lettuce.pool.max-idle=8&#10;spring.data.redis.lettuce.pool.min-idle=0&#10;&#10;# Media Service Configuration&#10;media-service.url=http://localhost:8084&#10;&#10;# File Upload Configuration&#10;spring.servlet.multipart.max-file-size=10MB&#10;spring.servlet.multipart.max-request-size=50MB&#10;&#10;# Actuator Configuration&#10;management.endpoints.web.exposure.include=health,info,metrics&#10;management.endpoint.health.show-details=always&#10;&#10;# Logging Configuration&#10;logging.level.vn.ctu.edu.postservice=DEBUG&#10;logging.level.org.springframework.kafka=INFO&#10;logging.level.org.springframework.data.mongodb=INFO&#10;" />
              <option name="updatedContent" value="spring.application.name=post-service&#10;server.port=8085&#10;&#10;# MongoDB Configuration&#10;spring.data.mongodb.database=post_db&#10;spring.data.mongodb.host=localhost&#10;spring.data.mongodb.port=27018&#10;&#10;# Kafka Configuration&#10;spring.kafka.bootstrap-servers=localhost:9092&#10;spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer&#10;spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer&#10;&#10;# Kafka Consumer Configuration - Fix missing group-id error&#10;spring.kafka.consumer.group-id=post-service-group&#10;spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer&#10;spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer&#10;spring.kafka.consumer.properties.spring.json.trusted.packages=*&#10;spring.kafka.consumer.auto-offset-reset=earliest&#10;spring.kafka.consumer.enable-auto-commit=true&#10;&#10;# Eureka Configuration&#10;eureka.client.service-url.defaultZone=http://localhost:8761/eureka/&#10;eureka.instance.prefer-ip-address=true&#10;eureka.instance.instance-id=${spring.application.name}:${server.port}&#10;&#10;# Redis Configuration - Fix for Docker container networking&#10;spring.data.redis.host=redis&#10;spring.data.redis.port=6379&#10;spring.data.redis.timeout=60000ms&#10;spring.data.redis.lettuce.pool.max-active=8&#10;spring.data.redis.lettuce.pool.max-idle=8&#10;spring.data.redis.lettuce.pool.min-idle=0&#10;&#10;# User Service Configuration&#10;user-service.url=http://localhost:8081&#10;&#10;# Media Service Configuration&#10;media-service.url=http://localhost:8084&#10;&#10;# Feign Configuration&#10;feign.client.config.default.connect-timeout=5000&#10;feign.client.config.default.read-timeout=5000&#10;feign.client.config.default.logger-level=basic&#10;&#10;# File Upload Configuration&#10;spring.servlet.multipart.max-file-size=10MB&#10;spring.servlet.multipart.max-request-size=50MB&#10;&#10;# Actuator Configuration&#10;management.endpoints.web.exposure.include=health,info,metrics&#10;management.endpoint.health.show-details=always&#10;&#10;# Logging Configuration&#10;logging.level.vn.ctu.edu.postservice=DEBUG&#10;logging.level.org.springframework.kafka=INFO&#10;logging.level.org.springframework.data.mongodb=INFO" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/ctuconnect/controller/UserSyncController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/ctuconnect/controller/UserSyncController.java" />
              <option name="originalContent" value="package com.ctuconnect.controller;&#10;&#10;import com.ctuconnect.dto.AuthorDTO;&#10;import com.ctuconnect.dto.UserDTO;&#10;import com.ctuconnect.security.annotation.RequireAuth;&#10;import com.ctuconnect.service.UserSyncService;&#10;import com.ctuconnect.service.UserService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.Set;&#10;&#10;/**&#10; * Controller để xử lý đồng bộ dữ liệu giữa auth-db và user-db&#10; * Các endpoint này được gọi từ auth-service hoặc các microservices khác&#10; */&#10;@RestController&#10;@RequestMapping(&quot;/api/users/sync&quot;)&#10;public class UserSyncController {&#10;&#10;    @Autowired&#10;    private UserSyncService userSyncService;&#10;&#10;    @Autowired&#10;    private UserService userService;&#10;&#10;    /**&#10;     * Tạo user profile trong user-db khi user được tạo ở auth-db&#10;     * Endpoint này được gọi từ auth-service&#10;     */&#10;    @PostMapping(&quot;/create&quot;)&#10;    @RequireAuth(roles = {&quot;SYSTEM&quot;, &quot;ADMIN&quot;}) // Chỉ system hoặc admin mới có thể gọi&#10;    public ResponseEntity&lt;UserDTO&gt; syncUserFromAuth(&#10;            @RequestParam String userId,&#10;            @RequestParam String email,&#10;            @RequestParam String role) {&#10;        UserDTO userDTO = userSyncService.syncUserFromAuth(userId, email, role);&#10;        return ResponseEntity.ok(userDTO);&#10;    }&#10;&#10;    /**&#10;     * Cập nhật thông tin user khi có thay đổi từ auth-db&#10;     */&#10;    @PutMapping(&quot;/update&quot;)&#10;    @RequireAuth(roles = {&quot;SYSTEM&quot;, &quot;ADMIN&quot;})&#10;    public ResponseEntity&lt;UserDTO&gt; updateUserFromAuth(&#10;            @RequestParam String userId,&#10;            @RequestParam String email,&#10;            @RequestParam String role) {&#10;        UserDTO userDTO = userSyncService.updateUserFromAuth(userId, email, role);&#10;        return ResponseEntity.ok(userDTO);&#10;    }&#10;&#10;    /**&#10;     * Xóa user khỏi user-db khi user bị xóa ở auth-db&#10;     */&#10;    @DeleteMapping(&quot;/delete&quot;)&#10;    @RequireAuth(roles = {&quot;SYSTEM&quot;, &quot;ADMIN&quot;})&#10;    public ResponseEntity&lt;String&gt; deleteUserFromAuth(@RequestParam String userId) {&#10;        userSyncService.deleteUserFromAuth(userId);&#10;        return ResponseEntity.ok(&quot;User deleted from user database successfully&quot;);&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra tính nhất quán dữ liệu giữa auth-db và user-db&#10;     */&#10;    @GetMapping(&quot;/check&quot;)&#10;    @RequireAuth(roles = {&quot;SYSTEM&quot;, &quot;ADMIN&quot;})&#10;    public ResponseEntity&lt;Boolean&gt; checkUserSync(&#10;            @RequestParam String userId,&#10;            @RequestParam String email,&#10;            @RequestParam String role) {&#10;        boolean isSynced = userSyncService.isUserSynced(userId, email, role);&#10;        return ResponseEntity.ok(isSynced);&#10;    }&#10;&#10;    /**&#10;     * Lấy thông tin tác giả cho post-service&#10;     * Endpoint này được gọi từ post-service để lấy author info&#10;     */&#10;    @GetMapping(&quot;/authors/{id}&quot;)&#10;    public ResponseEntity&lt;AuthorDTO&gt; getAuthorInfo(@PathVariable(&quot;id&quot;) String authorId) {&#10;        AuthorDTO authorInfo = userSyncService.getAuthorInfo(authorId);&#10;        return ResponseEntity.ok(authorInfo);&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách ID bạn bè của user&#10;     * Endpoint này được gọi từ post-service cho news feed algorithm&#10;     */&#10;    @GetMapping(&quot;/{userId}/friends/ids&quot;)&#10;    public ResponseEntity&lt;Set&lt;String&gt;&gt; getFriendIds(@PathVariable(&quot;userId&quot;) String userId) {&#10;        Set&lt;String&gt; friendIds = userService.getFriendIds(userId);&#10;        return ResponseEntity.ok(friendIds);&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách user có tương tác gần với user&#10;     * Endpoint này được gọi từ post-service cho news feed algorithm&#10;     */&#10;    @GetMapping(&quot;/{userId}/close-interactions&quot;)&#10;    public ResponseEntity&lt;Set&lt;String&gt;&gt; getCloseInteractionIds(@PathVariable(&quot;userId&quot;) String userId) {&#10;        Set&lt;String&gt; closeInteractionIds = userService.getCloseInteractionIds(userId);&#10;        return ResponseEntity.ok(closeInteractionIds);&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách user cùng khoa&#10;     * Endpoint này được gọi từ post-service cho news feed algorithm&#10;     */&#10;    @GetMapping(&quot;/{userId}/same-faculty&quot;)&#10;    public ResponseEntity&lt;Set&lt;String&gt;&gt; getSameFacultyUserIds(@PathVariable(&quot;userId&quot;) String userId) {&#10;        Set&lt;String&gt; sameFacultyIds = userService.getSameFacultyUserIds(userId);&#10;        return ResponseEntity.ok(sameFacultyIds);&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách user cùng ngành&#10;     * Endpoint này được gọi từ post-service cho news feed algorithm&#10;     */&#10;    @GetMapping(&quot;/{userId}/same-major&quot;)&#10;    public ResponseEntity&lt;Set&lt;String&gt;&gt; getSameMajorUserIds(@PathVariable(&quot;userId&quot;) String userId) {&#10;        Set&lt;String&gt; sameMajorIds = userService.getSameMajorUserIds(userId);&#10;        return ResponseEntity.ok(sameMajorIds);&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách interest tags của user&#10;     * Endpoint này được gọi từ post-service cho content recommendation&#10;     */&#10;    @GetMapping(&quot;/{userId}/interest-tags&quot;)&#10;    public ResponseEntity&lt;Set&lt;String&gt;&gt; getUserInterestTags(@PathVariable(&quot;userId&quot;) String userId) {&#10;        Set&lt;String&gt; interestTags = userService.getUserInterestTags(userId);&#10;        return ResponseEntity.ok(interestTags);&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách preferred categories của user&#10;     * Endpoint này được gọi từ post-service cho content filtering&#10;     */&#10;    @GetMapping(&quot;/{userId}/preferred-categories&quot;)&#10;    public ResponseEntity&lt;Set&lt;String&gt;&gt; getUserPreferredCategories(@PathVariable(&quot;userId&quot;) String userId) {&#10;        Set&lt;String&gt; preferredCategories = userService.getUserPreferredCategories(userId);&#10;        return ResponseEntity.ok(preferredCategories);&#10;    }&#10;&#10;    /**&#10;     * Lấy faculty ID của user&#10;     * Endpoint này được gọi từ post-service cho group filtering&#10;     */&#10;    @GetMapping(&quot;/{userId}/faculty-id&quot;)&#10;    public ResponseEntity&lt;String&gt; getUserFacultyId(@PathVariable(&quot;userId&quot;) String userId) {&#10;        String facultyId = userService.getUserFacultyId(userId);&#10;        return ResponseEntity.ok(facultyId);&#10;    }&#10;&#10;    /**&#10;     * Lấy major ID của user&#10;     * Endpoint này được gọi từ post-service cho group filtering&#10;     */&#10;    @GetMapping(&quot;/{userId}/major-id&quot;)&#10;    public ResponseEntity&lt;String&gt; getUserMajorId(@PathVariable(&quot;userId&quot;) String userId) {&#10;        String majorId = userService.getUserMajorId(userId);&#10;        return ResponseEntity.ok(majorId);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ctuconnect.controller;&#10;&#10;import com.ctuconnect.dto.AuthorDTO;&#10;import com.ctuconnect.dto.UserDTO;&#10;import com.ctuconnect.security.annotation.RequireAuth;&#10;import com.ctuconnect.service.UserSyncService;&#10;import com.ctuconnect.service.UserService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.Set;&#10;&#10;/**&#10; * Controller để xử lý đồng bộ dữ liệu giữa auth-db và user-db&#10; * Các endpoint này được gọi từ auth-service hoặc các microservices khác&#10; */&#10;@RestController&#10;@RequestMapping(&quot;/api/users/sync&quot;)&#10;public class UserSyncController {&#10;&#10;    @Autowired&#10;    private UserSyncService userSyncService;&#10;&#10;    @Autowired&#10;    private UserService userService;&#10;&#10;    /**&#10;     * Tạo user profile trong user-db khi user được tạo ở auth-db&#10;     * Endpoint này được gọi từ auth-service&#10;     */&#10;    @PostMapping(&quot;/create&quot;)&#10;    @RequireAuth(roles = {&quot;SYSTEM&quot;, &quot;ADMIN&quot;}) // Chỉ system hoặc admin mới có thể gọi&#10;    public ResponseEntity&lt;UserDTO&gt; syncUserFromAuth(&#10;            @RequestParam String userId,&#10;            @RequestParam String email,&#10;            @RequestParam String role) {&#10;        UserDTO userDTO = userSyncService.syncUserFromAuth(userId, email, role);&#10;        return ResponseEntity.ok(userDTO);&#10;    }&#10;&#10;    /**&#10;     * Cập nhật thông tin user khi có thay đổi từ auth-db&#10;     */&#10;    @PutMapping(&quot;/update&quot;)&#10;    @RequireAuth(roles = {&quot;SYSTEM&quot;, &quot;ADMIN&quot;})&#10;    public ResponseEntity&lt;UserDTO&gt; updateUserFromAuth(&#10;            @RequestParam String userId,&#10;            @RequestParam String email,&#10;            @RequestParam String role) {&#10;        UserDTO userDTO = userSyncService.updateUserFromAuth(userId, email, role);&#10;        return ResponseEntity.ok(userDTO);&#10;    }&#10;&#10;    /**&#10;     * Xóa user khỏi user-db khi user bị xóa ở auth-db&#10;     */&#10;    @DeleteMapping(&quot;/delete&quot;)&#10;    @RequireAuth(roles = {&quot;SYSTEM&quot;, &quot;ADMIN&quot;})&#10;    public ResponseEntity&lt;String&gt; deleteUserFromAuth(@RequestParam String userId) {&#10;        userSyncService.deleteUserFromAuth(userId);&#10;        return ResponseEntity.ok(&quot;User deleted from user database successfully&quot;);&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra tính nhất quán dữ liệu giữa auth-db và user-db&#10;     */&#10;    @GetMapping(&quot;/check&quot;)&#10;    @RequireAuth(roles = {&quot;SYSTEM&quot;, &quot;ADMIN&quot;})&#10;    public ResponseEntity&lt;Boolean&gt; checkUserSync(&#10;            @RequestParam String userId,&#10;            @RequestParam String email,&#10;            @RequestParam String role) {&#10;        boolean isSynced = userSyncService.isUserSynced(userId, email, role);&#10;        return ResponseEntity.ok(isSynced);&#10;    }&#10;&#10;    /**&#10;     * Lấy thông tin tác giả cho post-service&#10;     * Endpoint này được gọi từ post-service để lấy author info&#10;     * Không yêu cầu authentication vì đây là internal service call&#10;     */&#10;    @GetMapping(&quot;/authors/{id}&quot;)&#10;    public ResponseEntity&lt;AuthorDTO&gt; getAuthorInfo(@PathVariable(&quot;id&quot;) String authorId) {&#10;        AuthorDTO authorInfo = userSyncService.getAuthorInfo(authorId);&#10;        return ResponseEntity.ok(authorInfo);&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách ID bạn bè của user&#10;     * Endpoint này được gọi từ post-service cho news feed algorithm&#10;     * Không yêu cầu authentication vì đây là internal service call&#10;     */&#10;    @GetMapping(&quot;/{userId}/friends/ids&quot;)&#10;    public ResponseEntity&lt;Set&lt;String&gt;&gt; getFriendIds(@PathVariable(&quot;userId&quot;) String userId) {&#10;        Set&lt;String&gt; friendIds = userService.getFriendIds(userId);&#10;        return ResponseEntity.ok(friendIds);&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách user có tương tác gần với user&#10;     * Endpoint này được gọi từ post-service cho news feed algorithm&#10;     */&#10;    @GetMapping(&quot;/{userId}/close-interactions&quot;)&#10;    public ResponseEntity&lt;Set&lt;String&gt;&gt; getCloseInteractionIds(@PathVariable(&quot;userId&quot;) String userId) {&#10;        Set&lt;String&gt; closeInteractionIds = userService.getCloseInteractionIds(userId);&#10;        return ResponseEntity.ok(closeInteractionIds);&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách user cùng khoa&#10;     * Endpoint này được gọi từ post-service cho news feed algorithm&#10;     */&#10;    @GetMapping(&quot;/{userId}/same-faculty&quot;)&#10;    public ResponseEntity&lt;Set&lt;String&gt;&gt; getSameFacultyUserIds(@PathVariable(&quot;userId&quot;) String userId) {&#10;        Set&lt;String&gt; sameFacultyIds = userService.getSameFacultyUserIds(userId);&#10;        return ResponseEntity.ok(sameFacultyIds);&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách user cùng ngành&#10;     * Endpoint này được gọi từ post-service cho news feed algorithm&#10;     */&#10;    @GetMapping(&quot;/{userId}/same-major&quot;)&#10;    public ResponseEntity&lt;Set&lt;String&gt;&gt; getSameMajorUserIds(@PathVariable(&quot;userId&quot;) String userId) {&#10;        Set&lt;String&gt; sameMajorIds = userService.getSameMajorUserIds(userId);&#10;        return ResponseEntity.ok(sameMajorIds);&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách interest tags của user&#10;     * Endpoint này được gọi từ post-service cho content recommendation&#10;     */&#10;    @GetMapping(&quot;/{userId}/interest-tags&quot;)&#10;    public ResponseEntity&lt;Set&lt;String&gt;&gt; getUserInterestTags(@PathVariable(&quot;userId&quot;) String userId) {&#10;        Set&lt;String&gt; interestTags = userService.getUserInterestTags(userId);&#10;        return ResponseEntity.ok(interestTags);&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách preferred categories của user&#10;     * Endpoint này được gọi từ post-service cho content filtering&#10;     */&#10;    @GetMapping(&quot;/{userId}/preferred-categories&quot;)&#10;    public ResponseEntity&lt;Set&lt;String&gt;&gt; getUserPreferredCategories(@PathVariable(&quot;userId&quot;) String userId) {&#10;        Set&lt;String&gt; preferredCategories = userService.getUserPreferredCategories(userId);&#10;        return ResponseEntity.ok(preferredCategories);&#10;    }&#10;&#10;    /**&#10;     * Lấy faculty ID của user&#10;     * Endpoint này được gọi từ post-service cho group filtering&#10;     */&#10;    @GetMapping(&quot;/{userId}/faculty-id&quot;)&#10;    public ResponseEntity&lt;String&gt; getUserFacultyId(@PathVariable(&quot;userId&quot;) String userId) {&#10;        String facultyId = userService.getUserFacultyId(userId);&#10;        return ResponseEntity.ok(facultyId);&#10;    }&#10;&#10;    /**&#10;     * Lấy major ID của user&#10;     * Endpoint này được gọi từ post-service cho group filtering&#10;     */&#10;    @GetMapping(&quot;/{userId}/major-id&quot;)&#10;    public ResponseEntity&lt;String&gt; getUserMajorId(@PathVariable(&quot;userId&quot;) String userId) {&#10;        String majorId = userService.getUserMajorId(userId);&#10;        return ResponseEntity.ok(majorId);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/ctuconnect/dto/ActivityDTO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/ctuconnect/dto/ActivityDTO.java" />
              <option name="originalContent" value="package com.ctuconnect.dto;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class ActivityDTO {&#10;    private String id;&#10;    private String userId;&#10;    private String activityType; // POST_CREATED, POST_LIKED, COMMENT_ADDED, etc.&#10;    private String targetType; // POST, COMMENT, USER&#10;    private String targetId;&#10;    private String actorName;&#10;    private String actorAvatarUrl;&#10;&#10;    // For activity feed display&#10;    private String displayText;&#10;    private String actionUrl;&#10;    private boolean isRead;&#10;&#10;    public enum ActivityType {&#10;        POST_CREATED,&#10;        POST_LIKED,&#10;        POST_SHARED,&#10;        COMMENT_ADDED,&#10;        FRIEND_REQUEST_SENT,&#10;        FRIEND_REQUEST_ACCEPTED,&#10;        PROFILE_UPDATED&#10;    }&#10;&#10;    public enum TargetType {&#10;        POST,&#10;        COMMENT,&#10;        USER,&#10;        PROFILE&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ctuconnect.dto;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class ActivityDTO {&#10;    private String id;&#10;    private String userId;&#10;    private String activityType; // POST_CREATED, POST_LIKED, COMMENT_ADDED, etc.&#10;    private String targetType; // POST, COMMENT, USER&#10;    private String targetId;&#10;    private String entityType; // Add missing entityType field&#10;    private String entityId; // Add missing entityId field&#10;    private String description;&#10;    private LocalDateTime timestamp;&#10;    private String actorName;&#10;    private String actorAvatarUrl;&#10;&#10;    // For activity feed display&#10;    private String displayText;&#10;    private String actionUrl;&#10;    private boolean isRead;&#10;&#10;    public enum ActivityType {&#10;        POST_CREATED,&#10;        POST_LIKED,&#10;        POST_SHARED,&#10;        COMMENT_ADDED,&#10;        FRIEND_REQUEST_SENT,&#10;        FRIEND_REQUEST_ACCEPTED,&#10;        PROFILE_UPDATED&#10;    }&#10;&#10;    public enum TargetType {&#10;        POST,&#10;        COMMENT,&#10;        USER,&#10;        PROFILE&#10;    }&#10;&#10;    public enum EntityType {&#10;        POST,&#10;        COMMENT,&#10;        USER,&#10;        PROFILE&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/ctuconnect/dto/FriendSuggestionDTO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/ctuconnect/dto/FriendSuggestionDTO.java" />
              <option name="updatedContent" value="package com.ctuconnect.dto;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Data&#10;@AllArgsConstructor&#10;@NoArgsConstructor&#10;@Builder&#10;public class FriendSuggestionDTO {&#10;    private String userId;&#10;    private String username;&#10;    private String fullName;&#10;    private String avatarUrl;&#10;    private String bio;&#10;    &#10;    // Suggestion metadata&#10;    private int mutualFriendsCount;&#10;    private String suggestionReason;&#10;    private double relevanceScore;&#10;    private SuggestionType suggestionType;&#10;    &#10;    // Academic context&#10;    private String facultyName;&#10;    private String majorName;&#10;    private String batchYear;&#10;    &#10;    // Social context&#10;    private boolean sameCollege;&#10;    private boolean sameFaculty;&#10;    private boolean sameMajor;&#10;    private boolean sameBatch;&#10;    &#10;    public enum SuggestionType {&#10;        MUTUAL_FRIENDS,&#10;        ACADEMIC_CONNECTION,&#10;        FRIENDS_OF_FRIENDS,&#10;        PROFILE_VIEWER,&#10;        SIMILAR_INTERESTS,&#10;        LOCATION_BASED,&#10;        ACTIVITY_BASED&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/ctuconnect/event/UserEventPublisher.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/ctuconnect/event/UserEventPublisher.java" />
              <option name="updatedContent" value="package com.ctuconnect.event;&#10;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.kafka.core.KafkaTemplate;&#10;import org.springframework.stereotype.Service;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import lombok.extern.slf4j.Slf4j;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;/**&#10; * Service to publish user profile update events to Kafka&#10; * This notifies other services (like post-service) when user profiles are updated&#10; */&#10;@Service&#10;@Slf4j&#10;public class UserEventPublisher {&#10;&#10;    @Autowired&#10;    private KafkaTemplate&lt;String, String&gt; kafkaTemplate;&#10;&#10;    @Autowired&#10;    private ObjectMapper objectMapper;&#10;&#10;    private static final String USER_PROFILE_UPDATED_TOPIC = &quot;user-profile-updated&quot;;&#10;&#10;    /**&#10;     * Publish user profile update event&#10;     */&#10;    public void publishUserProfileUpdateEvent(String userId, String fullName, String email, String avatarUrl, String role) {&#10;        try {&#10;            Map&lt;String, Object&gt; eventData = new HashMap&lt;&gt;();&#10;            eventData.put(&quot;userId&quot;, userId);&#10;            eventData.put(&quot;fullName&quot;, fullName);&#10;            eventData.put(&quot;email&quot;, email);&#10;            eventData.put(&quot;avatarUrl&quot;, avatarUrl);&#10;            eventData.put(&quot;role&quot;, role);&#10;            eventData.put(&quot;eventType&quot;, &quot;USER_PROFILE_UPDATED&quot;);&#10;            eventData.put(&quot;timestamp&quot;, System.currentTimeMillis());&#10;&#10;            String eventMessage = objectMapper.writeValueAsString(eventData);&#10;            &#10;            kafkaTemplate.send(USER_PROFILE_UPDATED_TOPIC, userId, eventMessage);&#10;            log.info(&quot;Published user profile update event for user: {}&quot;, userId);&#10;            &#10;        } catch (Exception e) {&#10;            log.error(&quot;Failed to publish user profile update event for user {}: {}&quot;, userId, e.getMessage(), e);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Publish user profile update event with user entity data&#10;     */&#10;    public void publishUserProfileUpdateEvent(String userId, Map&lt;String, Object&gt; userData) {&#10;        try {&#10;            Map&lt;String, Object&gt; eventData = new HashMap&lt;&gt;();&#10;            eventData.put(&quot;userId&quot;, userId);&#10;            eventData.put(&quot;userData&quot;, userData);&#10;            eventData.put(&quot;eventType&quot;, &quot;USER_PROFILE_UPDATED&quot;);&#10;            eventData.put(&quot;timestamp&quot;, System.currentTimeMillis());&#10;&#10;            String eventMessage = objectMapper.writeValueAsString(eventData);&#10;            &#10;            kafkaTemplate.send(USER_PROFILE_UPDATED_TOPIC, userId, eventMessage);&#10;            log.info(&quot;Published user profile update event for user: {}&quot;, userId);&#10;            &#10;        } catch (Exception e) {&#10;            log.error(&quot;Failed to publish user profile update event for user {}: {}&quot;, userId, e.getMessage(), e);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>