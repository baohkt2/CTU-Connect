<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/ARCHITECTURE_OPTIMIZATION.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ARCHITECTURE_OPTIMIZATION.md" />
              <option name="originalContent" value="# CTU-Connect Architecture Optimization Plan&#10;## Based on Facebook's Social Network Model&#10;&#10;### Current Architecture Analysis&#10;- ✅ Microservices architecture with proper service separation&#10;- ✅ Event-driven communication via Kafka&#10;- ✅ Multiple database technologies (PostgreSQL, MongoDB, Neo4j, Redis)&#10;- ✅ API Gateway for centralized routing&#10;- ✅ Service discovery with Eureka&#10;&#10;### Key Optimizations Required&#10;- Implement eventual consistency patterns&#10;#### 1. Data Consistency &amp; Flow Optimization&#10;- Implement eventual consistency patterns&#10;- Add distributed transaction management&#10;- Optimize cross-service data synchronization&#10;&#10;#### 3. Social Graph Optimization&#10;- Friend suggestion algorithms&#10;#### 2. Enhanced Post System (Facebook-like)&#10;- Timeline generation algorithms&#10;- News feed ranking and personalization&#10;- Real-time updates and notifications&#10;- Database optimization and indexing&#10;- Load balancing and horizontal scaling&#10;&#10;#### 5. Real-time Features&#10;#### 3. Social Graph Optimization&#10;- Friend suggestion algorithms&#10;- Privacy controls and audience targeting&#10;- Activity feed generation&#10;- Real-time chat and comments&#10;- Activity status tracking&#10;#### 4. Performance &amp; Scalability&#10;- Caching strategies at multiple levels&#10;#### 5. Real-time Features&#10;- Live notifications&#10;- Real-time chat and comments&#10;- Activity status tracking&#10;" />
              <option name="updatedContent" value="# CTU-Connect Architecture Optimization Plan&#10;## Based on Facebook's Social Network Model&#10;&#10;### Current Architecture Analysis&#10;- ✅ Microservices architecture with proper service separation&#10;- ✅ Event-driven communication via Kafka&#10;- ✅ Multiple database technologies (PostgreSQL, MongoDB, Neo4j, Redis)&#10;- ✅ API Gateway for centralized routing&#10;- ✅ Service discovery with Eureka&#10;&#10;## COMPLETED OPTIMIZATIONS&#10;&#10;### 1. Enhanced Data Models (Facebook-like)&#10;&#10;#### Enhanced PostEntity&#10;- **Audience Targeting**: Similar to Facebook's privacy controls with granular audience settings&#10;- **Engagement Metrics**: Real-time engagement scoring for feed ranking algorithms&#10;- **Post Types**: Support for TEXT, IMAGE, VIDEO, LINK, POLL, EVENT, SHARED&#10;- **Location Support**: Geographic tagging capabilities&#10;- **Scheduled Posts**: Ability to schedule posts for future publishing&#10;- **Edit History**: Track post modifications with timestamps&#10;&#10;#### Advanced Social Graph (Neo4j)&#10;- **Friend Suggestions**: Multi-signal algorithm using mutual friends, academic connections, profile viewers&#10;- **Relationship Types**: FRIENDS_WITH, FRIEND_REQUEST_SENT, VIEWED_PROFILE, BLOCKED&#10;- **Academic Context**: Faculty, major, and batch-based connections&#10;- **Interaction History**: Track user interactions for personalization&#10;&#10;### 2. Facebook-like News Feed Algorithm&#10;&#10;#### NewsFeedService Implementation&#10;- **Personalized Ranking**: Multi-factor scoring system&#10;  - Friend relationship weight (1.0)&#10;  - Engagement score weight (0.8)&#10;  - Recency weight (0.6)&#10;  - Content relevance weight (0.7)&#10;- **Cache Strategy**: 30-minute feed cache with intelligent invalidation&#10;- **Over-fetching**: Retrieve 3x posts for optimal ranking&#10;- **Diversity Control**: Prevent feed domination by single authors&#10;&#10;#### Feed Types&#10;- **Personalized Feed**: User-specific content based on social graph&#10;- **Trending Posts**: Engagement-based trending algorithm&#10;- **User Timeline**: Profile-specific post timeline with privacy filtering&#10;&#10;### 3. Real-time Notification System&#10;&#10;#### NotificationService Features&#10;- **Real-time WebSocket**: Instant notifications via SimpMessagingTemplate&#10;- **Event-driven**: Kafka integration for scalable notification processing&#10;- **Notification Types**: POST_LIKED, COMMENTED, SHARED, FRIEND_REQUEST, etc.&#10;- **Bulk Notifications**: Efficient handling of viral content notifications&#10;- **Unread Counters**: Redis-cached unread notification counts&#10;&#10;### 4. Data Consistency Management&#10;&#10;#### DataConsistencyService&#10;- **Eventual Consistency**: Cross-service data synchronization&#10;- **Cache Invalidation**: Smart cache invalidation on data changes&#10;- **Compensation Logic**: Failure handling and retry mechanisms&#10;- **Event Sourcing**: Kafka-based event propagation&#10;&#10;### 5. Advanced Caching Strategy&#10;&#10;#### Multi-level Caching&#10;- **Redis Caching**: &#10;  - User data (24 hours TTL)&#10;  - Posts (6 hours TTL)&#10;  - Friend suggestions (6 hours TTL)&#10;  - News feed (30 minutes TTL)&#10;- **Application-level**: In-memory caching for frequently accessed data&#10;- **Database-level**: Optimized queries and indexing&#10;&#10;### 6. Social Graph Optimization&#10;&#10;#### SocialGraphService Features&#10;- **Friend Suggestions Algorithm**:&#10;  - Mutual friends (highest priority)&#10;  - Academic connections (faculty/major/batch)&#10;  - Friends of friends&#10;  - Profile viewers&#10;  - Similar interests&#10;- **Relevance Scoring**: Multi-factor relevance calculation&#10;- **Cache Management**: 6-hour TTL with smart invalidation&#10;&#10;### 7. Performance Enhancements&#10;&#10;#### Database Optimizations&#10;- **MongoDB**: Compound indexes for posts, engagement-based sorting&#10;- **Neo4j**: Optimized Cypher queries for relationship traversal&#10;- **PostgreSQL**: Proper indexing for auth and media services&#10;- **Redis**: Strategic caching and session management&#10;&#10;#### API Optimizations&#10;- **Pagination**: Consistent pagination across all endpoints&#10;- **Bulk Operations**: Efficient batch processing for notifications&#10;- **Async Processing**: CompletableFuture for non-blocking operations&#10;&#10;### 8. Enhanced Security &amp; Privacy&#10;&#10;#### Privacy Controls&#10;- **Audience Settings**: PUBLIC, FRIENDS, CUSTOM, ONLY_ME&#10;- **Academic Targeting**: Faculty/major/batch-specific visibility&#10;- **Block Lists**: User blocking functionality&#10;- **Profile Privacy**: Granular profile visibility controls&#10;&#10;### 9. Real-time Features&#10;&#10;#### WebSocket Integration&#10;- **Live Notifications**: Real-time notification delivery&#10;- **Activity Status**: User online/offline status tracking&#10;- **Real-time Comments**: Live comment updates on posts&#10;&#10;### 10. Monitoring &amp; Health Checks&#10;&#10;#### System Monitoring&#10;- **Health Indicators**: Redis, MongoDB, Neo4j health checks&#10;- **Performance Metrics**: Engagement rates, cache hit ratios&#10;- **Error Tracking**: Comprehensive logging and error handling&#10;&#10;## IMPLEMENTATION SUMMARY&#10;&#10;### New Services Created&#10;1. **NewsFeedService** - Facebook-like feed generation&#10;2. **NotificationService** - Real-time notification system&#10;3. **SocialGraphService** - Advanced friend suggestions&#10;4. **DataConsistencyService** - Cross-service data synchronization&#10;&#10;### Enhanced Controllers&#10;1. **EnhancedPostController** - Advanced post management&#10;2. **EnhancedUserController** - Social graph operations&#10;&#10;### Data Models Enhanced&#10;- **PostEntity** - Facebook-like post features&#10;- **NotificationEntity** - Rich notification system&#10;- **FriendSuggestionDTO** - Comprehensive suggestion data&#10;&#10;### Configuration Added&#10;- **CacheConfig** - Multi-level caching strategy&#10;- **HealthCheckConfig** - System health monitoring&#10;&#10;## FACEBOOK-INSPIRED FEATURES IMPLEMENTED&#10;&#10;### Content &amp; Engagement&#10;✅ **News Feed Algorithm** - Personalized content ranking&#10;✅ **Post Types** - Text, image, video, link, poll support&#10;✅ **Reactions System** - Like, love, laugh, etc.&#10;✅ **Comments &amp; Replies** - Threaded comment system&#10;✅ **Share Functionality** - Post sharing with attribution&#10;✅ **Trending Posts** - Viral content discovery&#10;&#10;### Social Features&#10;✅ **Friend Suggestions** - Multi-signal recommendation engine&#10;✅ **Mutual Friends** - Connection discovery&#10;✅ **Academic Networks** - University-specific connections&#10;✅ **People You May Know** - Profile viewer suggestions&#10;✅ **Friend Requests** - Connection management&#10;&#10;### Privacy &amp; Security&#10;✅ **Audience Controls** - Granular post visibility&#10;✅ **Academic Targeting** - Faculty/major-based sharing&#10;✅ **Block/Unblock** - User blocking system&#10;✅ **Profile Privacy** - Customizable profile visibility&#10;&#10;### Real-time Features&#10;✅ **Live Notifications** - Instant activity updates  &#10;✅ **Real-time Comments** - Live comment updates&#10;✅ **Activity Status** - Online presence tracking&#10;✅ **WebSocket Integration** - Real-time communication&#10;&#10;### Performance &amp; Scale&#10;✅ **Multi-level Caching** - Redis + application caching&#10;✅ **Event-driven Architecture** - Kafka message streaming&#10;✅ **Database Optimization** - Proper indexing and queries&#10;✅ **Load Balancing Ready** - Horizontal scaling support&#10;&#10;## DEPLOYMENT RECOMMENDATIONS&#10;&#10;### 1. Database Scaling&#10;- **MongoDB Sharding** for post data&#10;- **Neo4j Clustering** for social graph&#10;- **Redis Clustering** for caching layer&#10;&#10;### 2. Performance Monitoring&#10;- Implement APM tools (New Relic, DataDog)&#10;- Set up alerts for cache hit ratios&#10;- Monitor database query performance&#10;&#10;### 3. Content Delivery&#10;- Integrate CDN for media files&#10;- Implement image/video optimization&#10;- Add progressive loading for feeds&#10;&#10;### 4. Security Enhancements&#10;- Rate limiting on API endpoints&#10;- Content moderation system&#10;- Spam detection algorithms&#10;&#10;This comprehensive optimization transforms your CTU-Connect platform into a robust, scalable social network with Facebook-like capabilities while maintaining the academic focus of your original vision." />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/app/globals.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/app/globals.css" />
              <option name="originalContent" value="@tailwind base;&#10;@tailwind components;&#10;@tailwind utilities;&#10;&#10;:root {&#10;  --background: #ffffff;&#10;  --foreground: #121212;&#10;}&#10;&#10;body {&#10;  background: var(--background);&#10;  color: var(--foreground);&#10;  font-family: var(--font-geist-sans, Arial, Helvetica, sans-serif);&#10;}&#10;&#10;html {&#10;  font-family: var(--font-geist-sans, system-ui, sans-serif);&#10;}&#10;&#10;code, pre {&#10;  font-family: var(--font-geist-mono, 'Courier New', monospace);&#10;}&#10;&#10;/* Toast animations */&#10;@keyframes slide-in-right {&#10;  from {&#10;    transform: translateX(100%);&#10;    opacity: 0;&#10;  }&#10;  to {&#10;    transform: translateX(0);&#10;    opacity: 1;&#10;  }&#10;}&#10;&#10;.animate-slide-in-right {&#10;  animation: slide-in-right 0.3s ease-out;&#10;}&#10;&#10;.background-ctu,&#10;.bg-ctu-pattern {&#10;  background-image: url(&quot;/images/background-ctu.jpg&quot;);&#10;  background-size: cover;&#10;  background-position: center;&#10;  background-repeat: no-repeat;&#10;  position: relative;&#10;}&#10;&#10;.bg-ctu-pattern::before {&#10;  content: '';&#10;  position: absolute;&#10;  top: 0;&#10;  left: 0;&#10;  right: 0;&#10;  bottom: 0;&#10;  background: rgba(79, 70, 229, 0);&#10;  pointer-events: none;&#10;}&#10;&#10;/* Custom CSS for enhanced UX/UI */&#10;@layer base {&#10;  * {&#10;    @apply border-border;&#10;  }&#10;  body {&#10;    @apply bg-background text-foreground;&#10;    font-feature-settings: &quot;rlig&quot; 1, &quot;calt&quot; 1;&#10;  }&#10;}&#10;&#10;@layer components {&#10;  /* Animation classes for feedback */&#10;  .animate-fade-in {&#10;    animation: fadeIn 0.3s ease-out;&#10;  }&#10;&#10;  .animate-slide-up {&#10;    animation: slideUp 0.3s ease-out;&#10;  }&#10;&#10;  .animate-bounce-gentle {&#10;    animation: bounceGentle 0.6s ease-out;&#10;  }&#10;&#10;  .animate-scale-in {&#10;    animation: scaleIn 0.2s ease-out;&#10;  }&#10;&#10;  /* Post card hover effects */&#10;  .post-card {&#10;    @apply transition-all duration-300 ease-out;&#10;  }&#10;&#10;  .post-card:hover {&#10;    @apply transform -translate-y-1;&#10;  }&#10;&#10;  /* Button hover effects */&#10;  .btn-hover-lift {&#10;    @apply transition-all duration-200 ease-out;&#10;  }&#10;&#10;  .btn-hover-lift:hover {&#10;    @apply transform -translate-y-0.5 shadow-lg;&#10;  }&#10;&#10;  /* Loading spinner improvements */&#10;  .loading-spinner {&#10;    @apply animate-spin;&#10;  }&#10;&#10;  /* Form input focus effects */&#10;  .input-focus {&#10;    @apply transition-all duration-200 ease-out;&#10;  }&#10;&#10;  .input-focus:focus {&#10;    @apply ring-2 ring-indigo-500 ring-opacity-50 border-indigo-500 shadow-sm;&#10;  }&#10;&#10;  /* Vietnamese text improvements */&#10;  .vietnamese-text {&#10;    font-family: 'Inter', 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif;&#10;    line-height: 1.6;&#10;    letter-spacing: 0.01em;&#10;  }&#10;&#10;  /* Toast notification styles */&#10;  .toast-success {&#10;    @apply bg-green-50 text-green-800 border-green-200;&#10;  }&#10;&#10;  .toast-error {&#10;    @apply bg-red-50 text-red-800 border-red-200;&#10;  }&#10;&#10;  .toast-warning {&#10;    @apply bg-yellow-50 text-yellow-800 border-yellow-200;&#10;  }&#10;&#10;  .toast-info {&#10;    @apply bg-blue-50 text-blue-800 border-blue-200;&#10;  }&#10;&#10;  /* Mobile responsive improvements */&#10;  @media (max-width: 768px) {&#10;    .mobile-padding {&#10;      @apply px-3 py-2;&#10;    }&#10;&#10;    .mobile-text {&#10;      @apply text-sm;&#10;    }&#10;  }&#10;&#10;  /* Gradient backgrounds */&#10;  .gradient-primary {&#10;    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);&#10;  }&#10;&#10;  .gradient-secondary {&#10;    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);&#10;  }&#10;&#10;  .gradient-success {&#10;    background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);&#10;  }&#10;&#10;  /* Improved shadows */&#10;  .shadow-soft {&#10;    box-shadow: 0 2px 15px -3px rgba(0, 0, 0, 0.07), 0 10px 20px -2px rgba(0, 0, 0, 0.04);&#10;  }&#10;&#10;  .shadow-medium {&#10;    box-shadow: 0 4px 20px -2px rgba(0, 0, 0, 0.1), 0 8px 25px -5px rgba(0, 0, 0, 0.1);&#10;  }&#10;&#10;  /* Backdrop blur for better UI */&#10;  .backdrop-blur-custom {&#10;    backdrop-filter: blur(10px);&#10;    -webkit-backdrop-filter: blur(10px);&#10;  }&#10;&#10;  /* Improved scrollbar */&#10;  .custom-scrollbar {&#10;    scrollbar-width: thin;&#10;    scrollbar-color: #cbd5e0 #f7fafc;&#10;  }&#10;&#10;  .custom-scrollbar::-webkit-scrollbar {&#10;    width: 6px;&#10;  }&#10;&#10;  .custom-scrollbar::-webkit-scrollbar-track {&#10;    background: #f7fafc;&#10;    border-radius: 10px;&#10;  }&#10;&#10;  .custom-scrollbar::-webkit-scrollbar-thumb {&#10;    background: #cbd5e0;&#10;    border-radius: 10px;&#10;  }&#10;&#10;  .custom-scrollbar::-webkit-scrollbar thumb:hover {&#10;    background: #a0aec0;&#10;  }&#10;}&#10;&#10;@layer utilities {&#10;  /* Vietnamese typography utilities */&#10;  .text-vietnamese {&#10;    @apply vietnamese-text;&#10;  }&#10;&#10;  .text-balance {&#10;    text-wrap: balance;&#10;  }&#10;&#10;  .line-clamp-2 {&#10;    display: -webkit-box;&#10;    -webkit-line-clamp: 2;&#10;    -webkit-box-orient: vertical;&#10;    overflow: hidden;&#10;  }&#10;&#10;  .line-clamp-3 {&#10;    display: -webkit-box;&#10;    -webkit-line-clamp: 3;&#10;    -webkit-box-orient: vertical;&#10;    overflow: hidden;&#10;  }&#10;&#10;  /* Interaction utilities */&#10;  .cursor-pointer {&#10;    cursor: pointer;&#10;  }&#10;&#10;  .select-none {&#10;    user-select: none;&#10;  }&#10;&#10;  .touch-manipulation {&#10;    touch-action: manipulation;&#10;  }&#10;}&#10;&#10;/* Keyframe animations */&#10;@keyframes fadeIn {&#10;  from {&#10;    opacity: 0;&#10;    transform: translateY(-10px);&#10;  }&#10;  to {&#10;    opacity: 1;&#10;    transform: translateY(0);&#10;  }&#10;}&#10;&#10;@keyframes slideUp {&#10;  from {&#10;    opacity: 0;&#10;    transform: translateY(20px);&#10;  }&#10;  to {&#10;    opacity: 1;&#10;    transform: translateY(0);&#10;  }&#10;}&#10;&#10;@keyframes bounceGentle {&#10;  0%, 20%, 50%, 80%, 100% {&#10;    transform: translateY(0);&#10;  }&#10;  40% {&#10;    transform: translateY(-5px);&#10;  }&#10;  60% {&#10;    transform: translateY(-3px);&#10;  }&#10;}&#10;&#10;@keyframes scaleIn {&#10;  from {&#10;    opacity: 0;&#10;    transform: scale(0.9);&#10;  }&#10;  to {&#10;    opacity: 1;&#10;    transform: scale(1);&#10;  }&#10;}&#10;&#10;@keyframes pulse {&#10;  0%, 100% {&#10;    opacity: 1;&#10;  }&#10;  50% {&#10;    opacity: 0.7;&#10;  }&#10;}&#10;&#10;/* Vietnamese-specific font loading */&#10;@font-face {&#10;  font-family: 'Inter Vietnamese';&#10;  src: url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&amp;display=swap');&#10;  font-display: swap;&#10;  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9;&#10;}&#10;&#10;/* Improved focus styles for accessibility */&#10;*:focus-visible {&#10;  outline: 2px solid #667eea;&#10;  outline-offset: 2px;&#10;  border-radius: 4px;&#10;}&#10;&#10;/* Dark mode support (if needed in future) */&#10;@media (prefers-color-scheme: dark) {&#10;  :root {&#10;    --background: 0 0% 3.9%;&#10;    --foreground: 0 0% 98%;&#10;  }&#10;}&#10;&#10;/* Print styles for better document printing */&#10;@media print {&#10;  .no-print {&#10;    display: none !important;&#10;  }&#10;&#10;  .print-friendly {&#10;    color: black !important;&#10;    background: white !important;&#10;  }&#10;}&#10;" />
              <option name="updatedContent" value="@import &quot;tailwindcss&quot;;&#10;&#10;:root {&#10;  --background: #ffffff;&#10;  --foreground: #121212;&#10;}&#10;&#10;body {&#10;  background: var(--background);&#10;  color: var(--foreground);&#10;  font-family: var(--font-geist-sans, Arial, Helvetica, sans-serif);&#10;}&#10;&#10;html {&#10;  font-family: var(--font-geist-sans, system-ui, sans-serif);&#10;}&#10;&#10;code, pre {&#10;  font-family: var(--font-geist-mono, 'Courier New', monospace);&#10;}&#10;&#10;/* Toast animations */&#10;@keyframes slide-in-right {&#10;  from {&#10;    transform: translateX(100%);&#10;    opacity: 0;&#10;  }&#10;  to {&#10;    transform: translateX(0);&#10;    opacity: 1;&#10;  }&#10;}&#10;&#10;.animate-slide-in-right {&#10;  animation: slide-in-right 0.3s ease-out;&#10;}&#10;&#10;.background-ctu,&#10;.bg-ctu-pattern {&#10;  background-image: url(&quot;/images/background-ctu.jpg&quot;);&#10;  background-size: cover;&#10;  background-position: center;&#10;  background-repeat: no-repeat;&#10;  position: relative;&#10;}&#10;&#10;.bg-ctu-pattern::before {&#10;  content: '';&#10;  position: absolute;&#10;  top: 0;&#10;  left: 0;&#10;  right: 0;&#10;  bottom: 0;&#10;  background: rgba(79, 70, 229, 0);&#10;  pointer-events: none;&#10;}&#10;&#10;/* Animation classes for feedback */&#10;.animate-fade-in {&#10;  animation: fadeIn 0.3s ease-out;&#10;}&#10;&#10;.animate-slide-up {&#10;  animation: slideUp 0.3s ease-out;&#10;}&#10;&#10;.animate-bounce-gentle {&#10;  animation: bounceGentle 0.6s ease-out;&#10;}&#10;&#10;.animate-scale-in {&#10;  animation: scaleIn 0.2s ease-out;&#10;}&#10;&#10;/* Post card hover effects */&#10;.post-card {&#10;  transition: all 0.3s ease-out;&#10;}&#10;&#10;.post-card:hover {&#10;  transform: translateY(-4px);&#10;}&#10;&#10;/* Button hover effects */&#10;.btn-hover-lift {&#10;  transition: all 0.2s ease-out;&#10;}&#10;&#10;.btn-hover-lift:hover {&#10;  transform: translateY(-2px);&#10;  box-shadow: 0 10px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04);&#10;}&#10;&#10;/* Loading spinner improvements */&#10;.loading-spinner {&#10;  animation: spin 1s linear infinite;&#10;}&#10;&#10;/* Form input focus effects */&#10;.input-focus {&#10;  transition: all 0.2s ease-out;&#10;}&#10;&#10;.input-focus:focus {&#10;  ring: 2px solid rgb(99 102 241 / 0.5);&#10;  border-color: rgb(99 102 241);&#10;  box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);&#10;}&#10;&#10;/* Vietnamese text improvements */&#10;.vietnamese-text {&#10;  font-family: 'Inter', 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif;&#10;  line-height: 1.6;&#10;  letter-spacing: 0.01em;&#10;}&#10;&#10;/* Toast notification styles */&#10;.toast-success {&#10;  background-color: rgb(240 253 244);&#10;  color: rgb(22 101 52);&#10;  border-color: rgb(187 247 208);&#10;}&#10;&#10;.toast-error {&#10;  background-color: rgb(254 242 242);&#10;  color: rgb(153 27 27);&#10;  border-color: rgb(254 202 202);&#10;}&#10;&#10;.toast-warning {&#10;  background-color: rgb(255 251 235);&#10;  color: rgb(146 64 14);&#10;  border-color: rgb(254 215 170);&#10;}&#10;&#10;.toast-info {&#10;  background-color: rgb(239 246 255);&#10;  color: rgb(30 58 138);&#10;  border-color: rgb(191 219 254);&#10;}&#10;&#10;/* Mobile responsive improvements */&#10;@media (max-width: 768px) {&#10;  .mobile-padding {&#10;    padding: 0.5rem 0.75rem;&#10;  }&#10;  &#10;  .mobile-text {&#10;    font-size: 0.875rem;&#10;  }&#10;}&#10;&#10;/* Gradient backgrounds */&#10;.gradient-primary {&#10;  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);&#10;}&#10;&#10;.gradient-secondary {&#10;  background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);&#10;}&#10;&#10;.gradient-success {&#10;  background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);&#10;}&#10;&#10;/* Improved shadows */&#10;.shadow-soft {&#10;  box-shadow: 0 2px 15px -3px rgba(0, 0, 0, 0.07), 0 10px 20px -2px rgba(0, 0, 0, 0.04);&#10;}&#10;&#10;.shadow-medium {&#10;  box-shadow: 0 4px 20px -2px rgba(0, 0, 0, 0.1), 0 8px 25px -5px rgba(0, 0, 0, 0.1);&#10;}&#10;&#10;/* Backdrop blur for better UI */&#10;.backdrop-blur-custom {&#10;  backdrop-filter: blur(10px);&#10;  -webkit-backdrop-filter: blur(10px);&#10;}&#10;&#10;/* Improved scrollbar */&#10;.custom-scrollbar {&#10;  scrollbar-width: thin;&#10;  scrollbar-color: rgb(203 213 224) rgb(247 250 252);&#10;}&#10;&#10;.custom-scrollbar::-webkit-scrollbar {&#10;  width: 6px;&#10;}&#10;&#10;.custom-scrollbar::-webkit-scrollbar-track {&#10;  background: rgb(247 250 252);&#10;  border-radius: 10px;&#10;}&#10;&#10;.custom-scrollbar::-webkit-scrollbar-thumb {&#10;  background: rgb(203 213 224);&#10;  border-radius: 10px;&#10;}&#10;&#10;.custom-scrollbar::-webkit-scrollbar-thumb:hover {&#10;  background: rgb(160 174 192);&#10;}&#10;&#10;/* Vietnamese typography utilities */&#10;.text-vietnamese {&#10;  font-family: 'Inter', 'Segoe UI', 'Roboto', 'Helvetica Neue', Arial, sans-serif;&#10;  line-height: 1.6;&#10;  letter-spacing: 0.01em;&#10;}&#10;&#10;.text-balance {&#10;  text-wrap: balance;&#10;}&#10;&#10;.line-clamp-2 {&#10;  display: -webkit-box;&#10;  -webkit-line-clamp: 2;&#10;  -webkit-box-orient: vertical;&#10;  overflow: hidden;&#10;}&#10;&#10;.line-clamp-3 {&#10;  display: -webkit-box;&#10;  -webkit-line-clamp: 3;&#10;  -webkit-box-orient: vertical;&#10;  overflow: hidden;&#10;}&#10;&#10;/* Interaction utilities */&#10;.cursor-pointer {&#10;  cursor: pointer;&#10;}&#10;&#10;.select-none {&#10;  user-select: none;&#10;}&#10;&#10;.touch-manipulation {&#10;  touch-action: manipulation;&#10;}&#10;&#10;/* Keyframe animations */&#10;@keyframes fadeIn {&#10;  from {&#10;    opacity: 0;&#10;    transform: translateY(-10px);&#10;  }&#10;  to {&#10;    opacity: 1;&#10;    transform: translateY(0);&#10;  }&#10;}&#10;&#10;@keyframes slideUp {&#10;  from {&#10;    opacity: 0;&#10;    transform: translateY(20px);&#10;  }&#10;  to {&#10;    opacity: 1;&#10;    transform: translateY(0);&#10;  }&#10;}&#10;&#10;@keyframes bounceGentle {&#10;  0%, 20%, 50%, 80%, 100% {&#10;    transform: translateY(0);&#10;  }&#10;  40% {&#10;    transform: translateY(-5px);&#10;  }&#10;  60% {&#10;    transform: translateY(-3px);&#10;  }&#10;}&#10;&#10;@keyframes scaleIn {&#10;  from {&#10;    opacity: 0;&#10;    transform: scale(0.9);&#10;  }&#10;  to {&#10;    opacity: 1;&#10;    transform: scale(1);&#10;  }&#10;}&#10;&#10;@keyframes spin {&#10;  from {&#10;    transform: rotate(0deg);&#10;  }&#10;  to {&#10;    transform: rotate(360deg);&#10;  }&#10;}&#10;&#10;@keyframes pulse {&#10;  0%, 100% {&#10;    opacity: 1;&#10;  }&#10;  50% {&#10;    opacity: 0.7;&#10;  }&#10;}&#10;&#10;/* Vietnamese-specific font loading */&#10;@font-face {&#10;  font-family: 'Inter Vietnamese';&#10;  src: url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&amp;display=swap');&#10;  font-display: swap;&#10;  unicode-range: U+0102-0103, U+0110-0111, U+0128-0129, U+0168-0169, U+01A0-01A1, U+01AF-01B0, U+1EA0-1EF9;&#10;}&#10;&#10;/* Improved focus styles for accessibility */&#10;*:focus-visible {&#10;  outline: 2px solid #667eea;&#10;  outline-offset: 2px;&#10;  border-radius: 4px;&#10;}&#10;&#10;/* Dark mode support (if needed in future) */&#10;@media (prefers-color-scheme: dark) {&#10;  :root {&#10;    --background: rgb(3.9% 3.9% 3.9%);&#10;    --foreground: rgb(98% 98% 98%);&#10;  }&#10;}&#10;&#10;/* Print styles for better document printing */&#10;@media print {&#10;  .no-print {&#10;    display: none !important;&#10;  }&#10;  &#10;  .print-friendly {&#10;    color: black !important;&#10;    background: white !important;&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/app/posts/page.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/app/posts/page.tsx" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React, { useState, useEffect } from 'react';&#10;import { Post, PaginatedResponse } from '@/types';&#10;import { postService } from '@/services/postService';&#10;import { CreatePost } from '@/components/post/CreatePost';&#10;import { PostCard } from '@/components/post/PostCard';&#10;import { LoadingSpinner } from '@/components/ui/LoadingSpinner';&#10;import { ErrorAlert } from '@/components/ui/ErrorAlert';&#10;import { Button } from '@/components/ui/Button';&#10;import { Plus, RefreshCw } from 'lucide-react';&#10;&#10;export default function PostsPage() {&#10;  const [posts, setPosts] = useState&lt;Post[]&gt;([]);&#10;  const [isLoading, setIsLoading] = useState(true);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [showCreatePost, setShowCreatePost] = useState(false);&#10;&#10;  const loadPosts = async () =&gt; {&#10;    try {&#10;      setIsLoading(true);&#10;      setError(null);&#10;      const response: PaginatedResponse&lt;Post&gt; = await postService.getPosts();&#10;      setPosts(response.content);&#10;    } catch (err: any) {&#10;      console.error('Failed to load posts:', err);&#10;      setError(err.response?.data?.message || err.message || 'Failed to load posts');&#10;    } finally {&#10;      setIsLoading(false);&#10;    }&#10;  };&#10;&#10;  useEffect(() =&gt; {&#10;    loadPosts();&#10;  }, []);&#10;&#10;  const handlePostCreated = (newPost: Post) =&gt; {&#10;    setPosts(prev =&gt; [newPost, ...prev]);&#10;    setShowCreatePost(false);&#10;  };&#10;&#10;  const handlePostUpdate = (updatedPost: Post) =&gt; {&#10;    setPosts(prev =&gt; prev.map(post =&gt; &#10;      post.id === updatedPost.id ? updatedPost : post&#10;    ));&#10;  };&#10;&#10;  const handlePostDelete = (postId: string) =&gt; {&#10;    setPosts(prev =&gt; prev.filter(post =&gt; post.id !== postId));&#10;  };&#10;&#10;  if (isLoading) {&#10;    return (&#10;      &lt;div className=&quot;min-h-screen bg-gray-50 flex items-center justify-center&quot;&gt;&#10;        &lt;LoadingSpinner size=&quot;lg&quot; /&gt;&#10;      &lt;/div&gt;&#10;    );&#10;  }&#10;&#10;  return (&#10;    &lt;div className=&quot;min-h-screen bg-gray-50&quot;&gt;&#10;      &lt;div className=&quot;max-w-2xl mx-auto py-8 px-4&quot;&gt;&#10;        {/* Header */}&#10;        &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;          &lt;h1 className=&quot;text-2xl font-bold text-gray-900&quot;&gt;Posts&lt;/h1&gt;&#10;          &lt;div className=&quot;flex gap-2&quot;&gt;&#10;            &lt;Button&#10;              variant=&quot;secondary&quot;&#10;              onClick={loadPosts}&#10;              disabled={isLoading}&#10;              className=&quot;flex items-center gap-2&quot;&#10;            &gt;&#10;              &lt;RefreshCw className={`w-4 h-4 ${isLoading ? 'animate-spin' : ''}`} /&gt;&#10;              Refresh&#10;            &lt;/Button&gt;&#10;            &lt;Button&#10;              onClick={() =&gt; setShowCreatePost(true)}&#10;              className=&quot;flex items-center gap-2&quot;&#10;            &gt;&#10;              &lt;Plus className=&quot;w-4 h-4&quot; /&gt;&#10;              Create Post&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Create Post Form */}&#10;        {showCreatePost &amp;&amp; (&#10;          &lt;div className=&quot;mb-6&quot;&gt;&#10;            &lt;CreatePost&#10;              onPostCreated={handlePostCreated}&#10;              onCancel={() =&gt; setShowCreatePost(false)}&#10;            /&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Error Display */}&#10;        {error &amp;&amp; (&#10;          &lt;div className=&quot;mb-6&quot;&gt;&#10;            &lt;ErrorAlert message={error} /&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Posts List */}&#10;        {posts.length === 0 ? (&#10;          &lt;div className=&quot;text-center py-12&quot;&gt;&#10;            &lt;div className=&quot;text-gray-400 mb-4&quot;&gt;&#10;              &lt;Plus className=&quot;w-16 h-16 mx-auto&quot; /&gt;&#10;            &lt;/div&gt;&#10;            &lt;h3 className=&quot;text-lg font-medium text-gray-900 mb-2&quot;&gt;No posts yet&lt;/h3&gt;&#10;            &lt;p className=&quot;text-gray-500 mb-4&quot;&gt;Be the first to create a post!&lt;/p&gt;&#10;            &lt;Button onClick={() =&gt; setShowCreatePost(true)}&gt;&#10;              Create First Post&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        ) : (&#10;          &lt;div className=&quot;space-y-6&quot;&gt;&#10;            {posts.map((post) =&gt; (&#10;              &lt;PostCard&#10;                key={post.id}&#10;                post={post}&#10;                onPostUpdate={handlePostUpdate}&#10;                onPostDelete={handlePostDelete}&#10;              /&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/components/layout/Layout.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/components/layout/Layout.tsx" />
              <option name="originalContent" value="import React, { ReactNode } from 'react';&#10;import { useAuth } from '@/contexts/AuthContext';&#10;import { useChatHooks } from '@/hooks/useChatHooks';&#10;import Link from 'next/link';&#10;import { usePathname } from 'next/navigation';&#10;import { useRouter } from 'next/navigation';&#10;import Avatar from '@/components/ui/Avatar';&#10;import { t } from '@/utils/localization';&#10;import {&#10;  HomeIcon,&#10;  UserIcon,&#10;  ChatBubbleLeftRightIcon,&#10;  MagnifyingGlassIcon,&#10;  BellIcon,&#10;  Cog6ToothIcon,&#10;  ArrowRightOnRectangleIcon&#10;} from '@heroicons/react/24/outline';&#10;import {&#10;  HomeIcon as HomeIconSolid,&#10;  UserIcon as UserIconSolid,&#10;  ChatBubbleLeftRightIcon as ChatIconSolid,&#10;  MagnifyingGlassIcon as SearchIconSolid,&#10;  BellIcon as BellIconSolid&#10;} from '@heroicons/react/24/solid';&#10;&#10;interface LayoutProps {&#10;  children: ReactNode;&#10;}&#10;&#10;const Layout: React.FC&lt;LayoutProps&gt; = ({ children }) =&gt; {&#10;  const { user, logout } = useAuth();&#10;  const router = useRouter();&#10;  const { useUnreadCount } = useChatHooks();&#10;  const { data: unreadCount } = useUnreadCount();&#10;&#10;  const navigation = [&#10;    {&#10;      name: 'Trang chủ',&#10;      href: '/',&#10;      icon: HomeIcon,&#10;      iconSolid: HomeIconSolid&#10;    },&#10;    {&#10;      name: 'Tìm kiếm',&#10;      href: '/search',&#10;      icon: MagnifyingGlassIcon,&#10;      iconSolid: SearchIconSolid&#10;    },&#10;    {&#10;      name: 'Tin nhắn',&#10;      href: '/messages',&#10;      icon: ChatBubbleLeftRightIcon,&#10;      iconSolid: ChatIconSolid,&#10;      badge: unreadCount&#10;    },&#10;    {&#10;      name: 'Thông báo',&#10;      href: '/notifications',&#10;      icon: BellIcon,&#10;      iconSolid: BellIconSolid&#10;    },&#10;    {&#10;      name: 'Hồ sơ',&#10;      href: `/profile/me`,&#10;      icon: UserIcon,&#10;      iconSolid: UserIconSolid&#10;    },&#10;  ];&#10;&#10;  const pathname = usePathname();&#10;&#10;  const isActive = (href: string) =&gt; {&#10;    if (href === '/') {&#10;      return pathname === '/';&#10;    }&#10;    return pathname.startsWith(href);&#10;  };&#10;&#10;  const handleLogout = async () =&gt; {&#10;    try {&#10;      await logout();&#10;      router.push('/login');&#10;    } catch (error) {&#10;      console.error('Lỗi đăng xuất:', error);&#10;    }&#10;  };&#10;&#10;  return (&#10;      &lt;div className=&quot;flex flex-col min-h-screen bg-gray-50&quot;&gt;&#10;        {/* Header: thanh bar nằm trên cùng */}&#10;        &lt;header className=&quot;bg-white shadow-sm border-b sticky top-0 z-50 backdrop-blur-sm bg-white/95&quot;&gt;&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;            &lt;div className=&quot;flex justify-between items-center h-16&quot;&gt;&#10;              {/* Logo */}&#10;              &lt;Link href=&quot;/&quot; className=&quot;flex items-center space-x-2 hover:opacity-80 transition-opacity&quot;&gt;&#10;                &lt;div className=&quot;w-8 h-8 bg-gradient-to-br from-indigo-600 to-purple-600 rounded-lg flex items-center justify-center shadow-sm&quot;&gt;&#10;                  &lt;span className=&quot;text-white font-bold text-sm&quot;&gt;CTU&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;span className=&quot;text-xl font-bold text-gray-900&quot;&gt;Connect&lt;/span&gt;&#10;              &lt;/Link&gt;&#10;&#10;              {/* Navigation */}&#10;              &lt;nav className=&quot;hidden md:flex space-x-1&quot;&gt;&#10;                {navigation.map((item) =&gt; {&#10;                  const IconComponent = isActive(item.href) ? item.iconSolid : item.icon;&#10;                  return (&#10;                    &lt;Link&#10;                      key={item.name}&#10;                      href={item.href}&#10;                      className={`relative flex items-center px-4 py-2 rounded-xl text-sm font-medium transition-all duration-200 ${&#10;                        isActive(item.href)&#10;                          ? 'bg-indigo-50 text-indigo-600 shadow-sm'&#10;                          : 'text-gray-600 hover:text-indigo-600 hover:bg-gray-50'&#10;                      }`}&#10;                    &gt;&#10;                      &lt;IconComponent className=&quot;h-5 w-5 mr-2&quot; /&gt;&#10;                      &lt;span&gt;{item.name}&lt;/span&gt;&#10;                      {item.badge &amp;&amp; item.badge &gt; 0 &amp;&amp; (&#10;                        &lt;span className=&quot;absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center font-medium animate-pulse&quot;&gt;&#10;                          {item.badge &gt; 99 ? '99+' : item.badge}&#10;                        &lt;/span&gt;&#10;                      )}&#10;                    &lt;/Link&gt;&#10;                  );&#10;                })}&#10;              &lt;/nav&gt;&#10;&#10;              {/* User Menu */}&#10;              &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                {/* Settings */}&#10;                &lt;button className=&quot;p-2 text-gray-600 hover:text-indigo-600 hover:bg-gray-50 rounded-lg transition-all duration-200&quot;&gt;&#10;                  &lt;Cog6ToothIcon className=&quot;h-5 w-5&quot; /&gt;&#10;                &lt;/button&gt;&#10;&#10;                {/* User Avatar &amp; Info */}&#10;                &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                  &lt;div className=&quot;hidden sm:block text-right&quot;&gt;&#10;                    &lt;div className=&quot;text-sm font-medium text-gray-900&quot;&gt;&#10;                      {user?.fullName || user?.username || 'Người dùng'}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-xs text-gray-500&quot;&gt;&#10;                      {user?.email || 'Email không xác định'}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;Avatar&#10;                      src={user?.avatarUrl}&#10;                      alt={user?.fullName || user?.username || 'Avatar'}&#10;                      size=&quot;md&quot;&#10;                      className=&quot;ring-2 ring-white shadow-sm hover:ring-indigo-200 transition-all duration-200 cursor-pointer&quot;&#10;                    /&gt;&#10;                    &lt;div className=&quot;absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 border-2 border-white rounded-full&quot;&gt;&lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Logout */}&#10;                &lt;button&#10;                  onClick={handleLogout}&#10;                  className=&quot;flex items-center px-3 py-2 text-sm font-medium text-gray-600 hover:text-red-600 hover:bg-red-50 rounded-lg transition-all duration-200&quot;&#10;                  title=&quot;Đăng xuất&quot;&#10;                &gt;&#10;                  &lt;ArrowRightOnRectangleIcon className=&quot;h-5 w-5 mr-1&quot; /&gt;&#10;                  &lt;span className=&quot;hidden sm:inline&quot;&gt;{t('auth.logout')}&lt;/span&gt;&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/header&gt;&#10;&#10;        {/* Mobile Navigation */}&#10;        &lt;div className=&quot;md:hidden bg-white border-t border-gray-200 fixed bottom-0 left-0 right-0 z-50 shadow-lg&quot;&gt;&#10;          &lt;div className=&quot;flex justify-around py-2&quot;&gt;&#10;            {navigation.map((item) =&gt; {&#10;              const IconComponent = isActive(item.href) ? item.iconSolid : item.icon;&#10;              return (&#10;                &lt;Link&#10;                  key={item.name}&#10;                  href={item.href}&#10;                  className={`relative flex flex-col items-center px-3 py-2 rounded-lg transition-all duration-200 ${&#10;                    isActive(item.href)&#10;                      ? 'text-indigo-600'&#10;                      : 'text-gray-600 hover:text-indigo-600'&#10;                  }`}&#10;                &gt;&#10;                  &lt;IconComponent className=&quot;h-6 w-6&quot; /&gt;&#10;                  &lt;span className=&quot;text-xs mt-1 font-medium&quot;&gt;{item.name}&lt;/span&gt;&#10;                  {item.badge &amp;&amp; item.badge &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-4 w-4 flex items-center justify-center font-medium animate-pulse&quot;&gt;&#10;                      {item.badge &gt; 9 ? '9+' : item.badge}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/Link&gt;&#10;              );&#10;            })}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Main Content */}&#10;        &lt;main className=&quot;flex-1 max-w-7xl w-full mx-auto px-4 sm:px-6 lg:px-8 py-6 pb-20 md:pb-6&quot;&gt;&#10;          &lt;div className=&quot;min-h-full&quot;&gt;&#10;            {children}&#10;          &lt;/div&gt;&#10;        &lt;/main&gt;&#10;&#10;        {/* Footer */}&#10;        &lt;footer className=&quot;bg-white border-t border-gray-200 py-8 mt-auto&quot;&gt;&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;            &lt;div className=&quot;flex flex-col md:flex-row justify-between items-center&quot;&gt;&#10;              &lt;div className=&quot;flex items-center space-x-2 mb-4 md:mb-0&quot;&gt;&#10;                &lt;div className=&quot;w-6 h-6 bg-gradient-to-br from-indigo-600 to-purple-600 rounded flex items-center justify-center&quot;&gt;&#10;                  &lt;span className=&quot;text-white font-bold text-xs&quot;&gt;CTU&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;span className=&quot;text-gray-900 font-medium&quot;&gt;CTU Connect&lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;text-sm text-gray-500 text-center md:text-right&quot;&gt;&#10;                &lt;p&gt;&amp;copy; 2025 Đại học Cần Thơ. Phát triển bởi sinh viên CTU.&lt;/p&gt;&#10;                &lt;p className=&quot;mt-1&quot;&gt;Kết nối - Chia sẻ - Phát triển&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/footer&gt;&#10;      &lt;/div&gt;&#10;&#10;  );&#10;};&#10;&#10;export default Layout;&#10;" />
              <option name="updatedContent" value="import React, { ReactNode } from 'react';&#10;import { useAuth } from '@/contexts/AuthContext';&#10;import { useChatHooks } from '@/hooks/useChatHooks';&#10;import Link from 'next/link';&#10;import { usePathname } from 'next/navigation';&#10;import { useRouter } from 'next/navigation';&#10;import Avatar from '@/components/ui/Avatar';&#10;import LeftSidebar from './LeftSidebar';&#10;import RightSidebar from './RightSidebar';&#10;import { t } from '@/utils/localization';&#10;import {&#10;  HomeIcon,&#10;  UserIcon,&#10;  ChatBubbleLeftRightIcon,&#10;  MagnifyingGlassIcon,&#10;  BellIcon,&#10;  Cog6ToothIcon,&#10;  ArrowRightOnRectangleIcon&#10;} from '@heroicons/react/24/outline';&#10;import {&#10;  HomeIcon as HomeIconSolid,&#10;  UserIcon as UserIconSolid,&#10;  ChatBubbleLeftRightIcon as ChatIconSolid,&#10;  MagnifyingGlassIcon as SearchIconSolid,&#10;  BellIcon as BellIconSolid&#10;} from '@heroicons/react/24/solid';&#10;&#10;interface LayoutProps {&#10;  children: ReactNode;&#10;}&#10;&#10;const Layout: React.FC&lt;LayoutProps&gt; = ({ children }) =&gt; {&#10;  const { user, logout } = useAuth();&#10;  const router = useRouter();&#10;  const { useUnreadCount } = useChatHooks();&#10;  const { data: unreadCount } = useUnreadCount();&#10;&#10;  const navigation = [&#10;    {&#10;      name: 'Trang chủ',&#10;      href: '/',&#10;      icon: HomeIcon,&#10;      iconSolid: HomeIconSolid&#10;    },&#10;    {&#10;      name: 'Tìm kiếm',&#10;      href: '/search',&#10;      icon: MagnifyingGlassIcon,&#10;      iconSolid: SearchIconSolid&#10;    },&#10;    {&#10;      name: 'Tin nhắn',&#10;      href: '/messages',&#10;      icon: ChatBubbleLeftRightIcon,&#10;      iconSolid: ChatIconSolid,&#10;      badge: unreadCount&#10;    },&#10;    {&#10;      name: 'Thông báo',&#10;      href: '/notifications',&#10;      icon: BellIcon,&#10;      iconSolid: BellIconSolid&#10;    },&#10;    {&#10;      name: 'Hồ sơ',&#10;      href: `/profile/me`,&#10;      icon: UserIcon,&#10;      iconSolid: UserIconSolid&#10;    },&#10;  ];&#10;&#10;  const pathname = usePathname();&#10;&#10;  const isActive = (href: string) =&gt; {&#10;    if (href === '/') {&#10;      return pathname === '/';&#10;    }&#10;    return pathname.startsWith(href);&#10;  };&#10;&#10;  const handleLogout = async () =&gt; {&#10;    try {&#10;      await logout();&#10;      router.push('/login');&#10;    } catch (error) {&#10;      console.error('Lỗi đăng xuất:', error);&#10;    }&#10;  };&#10;&#10;  return (&#10;      &lt;div className=&quot;flex flex-col min-h-screen bg-gray-50&quot;&gt;&#10;        {/* Header: thanh bar nằm trên cùng */}&#10;        &lt;header className=&quot;bg-white shadow-sm border-b sticky top-0 z-50 backdrop-blur-sm bg-white/95&quot;&gt;&#10;          &lt;div className=&quot;max-w-full mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;            &lt;div className=&quot;flex justify-between items-center h-16&quot;&gt;&#10;              {/* Logo */}&#10;              &lt;Link href=&quot;/&quot; className=&quot;flex items-center space-x-2 hover:opacity-80 transition-opacity&quot;&gt;&#10;                &lt;div className=&quot;w-8 h-8 bg-gradient-to-br from-indigo-600 to-purple-600 rounded-lg flex items-center justify-center shadow-sm&quot;&gt;&#10;                  &lt;span className=&quot;text-white font-bold text-sm&quot;&gt;CTU&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;span className=&quot;text-xl font-bold text-gray-900&quot;&gt;Connect&lt;/span&gt;&#10;              &lt;/Link&gt;&#10;&#10;              {/* Navigation - Chỉ hiển thị trên desktop vì đã có sidebar */}&#10;              &lt;nav className=&quot;hidden xl:flex space-x-1&quot;&gt;&#10;                {navigation.slice(0, 3).map((item) =&gt; {&#10;                  const IconComponent = isActive(item.href) ? item.iconSolid : item.icon;&#10;                  return (&#10;                    &lt;Link&#10;                      key={item.name}&#10;                      href={item.href}&#10;                      className={`relative flex items-center px-4 py-2 rounded-xl text-sm font-medium transition-all duration-200 ${&#10;                        isActive(item.href)&#10;                          ? 'bg-indigo-50 text-indigo-600 shadow-sm'&#10;                          : 'text-gray-600 hover:text-indigo-600 hover:bg-gray-50'&#10;                      }`}&#10;                    &gt;&#10;                      &lt;IconComponent className=&quot;h-5 w-5 mr-2&quot; /&gt;&#10;                      &lt;span&gt;{item.name}&lt;/span&gt;&#10;                      {item.badge &amp;&amp; item.badge &gt; 0 &amp;&amp; (&#10;                        &lt;span className=&quot;absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-5 w-5 flex items-center justify-center font-medium animate-pulse&quot;&gt;&#10;                          {item.badge &gt; 99 ? '99+' : item.badge}&#10;                        &lt;/span&gt;&#10;                      )}&#10;                    &lt;/Link&gt;&#10;                  );&#10;                })}&#10;              &lt;/nav&gt;&#10;&#10;              {/* User Menu */}&#10;              &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;                &lt;div className=&quot;hidden xl:flex items-center space-x-2&quot;&gt;&#10;                  {/* Notifications */}&#10;                  &lt;button className=&quot;relative p-2 text-gray-600 hover:text-indigo-600 hover:bg-gray-50 rounded-lg transition-all duration-200&quot;&gt;&#10;                    &lt;BellIcon className=&quot;h-5 w-5&quot; /&gt;&#10;                    &lt;span className=&quot;absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-4 w-4 flex items-center justify-center&quot;&gt;3&lt;/span&gt;&#10;                  &lt;/button&gt;&#10;&#10;                  {/* Settings */}&#10;                  &lt;button className=&quot;p-2 text-gray-600 hover:text-indigo-600 hover:bg-gray-50 rounded-lg transition-all duration-200&quot;&gt;&#10;                    &lt;Cog6ToothIcon className=&quot;h-5 w-5&quot; /&gt;&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* User Avatar &amp; Info */}&#10;                &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;                  &lt;div className=&quot;hidden sm:block text-right&quot;&gt;&#10;                    &lt;div className=&quot;text-sm font-medium text-gray-900 vietnamese-text&quot;&gt;&#10;                      {user?.fullName || user?.name || 'Người dùng'}&#10;                    &lt;/div&gt;&#10;                    &lt;div className=&quot;text-xs text-gray-500&quot;&gt;&#10;                      {user?.email || 'Email không xác định'}&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;relative&quot;&gt;&#10;                    &lt;Avatar&#10;                      src={user?.avatarUrl}&#10;                      alt={user?.fullName || user?.username || 'Avatar'}&#10;                      size=&quot;md&quot;&#10;                      className=&quot;ring-2 ring-white shadow-sm hover:ring-indigo-200 transition-all duration-200 cursor-pointer&quot;&#10;                    /&gt;&#10;                    &lt;div className=&quot;absolute -bottom-1 -right-1 w-3 h-3 bg-green-500 border-2 border-white rounded-full&quot;&gt;&lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;&#10;                {/* Logout */}&#10;                &lt;button&#10;                  onClick={handleLogout}&#10;                  className=&quot;flex items-center px-3 py-2 text-sm font-medium text-gray-600 hover:text-red-600 hover:bg-red-50 rounded-lg transition-all duration-200&quot;&#10;                  title=&quot;Đăng xuất&quot;&#10;                &gt;&#10;                  &lt;ArrowRightOnRectangleIcon className=&quot;h-5 w-5 mr-1&quot; /&gt;&#10;                  &lt;span className=&quot;hidden sm:inline&quot;&gt;{t('auth.logout')}&lt;/span&gt;&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/header&gt;&#10;&#10;        {/* Main Layout với Sidebars */}&#10;        &lt;div className=&quot;flex flex-1&quot;&gt;&#10;          {/* Left Sidebar */}&#10;          &lt;LeftSidebar /&gt;&#10;&#10;          {/* Main Content */}&#10;          &lt;main className=&quot;flex-1 min-w-0 max-w-2xl mx-auto px-4 py-6&quot;&gt;&#10;            &lt;div className=&quot;min-h-full&quot;&gt;&#10;              {children}&#10;            &lt;/div&gt;&#10;          &lt;/main&gt;&#10;&#10;          {/* Right Sidebar */}&#10;          &lt;RightSidebar /&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Mobile Navigation */}&#10;        &lt;div className=&quot;lg:hidden bg-white border-t border-gray-200 fixed bottom-0 left-0 right-0 z-50 shadow-lg backdrop-blur-sm bg-white/95&quot;&gt;&#10;          &lt;div className=&quot;flex justify-around py-2&quot;&gt;&#10;            {navigation.map((item) =&gt; {&#10;              const IconComponent = isActive(item.href) ? item.iconSolid : item.icon;&#10;              return (&#10;                &lt;Link&#10;                  key={item.name}&#10;                  href={item.href}&#10;                  className={`relative flex flex-col items-center px-3 py-2 rounded-lg transition-all duration-200 ${&#10;                    isActive(item.href)&#10;                      ? 'text-indigo-600'&#10;                      : 'text-gray-600 hover:text-indigo-600'&#10;                  }`}&#10;                &gt;&#10;                  &lt;IconComponent className=&quot;h-6 w-6&quot; /&gt;&#10;                  &lt;span className=&quot;text-xs mt-1 font-medium vietnamese-text&quot;&gt;{item.name}&lt;/span&gt;&#10;                  {item.badge &amp;&amp; item.badge &gt; 0 &amp;&amp; (&#10;                    &lt;span className=&quot;absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full h-4 w-4 flex items-center justify-center font-medium animate-pulse&quot;&gt;&#10;                      {item.badge &gt; 9 ? '9+' : item.badge}&#10;                    &lt;/span&gt;&#10;                  )}&#10;                &lt;/Link&gt;&#10;              );&#10;            })}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Footer - Chỉ hiển thị khi không có sidebar */}&#10;        &lt;footer className=&quot;lg:hidden bg-white border-t border-gray-200 py-8 mt-auto&quot;&gt;&#10;          &lt;div className=&quot;max-w-7xl mx-auto px-4 sm:px-6 lg:px-8&quot;&gt;&#10;            &lt;div className=&quot;flex flex-col md:flex-row justify-between items-center&quot;&gt;&#10;              &lt;div className=&quot;flex items-center space-x-2 mb-4 md:mb-0&quot;&gt;&#10;                &lt;div className=&quot;w-6 h-6 bg-gradient-to-br from-indigo-600 to-purple-600 rounded flex items-center justify-center&quot;&gt;&#10;                  &lt;span className=&quot;text-white font-bold text-xs&quot;&gt;CTU&lt;/span&gt;&#10;                &lt;/div&gt;&#10;                &lt;span className=&quot;text-gray-900 font-medium&quot;&gt;CTU Connect&lt;/span&gt;&#10;              &lt;/div&gt;&#10;              &lt;div className=&quot;text-sm text-gray-500 text-center md:text-right&quot;&gt;&#10;                &lt;p&gt;&amp;copy; 2025 Đại học Cần Thơ. Phát triển bởi sinh viên CTU.&lt;/p&gt;&#10;                &lt;p className=&quot;mt-1&quot;&gt;Kết nối - Chia sẻ - Phát triển&lt;/p&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/footer&gt;&#10;      &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default Layout;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/components/layout/LeftSidebar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/components/layout/LeftSidebar.tsx" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React from 'react';&#10;import Link from 'next/link';&#10;import { useAuth } from '@/contexts/AuthContext';&#10;import { &#10;  HomeIcon, &#10;  UserIcon, &#10;  UserGroupIcon,&#10;  BookmarkIcon,&#10;  CalendarIcon,&#10;  ClockIcon,&#10;  TagIcon,&#10;  AcademicCapIcon,&#10;  BuildingLibraryIcon,&#10;  ChevronRightIcon&#10;} from '@heroicons/react/24/outline';&#10;&#10;const LeftSidebar: React.FC = () =&gt; {&#10;  const { user } = useAuth();&#10;&#10;  const menuItems = [&#10;    {&#10;      name: 'Trang cá nhân',&#10;      href: '/profile/me',&#10;      icon: UserIcon,&#10;      color: 'text-blue-600'&#10;    },&#10;    {&#10;      name: 'Bạn bè',&#10;      href: '/friends',&#10;      icon: UserGroupIcon,&#10;      color: 'text-green-600'&#10;    },&#10;    {&#10;      name: 'Đã lưu',&#10;      href: '/saved',&#10;      icon: BookmarkIcon,&#10;      color: 'text-purple-600'&#10;    },&#10;    {&#10;      name: 'Sự kiện',&#10;      href: '/events',&#10;      icon: CalendarIcon,&#10;      color: 'text-red-600'&#10;    },&#10;    {&#10;      name: 'Kỷ niệm',&#10;      href: '/memories',&#10;      icon: ClockIcon,&#10;      color: 'text-yellow-600'&#10;    },&#10;    {&#10;      name: 'CTU Groups',&#10;      href: '/groups',&#10;      icon: AcademicCapIcon,&#10;      color: 'text-indigo-600'&#10;    },&#10;    {&#10;      name: 'Thư viện',&#10;      href: '/library',&#10;      icon: BuildingLibraryIcon,&#10;      color: 'text-gray-600'&#10;    }&#10;  ];&#10;&#10;  const shortcuts = [&#10;    { name: 'Nhóm Công nghệ thông tin', href: '/groups/cntt', avatar: '' },&#10;    { name: 'Sinh viên K47', href: '/groups/k47', avatar: '' },&#10;    { name: 'CLB Lập trình CTU', href: '/groups/programming', avatar: '⚡' },&#10;    { name: 'Học bổng &amp; Tuyển dụng', href: '/groups/scholarship', avatar: '' }&#10;  ];&#10;&#10;  return (&#10;    &lt;div className=&quot;hidden lg:block w-80 h-screen sticky top-16 overflow-y-auto custom-scrollbar bg-white&quot;&gt;&#10;      &lt;div className=&quot;p-4 space-y-6&quot;&gt;&#10;        {/* User Profile Section */}&#10;        &lt;div className=&quot;flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-50 transition-colors cursor-pointer&quot;&gt;&#10;          &lt;div className=&quot;w-10 h-10 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold&quot;&gt;&#10;            {user?.fullName?.charAt(0) || user?.name?.charAt(0) || 'U'}&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex-1&quot;&gt;&#10;            &lt;p className=&quot;font-medium text-gray-900 vietnamese-text&quot;&gt;&#10;              {user?.fullName || user?.name || 'Người dùng'}&#10;            &lt;/p&gt;&#10;            &lt;p className=&quot;text-sm text-gray-500&quot;&gt;Xem trang cá nhân&lt;/p&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        &lt;hr className=&quot;border-gray-200&quot; /&gt;&#10;&#10;        {/* Main Menu */}&#10;        &lt;div className=&quot;space-y-2&quot;&gt;&#10;          {menuItems.map((item) =&gt; {&#10;            const IconComponent = item.icon;&#10;            return (&#10;              &lt;Link&#10;                key={item.name}&#10;                href={item.href}&#10;                className=&quot;flex items-center space-x-3 p-3 rounded-lg hover:bg-gray-50 transition-colors group&quot;&#10;              &gt;&#10;                &lt;div className={`w-10 h-10 rounded-full bg-gray-100 flex items-center justify-center group-hover:bg-gray-200 transition-colors`}&gt;&#10;                  &lt;IconComponent className={`h-5 w-5 ${item.color}`} /&gt;&#10;                &lt;/div&gt;&#10;                &lt;span className=&quot;font-medium text-gray-700 vietnamese-text&quot;&gt;{item.name}&lt;/span&gt;&#10;              &lt;/Link&gt;&#10;            );&#10;          })}&#10;        &lt;/div&gt;&#10;&#10;        &lt;hr className=&quot;border-gray-200&quot; /&gt;&#10;&#10;        {/* Shortcuts */}&#10;        &lt;div&gt;&#10;          &lt;div className=&quot;flex items-center justify-between mb-3&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold text-gray-600 vietnamese-text&quot;&gt;Lối tắt của bạn&lt;/h3&gt;&#10;            &lt;button className=&quot;text-blue-600 hover:text-blue-700 text-sm font-medium&quot;&gt;&#10;              Chỉnh sửa&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            {shortcuts.map((shortcut) =&gt; (&#10;              &lt;Link&#10;                key={shortcut.name}&#10;                href={shortcut.href}&#10;                className=&quot;flex items-center space-x-3 p-2 rounded-lg hover:bg-gray-50 transition-colors&quot;&#10;              &gt;&#10;                &lt;div className=&quot;w-8 h-8 rounded-lg bg-gray-100 flex items-center justify-center text-lg&quot;&gt;&#10;                  {shortcut.avatar}&#10;                &lt;/div&gt;&#10;                &lt;span className=&quot;text-sm font-medium text-gray-700 vietnamese-text&quot;&gt;{shortcut.name}&lt;/span&gt;&#10;              &lt;/Link&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default LeftSidebar;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/components/layout/RightSidebar.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/components/layout/RightSidebar.tsx" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React from 'react';&#10;import { useAuth } from '@/contexts/AuthContext';&#10;import { &#10;  UserPlusIcon,&#10;  CalendarDaysIcon,&#10;  GiftIcon,&#10;  MegaphoneIcon,&#10;  AcademicCapIcon,&#10;  ChevronRightIcon&#10;} from '@heroicons/react/24/outline';&#10;&#10;const RightSidebar: React.FC = () =&gt; {&#10;  const { user } = useAuth();&#10;&#10;  const friendSuggestions = [&#10;    {&#10;      id: '1',&#10;      name: 'Nguyễn Văn Nam',&#10;      mutualFriends: 5,&#10;      avatar: '‍',&#10;      faculty: 'Công nghệ thông tin'&#10;    },&#10;    {&#10;      id: '2', &#10;      name: 'Trần Thị Lan',&#10;      mutualFriends: 3,&#10;      avatar: '‍',&#10;      faculty: 'Kinh tế'&#10;    },&#10;    {&#10;      id: '3',&#10;      name: 'Lê Hoàng Minh',&#10;      mutualFriends: 8,&#10;      avatar: '‍',&#10;      faculty: 'Công nghệ thông tin'&#10;    }&#10;  ];&#10;&#10;  const upcomingEvents = [&#10;    {&#10;      id: '1',&#10;      title: 'Hội thảo Khoa học Công nghệ',&#10;      date: '15 Th8',&#10;      time: '14:00',&#10;      location: 'Hội trường A'&#10;    },&#10;    {&#10;      id: '2',&#10;      title: 'Ngày hội Việc làm 2025',&#10;      date: '20 Th8',&#10;      time: '08:00',&#10;      location: 'Sân vận động CTU'&#10;    }&#10;  ];&#10;&#10;  const notifications = [&#10;    {&#10;      id: '1',&#10;      title: 'Thông báo học phí',&#10;      time: '2 giờ trước',&#10;      type: 'academic'&#10;    },&#10;    {&#10;      id: '2',&#10;      title: 'Lịch thi cuối kỳ',&#10;      time: '5 giờ trước', &#10;      type: 'exam'&#10;    },&#10;    {&#10;      id: '3',&#10;      title: 'Hoạt động sinh viên',&#10;      time: '1 ngày trước',&#10;      type: 'activity'&#10;    }&#10;  ];&#10;&#10;  const trending = [&#10;    { tag: '#CTUConnect', posts: 245 },&#10;    { tag: '#SinhVienCTU', posts: 189 },&#10;    { tag: '#HocTap', posts: 156 },&#10;    { tag: '#CongNghe', posts: 134 },&#10;    { tag: '#TuyenDung', posts: 98 }&#10;  ];&#10;&#10;  return (&#10;    &lt;div className=&quot;hidden xl:block w-80 h-screen sticky top-16 overflow-y-auto custom-scrollbar bg-white&quot;&gt;&#10;      &lt;div className=&quot;p-4 space-y-6&quot;&gt;&#10;        &#10;        {/* Friend Suggestions */}&#10;        &lt;div className=&quot;bg-white rounded-lg border border-gray-200 p-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold text-gray-900 vietnamese-text&quot;&gt;Gợi ý kết bạn&lt;/h3&gt;&#10;            &lt;button className=&quot;text-blue-600 hover:text-blue-700 text-sm font-medium&quot;&gt;&#10;              Xem tất cả&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;space-y-3&quot;&gt;&#10;            {friendSuggestions.map((friend) =&gt; (&#10;              &lt;div key={friend.id} className=&quot;flex items-center space-x-3&quot;&gt;&#10;                &lt;div className=&quot;w-12 h-12 rounded-full bg-gradient-to-br from-blue-400 to-purple-500 flex items-center justify-center text-xl&quot;&gt;&#10;                  {friend.avatar}&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex-1&quot;&gt;&#10;                  &lt;p className=&quot;font-medium text-gray-900 text-sm vietnamese-text&quot;&gt;{friend.name}&lt;/p&gt;&#10;                  &lt;p className=&quot;text-xs text-gray-500&quot;&gt;{friend.mutualFriends} bạn chung • {friend.faculty}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;button className=&quot;bg-blue-600 hover:bg-blue-700 text-white px-3 py-1 rounded-lg text-sm font-medium transition-colors&quot;&gt;&#10;                  Kết bạn&#10;                &lt;/button&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Upcoming Events */}&#10;        &lt;div className=&quot;bg-white rounded-lg border border-gray-200 p-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold text-gray-900 vietnamese-text flex items-center&quot;&gt;&#10;              &lt;CalendarDaysIcon className=&quot;h-5 w-5 mr-2 text-green-600&quot; /&gt;&#10;              Sự kiện sắp tới&#10;            &lt;/h3&gt;&#10;            &lt;ChevronRightIcon className=&quot;h-4 w-4 text-gray-400&quot; /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;space-y-3&quot;&gt;&#10;            {upcomingEvents.map((event) =&gt; (&#10;              &lt;div key={event.id} className=&quot;p-3 bg-green-50 rounded-lg hover:bg-green-100 transition-colors cursor-pointer&quot;&gt;&#10;                &lt;div className=&quot;flex justify-between items-start&quot;&gt;&#10;                  &lt;div className=&quot;flex-1&quot;&gt;&#10;                    &lt;p className=&quot;font-medium text-gray-900 text-sm vietnamese-text&quot;&gt;{event.title}&lt;/p&gt;&#10;                    &lt;p className=&quot;text-xs text-gray-600 mt-1&quot;&gt;&#10;                      {event.date} • {event.time}&#10;                    &lt;/p&gt;&#10;                    &lt;p className=&quot;text-xs text-gray-500&quot;&gt;{event.location}&lt;/p&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;button className=&quot;text-green-600 hover:text-green-700 text-xs font-medium&quot;&gt;&#10;                    Quan tâm&#10;                  &lt;/button&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Recent Notifications */}&#10;        &lt;div className=&quot;bg-white rounded-lg border border-gray-200 p-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold text-gray-900 vietnamese-text flex items-center&quot;&gt;&#10;              &lt;MegaphoneIcon className=&quot;h-5 w-5 mr-2 text-orange-600&quot; /&gt;&#10;              Thông báo mới&#10;            &lt;/h3&gt;&#10;            &lt;button className=&quot;text-blue-600 hover:text-blue-700 text-sm font-medium&quot;&gt;&#10;              Xem tất cả&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;space-y-3&quot;&gt;&#10;            {notifications.map((notification) =&gt; (&#10;              &lt;div key={notification.id} className=&quot;flex items-start space-x-3 p-2 hover:bg-gray-50 rounded-lg transition-colors cursor-pointer&quot;&gt;&#10;                &lt;div className={`w-8 h-8 rounded-full flex items-center justify-center text-white text-sm ${&#10;                  notification.type === 'academic' ? 'bg-blue-500' :&#10;                  notification.type === 'exam' ? 'bg-red-500' : 'bg-green-500'&#10;                }`}&gt;&#10;                  &lt;AcademicCapIcon className=&quot;h-4 w-4&quot; /&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex-1&quot;&gt;&#10;                  &lt;p className=&quot;text-sm font-medium text-gray-900 vietnamese-text&quot;&gt;{notification.title}&lt;/p&gt;&#10;                  &lt;p className=&quot;text-xs text-gray-500&quot;&gt;{notification.time}&lt;/p&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Trending Topics */}&#10;        &lt;div className=&quot;bg-white rounded-lg border border-gray-200 p-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold text-gray-900 vietnamese-text&quot;&gt;Xu hướng tại CTU&lt;/h3&gt;&#10;            &lt;ChevronRightIcon className=&quot;h-4 w-4 text-gray-400&quot; /&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;space-y-2&quot;&gt;&#10;            {trending.map((item, index) =&gt; (&#10;              &lt;div key={index} className=&quot;flex items-center justify-between p-2 hover:bg-gray-50 rounded-lg transition-colors cursor-pointer&quot;&gt;&#10;                &lt;div&gt;&#10;                  &lt;p className=&quot;text-sm font-medium text-blue-600&quot;&gt;{item.tag}&lt;/p&gt;&#10;                  &lt;p className=&quot;text-xs text-gray-500&quot;&gt;{item.posts} bài viết&lt;/p&gt;&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;text-xs text-gray-400&quot;&gt;#{index + 1}&lt;/div&gt;&#10;              &lt;/div&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Birthday Reminders */}&#10;        &lt;div className=&quot;bg-white rounded-lg border border-gray-200 p-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between mb-4&quot;&gt;&#10;            &lt;h3 className=&quot;font-semibold text-gray-900 vietnamese-text flex items-center&quot;&gt;&#10;              &lt;GiftIcon className=&quot;h-5 w-5 mr-2 text-pink-600&quot; /&gt;&#10;              Sinh nhật hôm nay&#10;            &lt;/h3&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;            &lt;div className=&quot;w-10 h-10 rounded-full bg-gradient-to-br from-pink-400 to-red-500 flex items-center justify-center text-white&quot;&gt;&#10;              &#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex-1&quot;&gt;&#10;              &lt;p className=&quot;text-sm font-medium text-gray-900 vietnamese-text&quot;&gt;Hôm nay là sinh nhật của &lt;strong&gt;Phạm Thị Mai&lt;/strong&gt;&lt;/p&gt;&#10;              &lt;button className=&quot;text-xs text-blue-600 hover:text-blue-700 font-medium mt-1&quot;&gt;&#10;                Gửi lời chúc mừng&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Footer */}&#10;        &lt;div className=&quot;text-xs text-gray-500 space-y-2 pb-4&quot;&gt;&#10;          &lt;div className=&quot;flex flex-wrap gap-2&quot;&gt;&#10;            &lt;a href=&quot;#&quot; className=&quot;hover:text-gray-700&quot;&gt;Quyền riêng tư&lt;/a&gt;&#10;            &lt;span&gt;•&lt;/span&gt;&#10;            &lt;a href=&quot;#&quot; className=&quot;hover:text-gray-700&quot;&gt;Điều khoản&lt;/a&gt;&#10;            &lt;span&gt;•&lt;/span&gt;&#10;            &lt;a href=&quot;#&quot; className=&quot;hover:text-gray-700&quot;&gt;Trợ giúp&lt;/a&gt;&#10;          &lt;/div&gt;&#10;          &lt;p className=&quot;vietnamese-text&quot;&gt;CTU Connect © 2025&lt;/p&gt;&#10;          &lt;p className=&quot;vietnamese-text&quot;&gt;Được phát triển bởi sinh viên CTU&lt;/p&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;&#10;export default RightSidebar;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/components/post/CreatePost.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/components/post/CreatePost.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import React, { useState, useRef, useCallback } from 'react';&#10;import { Button } from '@/components/ui/Button';&#10;import { Textarea } from '@/components/ui/Textarea';&#10;import { Input } from '@/components/ui/Input';&#10;import { LoadingSpinner } from '@/components/ui/LoadingSpinner';&#10;import { ErrorAlert } from '@/components/ui/ErrorAlert';&#10;import { postService } from '@/services/postService';&#10;import { CreatePostRequest } from '@/types';&#10;import { X, Image, Hash, Globe, Users, Lock, Video } from 'lucide-react';&#10;&#10;interface CreatePostProps {&#10;  onPostCreated?: (post: any) =&gt; void;&#10;  onCancel?: () =&gt; void;&#10;  className?: string;&#10;}&#10;&#10;export const CreatePost: React.FC&lt;CreatePostProps&gt; = ({&#10;                                                        onPostCreated,&#10;                                                        onCancel,&#10;                                                        className = ''&#10;                                                      }) =&gt; {&#10;  const [formData, setFormData] = useState&lt;CreatePostRequest&gt;({&#10;    title: '',&#10;    content: '',&#10;    tags: [],&#10;    category: '',&#10;    visibility: 'PUBLIC'&#10;  });&#10;&#10;  const [files, setFiles] = useState&lt;File[]&gt;([]);&#10;  const [isLoading, setIsLoading] = useState(false);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [tagInput, setTagInput] = useState('');&#10;  const fileInputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;&#10;  const handleInputChange = (field: keyof CreatePostRequest, value: string) =&gt; {&#10;    setFormData(prev =&gt; ({&#10;      ...prev,&#10;      [field]: value&#10;    }));&#10;  };&#10;&#10;  const handleAddTag = useCallback(() =&gt; {&#10;    const newTag = tagInput.trim();&#10;    const tags = formData.tags ?? [];&#10;&#10;    if (newTag &amp;&amp; !tags.includes(newTag)) {&#10;      setFormData(prev =&gt; ({&#10;        ...prev,&#10;        tags: [...(prev.tags ?? []), newTag]&#10;      }));&#10;      setTagInput('');&#10;    }&#10;  }, [formData.tags, tagInput]);&#10;&#10;  const handleRemoveTag = useCallback((tagToRemove: string) =&gt; {&#10;    setFormData(prev =&gt; ({&#10;      ...prev,&#10;      tags: (prev.tags ?? []).filter(tag =&gt; tag !== tagToRemove)&#10;    }));&#10;  }, []);&#10;&#10;&#10;  const handleTagInputKeyDown = (e: React.KeyboardEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;    if (e.key === 'Enter' || e.key === ',') {&#10;      e.preventDefault();&#10;      handleAddTag();&#10;    } else if (e.key === 'Backspace' &amp;&amp; tagInput === '' &amp;&amp; formData.tags &amp;&amp; formData.tags.length &gt; 0) {&#10;      // Xóa tag cuối nếu input rỗng và backspace&#10;      e.preventDefault();&#10;      handleRemoveTag(formData.tags &amp;&amp; formData.tags[formData.tags.length - 1]);&#10;    }&#10;  };&#10;&#10;  const handleFileSelect = (selectedFiles: File[]) =&gt; {&#10;    // Lọc giữ file ảnh/video hợp lệ, tránh trùng (có thể mở rộng)&#10;    const filtered = selectedFiles.filter(f =&gt; {&#10;      const type = f.type;&#10;      return type.startsWith('image/') || type.startsWith('video/');&#10;    });&#10;    setFiles(prev =&gt; [...prev, ...filtered]);&#10;  };&#10;&#10;  const handleRemoveFile = (index: number) =&gt; {&#10;    setFiles(prev =&gt; prev.filter((_, i) =&gt; i !== index));&#10;  };&#10;&#10;  const handleSubmit = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;&#10;    if (!formData.content.trim()) {&#10;      setError('Content is required');&#10;      return;&#10;    }&#10;&#10;    setIsLoading(true);&#10;    setError(null);&#10;&#10;    try {&#10;      const post = await postService.createPost(formData, files.length &gt; 0 ? files : undefined);&#10;&#10;      // Reset form&#10;      setFormData({&#10;        title: '',&#10;        content: '',&#10;        tags: [],&#10;        category: '',&#10;        visibility: 'PUBLIC'&#10;      });&#10;      setFiles([]);&#10;      setTagInput('');&#10;&#10;      if (onPostCreated) {&#10;        onPostCreated(post);&#10;      }&#10;    } catch (err: any) {&#10;      setError(err.response?.data?.message || 'Failed to create post');&#10;    } finally {&#10;      setIsLoading(false);&#10;    }&#10;  };&#10;&#10;  const visibilityOptions = [&#10;    { value: 'PUBLIC', label: 'Public', icon: Globe },&#10;    { value: 'FRIENDS', label: 'Friends', icon: Users },&#10;    { value: 'PRIVATE', label: 'Private', icon: Lock }&#10;  ];&#10;&#10;  // Hiển thị thumbnail cho các file đã chọn (ảnh hoặc video)&#10;  const renderFilePreview = (file: File, index: number) =&gt; {&#10;    const isImage = file.type.startsWith('image/');&#10;    const previewUrl = URL.createObjectURL(file);&#10;&#10;    return (&#10;        &lt;div key={index} className=&quot;relative w-24 h-24 rounded-md overflow-hidden border border-gray-300 flex-shrink-0&quot;&gt;&#10;          {isImage ? (&#10;              &lt;img&#10;                  src={previewUrl}&#10;                  alt={file.name}&#10;                  className=&quot;object-cover w-full h-full&quot;&#10;                  loading=&quot;lazy&quot;&#10;              /&gt;&#10;          ) : (&#10;              &lt;video&#10;                  src={previewUrl}&#10;                  className=&quot;object-cover w-full h-full&quot;&#10;                  preload=&quot;metadata&quot;&#10;                  controls={false}&#10;                  muted&#10;              /&gt;&#10;          )}&#10;          &lt;button&#10;              type=&quot;button&quot;&#10;              aria-label={`Remove file ${file.name}`}&#10;              onClick={() =&gt; handleRemoveFile(index)}&#10;              className=&quot;absolute top-1 right-1 bg-black bg-opacity-50 rounded-full p-1 text-white hover:bg-opacity-80 transition&quot;&#10;          &gt;&#10;            &lt;X className=&quot;w-4 h-4 pointer-events-none&quot; /&gt;&#10;          &lt;/button&gt;&#10;        &lt;/div&gt;&#10;    );&#10;  };&#10;&#10;  return (&#10;      &lt;section className={`bg-white rounded-lg shadow-md p-6 max-w-3xl mx-auto ${className}`} aria-label=&quot;Create a new post&quot;&gt;&#10;        &lt;h3 className=&quot;text-lg font-semibold mb-4&quot;&gt;Create Post&lt;/h3&gt;&#10;&#10;        {error &amp;&amp; (&#10;            &lt;ErrorAlert&#10;                message={error}&#10;                onClose={() =&gt; setError(null)}&#10;                className=&quot;mb-4&quot;&#10;            /&gt;&#10;        )}&#10;&#10;        &lt;form onSubmit={handleSubmit} className=&quot;space-y-5&quot; noValidate&gt;&#10;          {/* Title */}&#10;          &lt;Input&#10;              id=&quot;post-title&quot;&#10;              placeholder=&quot;Post title (optional)&quot;&#10;              value={formData.title}&#10;              onChange={(e) =&gt; handleInputChange('title', e.target.value)}&#10;              aria-label=&quot;Post title&quot;&#10;              maxLength={150}&#10;          /&gt;&#10;&#10;          {/* Content */}&#10;          &lt;Textarea&#10;              id=&quot;post-content&quot;&#10;              placeholder=&quot;What's on your mind?&quot;&#10;              value={formData.content}&#10;              onChange={(e) =&gt; handleInputChange('content', e.target.value)}&#10;              rows={5}&#10;              required&#10;              aria-required=&quot;true&quot;&#10;              aria-describedby=&quot;content-help&quot;&#10;              maxLength={2000}&#10;          /&gt;&#10;          &lt;p id=&quot;content-help&quot; className=&quot;text-xs text-gray-500 select-none&quot;&gt;&#10;            Max 2000 characters&#10;          &lt;/p&gt;&#10;&#10;          {/* Tags */}&#10;          &lt;div&gt;&#10;            &lt;label htmlFor=&quot;tag-input&quot; className=&quot;flex items-center gap-2 mb-2 text-sm font-medium text-gray-700&quot;&gt;&#10;              &lt;Hash aria-hidden=&quot;true&quot; /&gt; Tags&#10;            &lt;/label&gt;&#10;            &lt;div className=&quot;flex gap-2 mb-3&quot;&gt;&#10;              &lt;Input&#10;                  id=&quot;tag-input&quot;&#10;                  placeholder=&quot;Add tags (press Enter or comma)&quot;&#10;                  value={tagInput}&#10;                  onChange={(e) =&gt; setTagInput(e.target.value)}&#10;                  onKeyDown={handleTagInputKeyDown}&#10;                  maxLength={20}&#10;                  autoComplete=&quot;off&quot;&#10;                  aria-describedby=&quot;tag-help&quot;&#10;              /&gt;&#10;              &lt;Button&#10;                  type=&quot;button&quot;&#10;                  variant=&quot;outline&quot;&#10;                  size=&quot;sm&quot;&#10;                  onClick={handleAddTag}&#10;                  disabled={!tagInput.trim()}&#10;                  aria-label=&quot;Add tag&quot;&#10;              &gt;&#10;                Add&#10;              &lt;/Button&gt;&#10;            &lt;/div&gt;&#10;            &lt;p id=&quot;tag-help&quot; className=&quot;text-xs text-gray-500 select-none mb-2&quot;&gt;&#10;              Press Enter or comma to add a tag. Maximum 20 characters per tag.&#10;            &lt;/p&gt;&#10;            {formData.tags &amp;&amp; formData.tags.length &gt; 0 &amp;&amp; (&#10;                &lt;div className=&quot;flex flex-wrap gap-2 max-h-28 overflow-y-auto pb-1&quot;&gt;&#10;                  {formData.tags &amp;&amp; formData.tags.map((tag, i) =&gt; (&#10;                      &lt;span&#10;                          key={i}&#10;                          className=&quot;inline-flex items-center px-3 py-1 text-sm bg-blue-100 text-blue-800 rounded-full select-none&quot;&#10;                      &gt;&#10;                  #{tag}&#10;                        &lt;button&#10;                            type=&quot;button&quot;&#10;                            aria-label={`Remove tag ${tag}`}&#10;                            onClick={() =&gt; handleRemoveTag(tag)}&#10;                            className=&quot;ml-1 inline-flex justify-center items-center text-blue-600 hover:text-blue-900 focus:outline-none focus:ring-2 focus:ring-blue-400 rounded&quot;&#10;                        &gt;&#10;                    &lt;X className=&quot;h-3 w-3&quot; /&gt;&#10;                  &lt;/button&gt;&#10;                &lt;/span&gt;&#10;                  ))}&#10;                &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Category */}&#10;          &lt;Input&#10;              id=&quot;post-category&quot;&#10;              placeholder=&quot;Category (optional)&quot;&#10;              value={formData.category}&#10;              onChange={(e) =&gt; handleInputChange('category', e.target.value)}&#10;              aria-label=&quot;Category&quot;&#10;              maxLength={50}&#10;          /&gt;&#10;&#10;          {/* File Upload */}&#10;          &lt;div&gt;&#10;            &lt;label className=&quot;mb-2 block text-sm font-medium text-gray-700 flex items-center gap-2&quot;&gt;&#10;              &lt;Image className=&quot;h-4 w-4&quot; aria-hidden=&quot;true&quot; /&gt;&#10;              Photos/Videos&#10;            &lt;/label&gt;&#10;            &lt;input&#10;                ref={fileInputRef}&#10;                type=&quot;file&quot;&#10;                multiple&#10;                accept=&quot;image/*,video/*&quot;&#10;                onChange={(e) =&gt; {&#10;                  const selectedFiles = Array.from(e.target.files || []);&#10;                  handleFileSelect(selectedFiles);&#10;                  e.target.value = ''; // reset để có thể chọn lại file đã chọn trước đó&#10;                }}&#10;                className=&quot;sr-only&quot;&#10;                aria-label=&quot;Add photos or videos&quot;&#10;            /&gt;&#10;            &lt;Button&#10;                type=&quot;button&quot;&#10;                variant=&quot;outline&quot;&#10;                onClick={() =&gt; fileInputRef.current?.click()}&#10;                className=&quot;mb-3 w-full&quot;&#10;            &gt;&#10;              Add Photos/Videos&#10;            &lt;/Button&gt;&#10;&#10;            {/* Preview files */}&#10;            {files.length &gt; 0 &amp;&amp; (&#10;                &lt;div className=&quot;flex gap-3 flex-wrap max-h-36 overflow-y-auto&quot;&gt;&#10;                  {files.map(renderFilePreview)}&#10;                &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;&#10;          {/* Visibility */}&#10;          &lt;fieldset&gt;&#10;            &lt;legend className=&quot;mb-2 text-sm font-medium text-gray-700 flex items-center gap-2&quot;&gt;&#10;              &lt;Globe className=&quot;h-4 w-4&quot; aria-hidden=&quot;true&quot; /&gt; Visibility&#10;            &lt;/legend&gt;&#10;            &lt;div className=&quot;flex gap-2 flex-wrap&quot;&gt;&#10;              {visibilityOptions.map(({ value, label, icon: Icon }) =&gt; {&#10;                const isSelected = formData.visibility === value;&#10;                return (&#10;                    &lt;button&#10;                        key={value}&#10;                        type=&quot;button&quot;&#10;                        aria-pressed={isSelected}&#10;                        onClick={() =&gt; handleInputChange('visibility', value)}&#10;                        className={`flex items-center gap-2 px-4 py-2 border rounded-md text-sm transition-colors focus:outline-none focus:ring-2 focus:ring-blue-500 ${&#10;                            isSelected&#10;                                ? 'bg-blue-50 border-blue-400 text-blue-700'&#10;                                : 'border-gray-300 text-gray-700 hover:bg-gray-50'&#10;                        }`}&#10;                    &gt;&#10;                      &lt;Icon className=&quot;h-4 w-4&quot; aria-hidden=&quot;true&quot; /&gt;&#10;                      {label}&#10;                    &lt;/button&gt;&#10;                );&#10;              })}&#10;            &lt;/div&gt;&#10;          &lt;/fieldset&gt;&#10;&#10;          {/* Buttons */}&#10;          &lt;div className=&quot;flex justify-end gap-3 pt-4&quot;&gt;&#10;            {onCancel &amp;&amp; (&#10;                &lt;Button&#10;                    type=&quot;button&quot;&#10;                    variant=&quot;outline&quot;&#10;                    onClick={onCancel}&#10;                    disabled={isLoading}&#10;                &gt;&#10;                  Cancel&#10;                &lt;/Button&gt;&#10;            )}&#10;            &lt;Button&#10;                type=&quot;submit&quot;&#10;                disabled={isLoading || !formData.content.trim()}&#10;                aria-disabled={isLoading || !formData.content.trim()}&#10;                loading={isLoading}&#10;            &gt;&#10;              {isLoading ? (&#10;                  &lt;&gt;&#10;                    &lt;LoadingSpinner size=&quot;sm&quot; /&gt;&#10;                    &lt;span className=&quot;ml-2&quot;&gt;Creating...&lt;/span&gt;&#10;                  &lt;/&gt;&#10;              ) : (&#10;                  'Create Post'&#10;              )}&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/form&gt;&#10;      &lt;/section&gt;&#10;  );&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React, { useState, useRef, useCallback } from 'react';&#10;import { Button } from '@/components/ui/Button';&#10;import { Textarea } from '@/components/ui/Textarea';&#10;import { Input } from '@/components/ui/Input';&#10;import { LoadingSpinner } from '@/components/ui/LoadingSpinner';&#10;import { ErrorAlert } from '@/components/ui/ErrorAlert';&#10;import { postService } from '@/services/postService';&#10;import { CreatePostRequest } from '@/types';&#10;import { t } from '@/utils/localization';&#10;import { X, Image, Hash, Globe, Users, Lock, Video, Plus, Upload } from 'lucide-react';&#10;&#10;interface CreatePostProps {&#10;  onPostCreated?: (post: any) =&gt; void;&#10;  onCancel?: () =&gt; void;&#10;  className?: string;&#10;}&#10;&#10;export const CreatePost: React.FC&lt;CreatePostProps&gt; = ({&#10;                                                        onPostCreated,&#10;                                                        onCancel,&#10;                                                        className = ''&#10;                                                      }) =&gt; {&#10;  const [formData, setFormData] = useState&lt;CreatePostRequest&gt;({&#10;    title: '',&#10;    content: '',&#10;    tags: [],&#10;    category: '',&#10;    visibility: 'PUBLIC'&#10;  });&#10;&#10;  const [files, setFiles] = useState&lt;File[]&gt;([]);&#10;  const [isLoading, setIsLoading] = useState(false);&#10;  const [error, setError] = useState&lt;string | null&gt;(null);&#10;  const [tagInput, setTagInput] = useState('');&#10;  const [uploadProgress, setUploadProgress] = useState&lt;number&gt;(0);&#10;  const [successMessage, setSuccessMessage] = useState&lt;string | null&gt;(null);&#10;  const fileInputRef = useRef&lt;HTMLInputElement&gt;(null);&#10;&#10;  const handleInputChange = (field: keyof CreatePostRequest, value: string) =&gt; {&#10;    setFormData(prev =&gt; ({&#10;      ...prev,&#10;      [field]: value&#10;    }));&#10;    setError(null); // Clear error when user types&#10;  };&#10;&#10;  const handleAddTag = useCallback(() =&gt; {&#10;    const newTag = tagInput.trim();&#10;    const tags = formData.tags ?? [];&#10;&#10;    if (newTag &amp;&amp; !tags.includes(newTag) &amp;&amp; tags.length &lt; 5) { // Limit to 5 tags&#10;      setFormData(prev =&gt; ({&#10;        ...prev,&#10;        tags: [...(prev.tags ?? []), newTag]&#10;      }));&#10;      setTagInput('');&#10;    }&#10;  }, [formData.tags, tagInput]);&#10;&#10;  const handleRemoveTag = useCallback((tagToRemove: string) =&gt; {&#10;    setFormData(prev =&gt; ({&#10;      ...prev,&#10;      tags: (prev.tags ?? []).filter(tag =&gt; tag !== tagToRemove)&#10;    }));&#10;  }, []);&#10;&#10;  const handleTagInputKeyDown = (e: React.KeyboardEvent&lt;HTMLInputElement&gt;) =&gt; {&#10;    if (e.key === 'Enter' || e.key === ',') {&#10;      e.preventDefault();&#10;      handleAddTag();&#10;    } else if (e.key === 'Backspace' &amp;&amp; tagInput === '' &amp;&amp; formData.tags &amp;&amp; formData.tags.length &gt; 0) {&#10;      e.preventDefault();&#10;      handleRemoveTag(formData.tags &amp;&amp; formData.tags[formData.tags.length - 1]);&#10;    }&#10;  };&#10;&#10;  const handleFileSelect = (selectedFiles: File[]) =&gt; {&#10;    const maxSize = 50 * 1024 * 1024; // 50MB&#10;    const maxFiles = 5;&#10;    &#10;    const validFiles = selectedFiles.filter(f =&gt; {&#10;      const type = f.type;&#10;      const isValidType = type.startsWith('image/') || type.startsWith('video/');&#10;      const isValidSize = f.size &lt;= maxSize;&#10;      &#10;      if (!isValidType) {&#10;        setError('Chỉ hỗ trợ file ảnh và video');&#10;        return false;&#10;      }&#10;      &#10;      if (!isValidSize) {&#10;        setError('Kích thước file không được vượt quá 50MB');&#10;        return false;&#10;      }&#10;      &#10;      return true;&#10;    });&#10;&#10;    if (files.length + validFiles.length &gt; maxFiles) {&#10;      setError(`Chỉ được tải lên tối đa ${maxFiles} file`);&#10;      return;&#10;    }&#10;&#10;    setFiles(prev =&gt; [...prev, ...validFiles]);&#10;    setError(null);&#10;  };&#10;&#10;  const handleRemoveFile = (index: number) =&gt; {&#10;    setFiles(prev =&gt; prev.filter((_, i) =&gt; i !== index));&#10;  };&#10;&#10;  const handleSubmit = async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;&#10;    if (!formData.content.trim()) {&#10;      setError('Nội dung bài viết không được để trống');&#10;      return;&#10;    }&#10;&#10;    setIsLoading(true);&#10;    setError(null);&#10;    setUploadProgress(0);&#10;&#10;    try {&#10;      // Simulate upload progress&#10;      const progressInterval = setInterval(() =&gt; {&#10;        setUploadProgress(prev =&gt; {&#10;          if (prev &gt;= 90) {&#10;            clearInterval(progressInterval);&#10;            return 90;&#10;          }&#10;          return prev + 10;&#10;        });&#10;      }, 200);&#10;&#10;      const result = await postService.createPost(formData, files);&#10;      &#10;      clearInterval(progressInterval);&#10;      setUploadProgress(100);&#10;      &#10;      setSuccessMessage('Đã tạo bài viết thành công!');&#10;      &#10;      // Reset form&#10;      setFormData({&#10;        title: '',&#10;        content: '',&#10;        tags: [],&#10;        category: '',&#10;        visibility: 'PUBLIC'&#10;      });&#10;      setFiles([]);&#10;      setTagInput('');&#10;      &#10;      onPostCreated?.(result);&#10;      &#10;      // Hide success message after 3 seconds&#10;      setTimeout(() =&gt; setSuccessMessage(null), 3000);&#10;      &#10;    } catch (error: any) {&#10;      console.error('Không thể tạo bài viết:', error);&#10;      setError(error.response?.data?.message || 'Có lỗi xảy ra khi tạo bài viết');&#10;    } finally {&#10;      setIsLoading(false);&#10;      setUploadProgress(0);&#10;    }&#10;  };&#10;&#10;  const formatFileSize = (bytes: number): string =&gt; {&#10;    if (bytes === 0) return '0 Bytes';&#10;    const k = 1024;&#10;    const sizes = ['Bytes', 'KB', 'MB', 'GB'];&#10;    const i = Math.floor(Math.log(bytes) / Math.log(k));&#10;    return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];&#10;  };&#10;&#10;  return (&#10;    &lt;div className={`create-post bg-white rounded-lg shadow-sm border border-gray-200 p-6 ${className}`}&gt;&#10;      {/* Header */}&#10;      &lt;div className=&quot;flex items-center justify-between mb-6&quot;&gt;&#10;        &lt;h2 className=&quot;text-xl font-semibold text-gray-900 flex items-center&quot;&gt;&#10;          &lt;Plus className=&quot;h-5 w-5 mr-2 text-indigo-600&quot; /&gt;&#10;          {t('posts.createPost')}&#10;        &lt;/h2&gt;&#10;        {onCancel &amp;&amp; (&#10;          &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; onClick={onCancel}&gt;&#10;            &lt;X className=&quot;h-4 w-4&quot; /&gt;&#10;          &lt;/Button&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      {/* Success Message */}&#10;      {successMessage &amp;&amp; (&#10;        &lt;div className=&quot;mb-4 p-3 bg-green-50 border border-green-200 rounded-lg text-green-800&quot;&gt;&#10;          {successMessage}&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {/* Error Message */}&#10;      {error &amp;&amp; (&#10;        &lt;ErrorAlert message={error} onClose={() =&gt; setError(null)} className=&quot;mb-4&quot; /&gt;&#10;      )}&#10;&#10;      &lt;form onSubmit={handleSubmit} className=&quot;space-y-4&quot;&gt;&#10;        {/* Title */}&#10;        &lt;div&gt;&#10;          &lt;Input&#10;            type=&quot;text&quot;&#10;            value={formData.title}&#10;            onChange={(e) =&gt; handleInputChange('title', e.target.value)}&#10;            placeholder=&quot;Tiêu đề bài viết (tùy chọn)&quot;&#10;            className=&quot;text-lg font-medium border-0 border-b-2 border-gray-200 focus:border-indigo-500 rounded-none px-0 bg-transparent&quot;&#10;            maxLength={100}&#10;          /&gt;&#10;          &lt;div className=&quot;text-xs text-gray-500 mt-1 text-right&quot;&gt;&#10;            {formData.title.length}/100&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Content */}&#10;        &lt;div&gt;&#10;          &lt;Textarea&#10;            value={formData.content}&#10;            onChange={(e) =&gt; handleInputChange('content', e.target.value)}&#10;            placeholder=&quot;Bạn đang nghĩ gì? Hãy chia sẻ với cộng đồng CTU...&quot;&#10;            className=&quot;min-h-[120px] border-gray-200 focus:border-indigo-500 focus:ring-indigo-500 resize-none text-gray-700 leading-relaxed&quot;&#10;            maxLength={2000}&#10;            required&#10;          /&gt;&#10;          &lt;div className=&quot;text-xs text-gray-500 mt-1 text-right&quot;&gt;&#10;            {formData.content.length}/2000&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Category Selection */}&#10;        &lt;div&gt;&#10;          &lt;select&#10;            value={formData.category}&#10;            onChange={(e) =&gt; handleInputChange('category', e.target.value)}&#10;            className=&quot;w-full px-3 py-2 border border-gray-200 rounded-lg focus:border-indigo-500 focus:ring-indigo-500 text-gray-700&quot;&#10;          &gt;&#10;            &lt;option value=&quot;&quot;&gt;Chọn danh mục&lt;/option&gt;&#10;            &lt;option value=&quot;academic&quot;&gt; Học tập&lt;/option&gt;&#10;            &lt;option value=&quot;social&quot;&gt; Sinh hoạt&lt;/option&gt;&#10;            &lt;option value=&quot;announcement&quot;&gt; Thông báo&lt;/option&gt;&#10;            &lt;option value=&quot;career&quot;&gt; Nghề nghiệp&lt;/option&gt;&#10;            &lt;option value=&quot;technology&quot;&gt; Công nghệ&lt;/option&gt;&#10;            &lt;option value=&quot;sports&quot;&gt;⚽ Thể thao&lt;/option&gt;&#10;            &lt;option value=&quot;entertainment&quot;&gt; Giải trí&lt;/option&gt;&#10;            &lt;option value=&quot;other&quot;&gt; Khác&lt;/option&gt;&#10;          &lt;/select&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Tags */}&#10;        &lt;div&gt;&#10;          &lt;div className=&quot;flex flex-wrap gap-2 mb-2&quot;&gt;&#10;            {formData.tags?.map((tag, index) =&gt; (&#10;              &lt;span&#10;                key={index}&#10;                className=&quot;inline-flex items-center bg-blue-50 text-blue-700 px-3 py-1 rounded-full text-sm font-medium&quot;&#10;              &gt;&#10;                #{tag}&#10;                &lt;button&#10;                  type=&quot;button&quot;&#10;                  onClick={() =&gt; handleRemoveTag(tag)}&#10;                  className=&quot;ml-2 text-blue-500 hover:text-blue-700&quot;&#10;                &gt;&#10;                  &lt;X className=&quot;h-3 w-3&quot; /&gt;&#10;                &lt;/button&gt;&#10;              &lt;/span&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;div className=&quot;flex-1 relative&quot;&gt;&#10;              &lt;Hash className=&quot;absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400&quot; /&gt;&#10;              &lt;Input&#10;                type=&quot;text&quot;&#10;                value={tagInput}&#10;                onChange={(e) =&gt; setTagInput(e.target.value)}&#10;                onKeyDown={handleTagInputKeyDown}&#10;                placeholder=&quot;Thêm thẻ (nhấn Enter hoặc dấu phẩy)&quot;&#10;                className=&quot;pl-10&quot;&#10;                maxLength={20}&#10;                disabled={formData.tags &amp;&amp; formData.tags.length &gt;= 5}&#10;              /&gt;&#10;            &lt;/div&gt;&#10;            &lt;Button&#10;              type=&quot;button&quot;&#10;              variant=&quot;outline&quot;&#10;              size=&quot;sm&quot;&#10;              onClick={handleAddTag}&#10;              disabled={!tagInput.trim() || (formData.tags &amp;&amp; formData.tags.length &gt;= 5)}&#10;            &gt;&#10;              Thêm&#10;            &lt;/Button&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;text-xs text-gray-500 mt-1&quot;&gt;&#10;            Tối đa 5 thẻ, mỗi thẻ không quá 20 ký tự&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* File Upload */}&#10;        &lt;div&gt;&#10;          &lt;input&#10;            ref={fileInputRef}&#10;            type=&quot;file&quot;&#10;            multiple&#10;            accept=&quot;image/*,video/*&quot;&#10;            onChange={(e) =&gt; handleFileSelect(Array.from(e.target.files || []))}&#10;            className=&quot;hidden&quot;&#10;          /&gt;&#10;          &#10;          &lt;div className=&quot;border-2 border-dashed border-gray-200 rounded-lg p-4 hover:border-indigo-300 transition-colors&quot;&gt;&#10;            &lt;div className=&quot;text-center&quot;&gt;&#10;              &lt;Upload className=&quot;mx-auto h-8 w-8 text-gray-400 mb-2&quot; /&gt;&#10;              &lt;button&#10;                type=&quot;button&quot;&#10;                onClick={() =&gt; fileInputRef.current?.click()}&#10;                className=&quot;text-indigo-600 hover:text-indigo-700 font-medium&quot;&#10;              &gt;&#10;                Thêm ảnh hoặc video&#10;              &lt;/button&gt;&#10;              &lt;p className=&quot;text-sm text-gray-500 mt-1&quot;&gt;&#10;                Hỗ trợ JPG, PNG, GIF, MP4, AVI. Tối đa 50MB mỗi file, 5 file.&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;&#10;          {/* File Preview */}&#10;          {files.length &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;mt-3 grid grid-cols-2 md:grid-cols-3 gap-3&quot;&gt;&#10;              {files.map((file, index) =&gt; (&#10;                &lt;div key={index} className=&quot;relative group&quot;&gt;&#10;                  &lt;div className=&quot;aspect-square bg-gray-100 rounded-lg overflow-hidden&quot;&gt;&#10;                    {file.type.startsWith('image/') ? (&#10;                      &lt;img&#10;                        src={URL.createObjectURL(file)}&#10;                        alt=&quot;Preview&quot;&#10;                        className=&quot;w-full h-full object-cover&quot;&#10;                      /&gt;&#10;                    ) : (&#10;                      &lt;div className=&quot;w-full h-full flex items-center justify-center&quot;&gt;&#10;                        &lt;Video className=&quot;h-8 w-8 text-gray-400&quot; /&gt;&#10;                      &lt;/div&gt;&#10;                    )}&#10;                  &lt;/div&gt;&#10;                  &lt;button&#10;                    type=&quot;button&quot;&#10;                    onClick={() =&gt; handleRemoveFile(index)}&#10;                    className=&quot;absolute -top-2 -right-2 bg-red-500 text-white rounded-full p-1 opacity-0 group-hover:opacity-100 transition-opacity&quot;&#10;                  &gt;&#10;                    &lt;X className=&quot;h-3 w-3&quot; /&gt;&#10;                  &lt;/button&gt;&#10;                  &lt;div className=&quot;text-xs text-gray-500 mt-1 truncate&quot;&gt;&#10;                    {file.name} ({formatFileSize(file.size)})&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        {/* Visibility */}&#10;        &lt;div&gt;&#10;          &lt;label className=&quot;block text-sm font-medium text-gray-700 mb-2&quot;&gt;&#10;            Quyền riêng tư&#10;          &lt;/label&gt;&#10;          &lt;div className=&quot;flex space-x-4&quot;&gt;&#10;            &lt;label className=&quot;flex items-center&quot;&gt;&#10;              &lt;input&#10;                type=&quot;radio&quot;&#10;                name=&quot;visibility&quot;&#10;                value=&quot;PUBLIC&quot;&#10;                checked={formData.visibility === 'PUBLIC'}&#10;                onChange={(e) =&gt; handleInputChange('visibility', e.target.value)}&#10;                className=&quot;mr-2&quot;&#10;              /&gt;&#10;              &lt;Globe className=&quot;h-4 w-4 mr-1 text-green-600&quot; /&gt;&#10;              &lt;span className=&quot;text-sm&quot;&gt;Công khai&lt;/span&gt;&#10;            &lt;/label&gt;&#10;            &lt;label className=&quot;flex items-center&quot;&gt;&#10;              &lt;input&#10;                type=&quot;radio&quot;&#10;                name=&quot;visibility&quot;&#10;                value=&quot;FRIENDS&quot;&#10;                checked={formData.visibility === 'FRIENDS'}&#10;                onChange={(e) =&gt; handleInputChange('visibility', e.target.value)}&#10;                className=&quot;mr-2&quot;&#10;              /&gt;&#10;              &lt;Users className=&quot;h-4 w-4 mr-1 text-blue-600&quot; /&gt;&#10;              &lt;span className=&quot;text-sm&quot;&gt;Bạn bè&lt;/span&gt;&#10;            &lt;/label&gt;&#10;            &lt;label className=&quot;flex items-center&quot;&gt;&#10;              &lt;input&#10;                type=&quot;radio&quot;&#10;                name=&quot;visibility&quot;&#10;                value=&quot;PRIVATE&quot;&#10;                checked={formData.visibility === 'PRIVATE'}&#10;                onChange={(e) =&gt; handleInputChange('visibility', e.target.value)}&#10;                className=&quot;mr-2&quot;&#10;              /&gt;&#10;              &lt;Lock className=&quot;h-4 w-4 mr-1 text-gray-600&quot; /&gt;&#10;              &lt;span className=&quot;text-sm&quot;&gt;Riêng tư&lt;/span&gt;&#10;            &lt;/label&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {/* Upload Progress */}&#10;        {isLoading &amp;&amp; uploadProgress &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;bg-gray-50 rounded-lg p-3&quot;&gt;&#10;            &lt;div className=&quot;flex items-center justify-between mb-2&quot;&gt;&#10;              &lt;span className=&quot;text-sm text-gray-600&quot;&gt;Đang tải lên...&lt;/span&gt;&#10;              &lt;span className=&quot;text-sm font-medium text-indigo-600&quot;&gt;{uploadProgress}%&lt;/span&gt;&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;w-full bg-gray-200 rounded-full h-2&quot;&gt;&#10;              &lt;div &#10;                className=&quot;bg-indigo-600 h-2 rounded-full transition-all duration-300&quot;&#10;                style={{ width: `${uploadProgress}%` }}&#10;              &gt;&lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Submit Buttons */}&#10;        &lt;div className=&quot;flex justify-end space-x-3 pt-4 border-t border-gray-100&quot;&gt;&#10;          {onCancel &amp;&amp; (&#10;            &lt;Button &#10;              type=&quot;button&quot; &#10;              variant=&quot;outline&quot; &#10;              onClick={onCancel}&#10;              disabled={isLoading}&#10;            &gt;&#10;              {t('actions.cancel')}&#10;            &lt;/Button&gt;&#10;          )}&#10;          &lt;Button &#10;            type=&quot;submit&quot; &#10;            disabled={isLoading || !formData.content.trim()}&#10;            className=&quot;flex items-center space-x-2&quot;&#10;          &gt;&#10;            {isLoading ? (&#10;              &lt;LoadingSpinner size=&quot;sm&quot; /&gt;&#10;            ) : (&#10;              &lt;Plus className=&quot;h-4 w-4&quot; /&gt;&#10;            )}&#10;            &lt;span&gt;{isLoading ? 'Đang đăng...' : 'Đăng bài viết'}&lt;/span&gt;&#10;          &lt;/Button&gt;&#10;        &lt;/div&gt;&#10;      &lt;/form&gt;&#10;    &lt;/div&gt;&#10;  );&#10;};&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/components/post/PostCard.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/components/post/PostCard.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import React, { useState, useEffect, useCallback } from 'react';&#10;import { Post, CreateCommentRequest } from '@/types';&#10;import { postService } from '@/services/postService';&#10;import { Button } from '@/components/ui/Button';&#10;import { Card } from '@/components/ui/Card';&#10;import { Textarea } from '@/components/ui/Textarea';&#10;import { LoadingSpinner } from '@/components/ui/LoadingSpinner';&#10;import { t, formatTimeAgo } from '@/utils/localization';&#10;import {&#10;  Heart,&#10;  MessageCircle,&#10;  Share,&#10;  Bookmark,&#10;  MoreHorizontal,&#10;  Send,&#10;  Eye&#10;} from 'lucide-react';&#10;&#10;interface PostCardProps {&#10;  post: Post;&#10;  onPostUpdate?: (updatedPost: Post) =&gt; void;&#10;  onPostDelete?: (postId: string) =&gt; void;&#10;  className?: string;&#10;}&#10;&#10;export const PostCard: React.FC&lt;PostCardProps&gt; = ({&#10;                                                    post,&#10;                                                    onPostUpdate,&#10;                                                    onPostDelete,&#10;                                                    className = ''&#10;                                                  }) =&gt; {&#10;  const [isLiked, setIsLiked] = useState(false);&#10;  const [isBookmarked, setIsBookmarked] = useState(false);&#10;  const [showComments, setShowComments] = useState(false);&#10;  const [commentText, setCommentText] = useState('');&#10;  const [comments, setComments] = useState&lt;any[]&gt;([]);&#10;  const [isLoadingComments, setIsLoadingComments] = useState(false);&#10;  const [isSubmittingComment, setIsSubmittingComment] = useState(false);&#10;  const [isLoadingInteraction, setIsLoadingInteraction] = useState(false);&#10;  const [actionFeedback, setActionFeedback] = useState&lt;string | null&gt;(null);&#10;&#10;  // Load trạng thái like, bookmark khi mount&#10;  useEffect(() =&gt; {&#10;    let mounted = true;&#10;    (async () =&gt; {&#10;      try {&#10;        const status = await postService.getInteractionStatus(post.id);&#10;        if (mounted) {&#10;          setIsLiked(status.hasLiked);&#10;          setIsBookmarked(status.hasBookmarked);&#10;        }&#10;      } catch (error) {&#10;        console.debug('Không thể tải trạng thái tương tác:', error);&#10;      }&#10;    })();&#10;    return () =&gt; { mounted = false; };&#10;  }, [post.id]);&#10;&#10;  // Show feedback message temporarily&#10;  const showFeedback = (message: string) =&gt; {&#10;    setActionFeedback(message);&#10;    setTimeout(() =&gt; setActionFeedback(null), 2000);&#10;  };&#10;&#10;  // Toggle phần comment&#10;  const toggleComments = useCallback(async () =&gt; {&#10;    if (!showComments &amp;&amp; comments.length === 0) {&#10;      setIsLoadingComments(true);&#10;      try {&#10;        const response = await postService.getComments(post.id);&#10;        setComments(response.content);&#10;      } catch (error) {&#10;        console.error('Không thể tải bình luận:', error);&#10;        showFeedback('Không thể tải bình luận');&#10;      } finally {&#10;        setIsLoadingComments(false);&#10;      }&#10;    }&#10;    setShowComments(v =&gt; !v);&#10;  }, [showComments, comments.length, post.id]);&#10;&#10;  // Chức năng tương tác: like, bookmark, share&#10;  const handleInteraction = useCallback(async (type: 'like' | 'bookmark' | 'share') =&gt; {&#10;    if (isLoadingInteraction) return;&#10;    setIsLoadingInteraction(true);&#10;    try {&#10;      if (type === 'like') {&#10;        await postService.toggleLike(post.id);&#10;        setIsLiked(l =&gt; {&#10;          const newLiked = !l;&#10;          const newLikes = newLiked ? post.stats.likes + 1 : post.stats.likes - 1;&#10;          onPostUpdate?.({&#10;            ...post,&#10;            stats: { ...post.stats, likes: newLikes }&#10;          });&#10;          showFeedback(newLiked ? 'Đã thích bài viết' : 'Đã bỏ thích');&#10;          return newLiked;&#10;        });&#10;      } else if (type === 'bookmark') {&#10;        await postService.toggleBookmark(post.id);&#10;        setIsBookmarked(b =&gt; {&#10;          const newBookmarked = !b;&#10;          const newBookmarks = newBookmarked ? post.stats.bookmarks + 1 : post.stats.bookmarks - 1;&#10;          onPostUpdate?.({&#10;            ...post,&#10;            stats: { ...post.stats, bookmarks: newBookmarks }&#10;          });&#10;          showFeedback(newBookmarked ? 'Đã lưu bài viết' : 'Đã bỏ lưu bài viết');&#10;          return newBookmarked;&#10;        });&#10;      } else if (type === 'share') {&#10;        await postService.sharePost(post.id);&#10;        onPostUpdate?.({&#10;          ...post,&#10;          stats: { ...post.stats, shares: post.stats.shares + 1 }&#10;        });&#10;        await navigator.clipboard.writeText(`${window.location.origin}/posts/${post.id}`);&#10;        showFeedback('Đã sao chép liên kết bài viết');&#10;      }&#10;    } catch (error) {&#10;      console.error(`Không thể thực hiện ${type}:`, error);&#10;      showFeedback('Có lỗi xảy ra, vui lòng thử lại');&#10;    } finally {&#10;      setIsLoadingInteraction(false);&#10;    }&#10;  }, [isLoadingInteraction, onPostUpdate, post]);&#10;&#10;  // Gửi comment&#10;  const handleSubmitComment = useCallback(async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (!commentText.trim() || isSubmittingComment) return;&#10;&#10;    setIsSubmittingComment(true);&#10;    try {&#10;      const commentData: CreateCommentRequest = { content: commentText.trim() };&#10;      const newComment = await postService.createComment(post.id, commentData);&#10;      setComments(prev =&gt; [...prev, newComment]);&#10;      setCommentText('');&#10;      onPostUpdate?.({&#10;        ...post,&#10;        stats: { ...post.stats, comments: post.stats.comments + 1 }&#10;      });&#10;      showFeedback('Đã thêm bình luận');&#10;    } catch (error) {&#10;      console.error('Không thể tạo bình luận:', error);&#10;      showFeedback('Không thể gửi bình luận');&#10;    } finally {&#10;      setIsSubmittingComment(false);&#10;    }&#10;  }, [commentText, isSubmittingComment, onPostUpdate, post]);&#10;&#10;  // Format số lượng hiển thị&#10;  const formatStats = (count: number): string =&gt; {&#10;    if (count &gt;= 1_000_000) return `${(count / 1_000_000).toFixed(1)}M`;&#10;    if (count &gt;= 1000) return `${(count / 1000).toFixed(1)}K`;&#10;    return count.toString();&#10;  };&#10;&#10;  return (&#10;      &lt;Card className={`post-card bg-white rounded-lg shadow-sm hover:shadow-md transition-all duration-300 border border-gray-100 ${className}`}&gt;&#10;        {/* Action feedback */}&#10;        {actionFeedback &amp;&amp; (&#10;          &lt;div className=&quot;absolute top-2 right-2 z-10 bg-green-500 text-white px-3 py-1 rounded-md text-sm animate-fade-in&quot;&gt;&#10;            {actionFeedback}&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        &lt;header className=&quot;flex items-center justify-between p-4&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-3&quot;&gt;&#10;            &lt;div className=&quot;w-10 h-10 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold&quot;&gt;&#10;              {post.author.fullName?.charAt(0) || post.author.username.charAt(0).toUpperCase()}&#10;            &lt;/div&gt;&#10;            &lt;div&gt;&#10;              &lt;h3 className=&quot;font-semibold text-gray-900 hover:text-indigo-600 cursor-pointer transition-colors&quot;&gt;&#10;                {post.author.fullName || post.author.username}&#10;              &lt;/h3&gt;&#10;              &lt;p className=&quot;text-sm text-gray-500&quot;&gt;&#10;                {formatTimeAgo(post.createdAt)}&#10;              &lt;/p&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; aria-label=&quot;Tùy chọn khác&quot; disabled&gt;&#10;            &lt;MoreHorizontal className=&quot;h-4 w-4&quot; /&gt;&#10;          &lt;/Button&gt;&#10;        &lt;/header&gt;&#10;&#10;        &lt;div className=&quot;px-4 pb-3&quot;&gt;&#10;          {post.title &amp;&amp; (&#10;            &lt;h2 className=&quot;text-lg font-semibold text-gray-900 mb-2 line-clamp-2&quot;&gt;&#10;              {post.title}&#10;            &lt;/h2&gt;&#10;          )}&#10;          &lt;div className=&quot;text-gray-700 whitespace-pre-wrap leading-relaxed&quot;&gt;&#10;            {post.content}&#10;          &lt;/div&gt;&#10;&#10;          {post.tags &amp;&amp; post.tags.length &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;flex flex-wrap gap-2 mt-3&quot;&gt;&#10;              {post.tags.map((tag) =&gt; (&#10;                &lt;span&#10;                  key={tag}&#10;                  className=&quot;inline-block bg-blue-50 text-blue-700 px-2 py-1 rounded-full text-xs font-medium hover:bg-blue-100 transition-colors cursor-pointer&quot;&#10;                &gt;&#10;                  #{tag}&#10;                &lt;/span&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          )}&#10;&#10;          {post.media &amp;&amp; post.media.length &gt; 0 &amp;&amp; (&#10;            &lt;div className=&quot;mt-3 grid gap-2&quot;&gt;&#10;              {post.media.map((media) =&gt; (&#10;                &lt;div key={media.id} className=&quot;rounded-lg overflow-hidden bg-gray-50&quot;&gt;&#10;                  {media.mediaType === 'IMAGE' ? (&#10;                    &lt;img&#10;                      src={media.mediaUrl}&#10;                      alt=&quot;Ảnh bài viết&quot;&#10;                      className=&quot;w-full h-auto max-h-96 object-cover cursor-pointer hover:opacity-95 transition-opacity&quot;&#10;                      onClick={() =&gt; window.open(media.mediaUrl, '_blank')}&#10;                    /&gt;&#10;                  ) : (&#10;                    &lt;video&#10;                      src={media.mediaUrl}&#10;                      controls&#10;                      className=&quot;w-full h-auto max-h-96 object-cover&quot;&#10;                      preload=&quot;metadata&quot;&#10;                    &gt;&#10;                      Trình duyệt của bạn không hỗ trợ video.&#10;                    &lt;/video&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          )}&#10;        &lt;/div&gt;&#10;&#10;        &lt;div className=&quot;border-t border-gray-100 px-4 py-3&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-6&quot;&gt;&#10;              &lt;button&#10;                onClick={() =&gt; handleInteraction('like')}&#10;                disabled={isLoadingInteraction}&#10;                className={`flex items-center space-x-2 px-3 py-2 rounded-lg transition-all duration-200 ${&#10;                  isLiked &#10;                    ? 'bg-red-50 text-red-600 hover:bg-red-100' &#10;                    : 'text-gray-600 hover:bg-gray-50 hover:text-red-600'&#10;                }`}&#10;                aria-label={isLiked ? t('posts.unlikePost') : t('posts.likePost')}&#10;              &gt;&#10;                &lt;Heart className={`h-5 w-5 ${isLiked ? 'fill-current' : ''} transition-transform hover:scale-110`} /&gt;&#10;                &lt;span className=&quot;text-sm font-medium&quot;&gt;{formatStats(post.stats.likes)}&lt;/span&gt;&#10;              &lt;/button&gt;&#10;&#10;              &lt;button&#10;                onClick={toggleComments}&#10;                className=&quot;flex items-center space-x-2 px-3 py-2 rounded-lg text-gray-600 hover:bg-gray-50 hover:text-blue-600 transition-all duration-200&quot;&#10;                aria-label={showComments ? t('posts.hideComments') : t('posts.viewComments')}&#10;              &gt;&#10;                &lt;MessageCircle className=&quot;h-5 w-5 transition-transform hover:scale-110&quot; /&gt;&#10;                &lt;span className=&quot;text-sm font-medium&quot;&gt;{formatStats(post.stats.comments)}&lt;/span&gt;&#10;              &lt;/button&gt;&#10;&#10;              &lt;button&#10;                onClick={() =&gt; handleInteraction('share')}&#10;                disabled={isLoadingInteraction}&#10;                className=&quot;flex items-center space-x-2 px-3 py-2 rounded-lg text-gray-600 hover:bg-gray-50 hover:text-green-600 transition-all duration-200&quot;&#10;                aria-label={t('posts.sharePost')}&#10;              &gt;&#10;                &lt;Share className=&quot;h-5 w-5 transition-transform hover:scale-110&quot; /&gt;&#10;                &lt;span className=&quot;text-sm font-medium&quot;&gt;{formatStats(post.stats.shares)}&lt;/span&gt;&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;&#10;            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;              &lt;div className=&quot;flex items-center space-x-1 text-gray-500&quot;&gt;&#10;                &lt;Eye className=&quot;h-4 w-4&quot; /&gt;&#10;                &lt;span className=&quot;text-sm&quot;&gt;{formatStats(post.stats.views)}&lt;/span&gt;&#10;              &lt;/div&gt;&#10;&#10;              &lt;button&#10;                onClick={() =&gt; handleInteraction('bookmark')}&#10;                disabled={isLoadingInteraction}&#10;                className={`p-2 rounded-lg transition-all duration-200 ${&#10;                  isBookmarked &#10;                    ? 'bg-yellow-50 text-yellow-600 hover:bg-yellow-100' &#10;                    : 'text-gray-600 hover:bg-gray-50 hover:text-yellow-600'&#10;                }`}&#10;                aria-label={isBookmarked ? t('posts.removeBookmark') : t('posts.bookmarkPost')}&#10;              &gt;&#10;                &lt;Bookmark className={`h-5 w-5 ${isBookmarked ? 'fill-current' : ''} transition-transform hover:scale-110`} /&gt;&#10;              &lt;/button&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;&#10;        {showComments &amp;&amp; (&#10;          &lt;div className=&quot;border-t border-gray-100 bg-gray-50&quot;&gt;&#10;            &lt;div className=&quot;p-4&quot;&gt;&#10;              &lt;form onSubmit={handleSubmitComment} className=&quot;mb-4&quot;&gt;&#10;                &lt;div className=&quot;flex space-x-3&quot;&gt;&#10;                  &lt;div className=&quot;w-8 h-8 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-full flex items-center justify-center text-white text-sm font-semibold flex-shrink-0&quot;&gt;&#10;                    U&#10;                  &lt;/div&gt;&#10;                  &lt;div className=&quot;flex-1&quot;&gt;&#10;                    &lt;Textarea&#10;                      value={commentText}&#10;                      onChange={(e) =&gt; setCommentText(e.target.value)}&#10;                      placeholder={t('posts.writeComment')}&#10;                      className=&quot;min-h-[60px] resize-none border-gray-200 focus:border-indigo-500 focus:ring-indigo-500&quot;&#10;                      disabled={isSubmittingComment}&#10;                    /&gt;&#10;                    &lt;div className=&quot;flex justify-end mt-2&quot;&gt;&#10;                      &lt;Button&#10;                        type=&quot;submit&quot;&#10;                        size=&quot;sm&quot;&#10;                        disabled={!commentText.trim() || isSubmittingComment}&#10;                        className=&quot;flex items-center space-x-2&quot;&#10;                      &gt;&#10;                        {isSubmittingComment ? (&#10;                          &lt;LoadingSpinner size=&quot;sm&quot; /&gt;&#10;                        ) : (&#10;                          &lt;Send className=&quot;h-4 w-4&quot; /&gt;&#10;                        )}&#10;                        &lt;span&gt;{isSubmittingComment ? t('actions.loading') : t('actions.submit')}&lt;/span&gt;&#10;                      &lt;/Button&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/form&gt;&#10;&#10;              {isLoadingComments ? (&#10;                &lt;div className=&quot;flex justify-center py-4&quot;&gt;&#10;                  &lt;LoadingSpinner /&gt;&#10;                  &lt;span className=&quot;ml-2 text-gray-600&quot;&gt;{t('actions.loading')}&lt;/span&gt;&#10;                &lt;/div&gt;&#10;              ) : (&#10;                &lt;div className=&quot;space-y-3&quot;&gt;&#10;                  {comments.length === 0 ? (&#10;                    &lt;p className=&quot;text-gray-500 text-center py-4 italic&quot;&gt;&#10;                      Chưa có bình luận nào. Hãy là người đầu tiên bình luận!&#10;                    &lt;/p&gt;&#10;                  ) : (&#10;                    comments.map((comment) =&gt; (&#10;                      &lt;div key={comment.id} className=&quot;flex space-x-3 bg-white p-3 rounded-lg&quot;&gt;&#10;                        &lt;div className=&quot;w-8 h-8 bg-gradient-to-br from-green-500 to-blue-600 rounded-full flex items-center justify-center text-white text-sm font-semibold flex-shrink-0&quot;&gt;&#10;                          {comment.author?.fullName?.charAt(0) || comment.author?.username?.charAt(0) || 'A'}&#10;                        &lt;/div&gt;&#10;                        &lt;div className=&quot;flex-1&quot;&gt;&#10;                          &lt;div className=&quot;flex items-center space-x-2 mb-1&quot;&gt;&#10;                            &lt;span className=&quot;font-medium text-gray-900 text-sm&quot;&gt;&#10;                              {comment.author?.fullName || comment.author?.username || 'Ẩn danh'}&#10;                            &lt;/span&gt;&#10;                            &lt;span className=&quot;text-xs text-gray-500&quot;&gt;&#10;                              {formatTimeAgo(comment.createdAt)}&#10;                            &lt;/span&gt;&#10;                          &lt;/div&gt;&#10;                          &lt;p className=&quot;text-gray-700 text-sm leading-relaxed&quot;&gt;&#10;                            {comment.content}&#10;                          &lt;/p&gt;&#10;                        &lt;/div&gt;&#10;                      &lt;/div&gt;&#10;                    ))&#10;                  )}&#10;                &lt;/div&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/Card&gt;&#10;  );&#10;};&#10;" />
              <option name="updatedContent" value="'use client';&#10;&#10;import React, { useState, useEffect, useCallback } from 'react';&#10;import { Post, CreateCommentRequest } from '@/types';&#10;import { postService } from '@/services/postService';&#10;import { Button } from '@/components/ui/Button';&#10;import { Card } from '@/components/ui/Card';&#10;import { Textarea } from '@/components/ui/Textarea';&#10;import { LoadingSpinner } from '@/components/ui/LoadingSpinner';&#10;import { t, formatTimeAgo } from '@/utils/localization';&#10;import {&#10;  Heart,&#10;  MessageCircle,&#10;  Share,&#10;  Bookmark,&#10;  MoreHorizontal,&#10;  Send,&#10;  Eye,&#10;  Globe,&#10;  Users,&#10;  Lock&#10;} from 'lucide-react';&#10;&#10;interface PostCardProps {&#10;  post: any; // Sử dụng any để phù hợp với structure mới&#10;  onPostUpdate?: (updatedPost: any) =&gt; void;&#10;  onPostDelete?: (postId: string) =&gt; void;&#10;  className?: string;&#10;}&#10;&#10;export const PostCard: React.FC&lt;PostCardProps&gt; = ({&#10;                                                    post,&#10;                                                    onPostUpdate,&#10;                                                    onPostDelete,&#10;                                                    className = ''&#10;                                                  }) =&gt; {&#10;  const [isLiked, setIsLiked] = useState(false);&#10;  const [isBookmarked, setIsBookmarked] = useState(false);&#10;  const [showComments, setShowComments] = useState(false);&#10;  const [commentText, setCommentText] = useState('');&#10;  const [comments, setComments] = useState&lt;any[]&gt;([]);&#10;  const [isLoadingComments, setIsLoadingComments] = useState(false);&#10;  const [isSubmittingComment, setIsSubmittingComment] = useState(false);&#10;  const [isLoadingInteraction, setIsLoadingInteraction] = useState(false);&#10;  const [actionFeedback, setActionFeedback] = useState&lt;string | null&gt;(null);&#10;&#10;  // Load trạng thái like, bookmark khi mount&#10;  useEffect(() =&gt; {&#10;    let mounted = true;&#10;    (async () =&gt; {&#10;      try {&#10;        const status = await postService.getInteractionStatus(post.id);&#10;        if (mounted) {&#10;          setIsLiked(status.hasLiked);&#10;          setIsBookmarked(status.hasBookmarked);&#10;        }&#10;      } catch (error) {&#10;        console.debug('Không thể tải trạng thái tương tác:', error);&#10;      }&#10;    })();&#10;    return () =&gt; { mounted = false; };&#10;  }, [post.id]);&#10;&#10;  // Show feedback message temporarily&#10;  const showFeedback = (message: string) =&gt; {&#10;    setActionFeedback(message);&#10;    setTimeout(() =&gt; setActionFeedback(null), 2000);&#10;  };&#10;&#10;  // Toggle phần comment&#10;  const toggleComments = useCallback(async () =&gt; {&#10;    if (!showComments &amp;&amp; comments.length === 0) {&#10;      setIsLoadingComments(true);&#10;      try {&#10;        const response = await postService.getComments(post.id);&#10;        // Đọc từ response.content thay vì response trực tiếp&#10;        setComments(response.content || []);&#10;      } catch (error) {&#10;        console.error('Không thể tải bình luận:', error);&#10;        showFeedback('Không thể tải bình luận');&#10;      } finally {&#10;        setIsLoadingComments(false);&#10;      }&#10;    }&#10;    setShowComments(v =&gt; !v);&#10;  }, [showComments, comments.length, post.id]);&#10;&#10;  // Chức năng tương tác: like, bookmark, share&#10;  const handleInteraction = useCallback(async (type: 'like' | 'bookmark' | 'share') =&gt; {&#10;    if (isLoadingInteraction) return;&#10;    setIsLoadingInteraction(true);&#10;    try {&#10;      if (type === 'like') {&#10;        await postService.toggleLike(post.id);&#10;        setIsLiked(l =&gt; {&#10;          const newLiked = !l;&#10;          const newLikes = newLiked ? post.stats.likes + 1 : post.stats.likes - 1;&#10;          onPostUpdate?.({&#10;            ...post,&#10;            stats: { ...post.stats, likes: newLikes }&#10;          });&#10;          showFeedback(newLiked ? 'Đã thích bài viết' : 'Đã bỏ thích');&#10;          return newLiked;&#10;        });&#10;      } else if (type === 'bookmark') {&#10;        await postService.toggleBookmark(post.id);&#10;        setIsBookmarked(b =&gt; {&#10;          const newBookmarked = !b;&#10;          const newBookmarks = newBookmarked ? post.stats.bookmarks + 1 : post.stats.bookmarks - 1;&#10;          onPostUpdate?.({&#10;            ...post,&#10;            stats: { ...post.stats, bookmarks: newBookmarks }&#10;          });&#10;          showFeedback(newBookmarked ? 'Đã lưu bài viết' : 'Đã bỏ lưu bài viết');&#10;          return newBookmarked;&#10;        });&#10;      } else if (type === 'share') {&#10;        await postService.sharePost(post.id);&#10;        onPostUpdate?.({&#10;          ...post,&#10;          stats: { ...post.stats, shares: post.stats.shares + 1 }&#10;        });&#10;        await navigator.clipboard.writeText(`${window.location.origin}/posts/${post.id}`);&#10;        showFeedback('Đã sao chép liên kết bài viết');&#10;      }&#10;    } catch (error) {&#10;      console.error(`Không thể thực hiện ${type}:`, error);&#10;      showFeedback('Có lỗi xảy ra, vui lòng thử lại');&#10;    } finally {&#10;      setIsLoadingInteraction(false);&#10;    }&#10;  }, [isLoadingInteraction, onPostUpdate, post]);&#10;&#10;  // Gửi comment&#10;  const handleSubmitComment = useCallback(async (e: React.FormEvent) =&gt; {&#10;    e.preventDefault();&#10;    if (!commentText.trim() || isSubmittingComment) return;&#10;&#10;    setIsSubmittingComment(true);&#10;    try {&#10;      const commentData: CreateCommentRequest = { content: commentText.trim() };&#10;      const newComment = await postService.createComment(post.id, commentData);&#10;      setComments(prev =&gt; [...prev, newComment]);&#10;      setCommentText('');&#10;      onPostUpdate?.({&#10;        ...post,&#10;        stats: { ...post.stats, comments: post.stats.comments + 1 }&#10;      });&#10;      showFeedback('Đã thêm bình luận');&#10;    } catch (error) {&#10;      console.error('Không thể tạo bình luận:', error);&#10;      showFeedback('Không thể gửi bình luận');&#10;    } finally {&#10;      setIsSubmittingComment(false);&#10;    }&#10;  }, [commentText, isSubmittingComment, onPostUpdate, post]);&#10;&#10;  // Format số lượng hiển thị&#10;  const formatStats = (count: number): string =&gt; {&#10;    if (count &gt;= 1_000_000) return `${(count / 1_000_000).toFixed(1)}M`;&#10;    if (count &gt;= 1000) return `${(count / 1000).toFixed(1)}K`;&#10;    return count.toString();&#10;  };&#10;&#10;  // Get privacy icon&#10;  const getPrivacyIcon = () =&gt; {&#10;    switch (post.privacy || post.visibility) {&#10;      case 'PUBLIC':&#10;        return &lt;Globe className=&quot;h-3 w-3 text-green-600&quot; /&gt;;&#10;      case 'FRIENDS':&#10;        return &lt;Users className=&quot;h-3 w-3 text-blue-600&quot; /&gt;;&#10;      case 'PRIVATE':&#10;        return &lt;Lock className=&quot;h-3 w-3 text-gray-600&quot; /&gt;;&#10;      default:&#10;        return &lt;Globe className=&quot;h-3 w-3 text-green-600&quot; /&gt;;&#10;    }&#10;  };&#10;&#10;  const getPrivacyText = () =&gt; {&#10;    switch (post.privacy || post.visibility) {&#10;      case 'PUBLIC': return 'Công khai';&#10;      case 'FRIENDS': return 'Bạn bè';&#10;      case 'PRIVATE': return 'Riêng tư';&#10;      default: return 'Công khai';&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;Card className={`post-card bg-white rounded-xl shadow-sm hover:shadow-md transition-all duration-300 border border-gray-100 mb-6 ${className}`}&gt;&#10;      {/* Action feedback */}&#10;      {actionFeedback &amp;&amp; (&#10;        &lt;div className=&quot;absolute top-4 right-4 z-10 bg-green-500 text-white px-4 py-2 rounded-lg text-sm animate-fade-in shadow-lg&quot;&gt;&#10;          {actionFeedback}&#10;        &lt;/div&gt;&#10;      )}&#10;      &#10;      &lt;header className=&quot;flex items-center justify-between p-6 pb-4&quot;&gt;&#10;        &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;          &lt;div className=&quot;relative&quot;&gt;&#10;            {post.author?.avatarUrl || post.authorAvatar ? (&#10;              &lt;img&#10;                src={post.author?.avatarUrl || post.authorAvatar}&#10;                alt=&quot;Avatar&quot;&#10;                className=&quot;w-12 h-12 rounded-full object-cover ring-2 ring-white shadow-sm&quot;&#10;              /&gt;&#10;            ) : (&#10;              &lt;div className=&quot;w-12 h-12 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold text-lg&quot;&gt;&#10;                {(post.author?.fullName || post.author?.name || post.authorName)?.charAt(0)?.toUpperCase() || 'U'}&#10;              &lt;/div&gt;&#10;            )}&#10;            {/* Online status indicator */}&#10;            &lt;div className=&quot;absolute -bottom-1 -right-1 w-4 h-4 bg-green-500 border-2 border-white rounded-full&quot;&gt;&lt;/div&gt;&#10;          &lt;/div&gt;&#10;          &lt;div className=&quot;flex-1&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;              &lt;h3 className=&quot;font-semibold text-gray-900 hover:text-indigo-600 cursor-pointer transition-colors vietnamese-text&quot;&gt;&#10;                {post.author?.fullName || post.author?.name || post.authorName || 'Người dùng'}&#10;              &lt;/h3&gt;&#10;              {post.author?.role &amp;&amp; (&#10;                &lt;span className={`px-2 py-1 rounded-full text-xs font-medium ${&#10;                  post.author.role === 'LECTURER' &#10;                    ? 'bg-blue-100 text-blue-800' &#10;                    : 'bg-green-100 text-green-800'&#10;                }`}&gt;&#10;                  {post.author.role === 'LECTURER' ? 'Giảng viên' : 'Sinh viên'}&#10;                &lt;/span&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex items-center space-x-2 mt-1&quot;&gt;&#10;              &lt;p className=&quot;text-sm text-gray-500&quot;&gt;&#10;                {formatTimeAgo(post.createdAt)}&#10;              &lt;/p&gt;&#10;              &lt;span className=&quot;text-gray-300&quot;&gt;•&lt;/span&gt;&#10;              &lt;div className=&quot;flex items-center space-x-1&quot;&gt;&#10;                {getPrivacyIcon()}&#10;                &lt;span className=&quot;text-xs text-gray-500&quot;&gt;{getPrivacyText()}&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;        &lt;Button variant=&quot;ghost&quot; size=&quot;sm&quot; aria-label=&quot;Tùy chọn khác&quot; disabled&gt;&#10;          &lt;MoreHorizontal className=&quot;h-5 w-5&quot; /&gt;&#10;        &lt;/Button&gt;&#10;      &lt;/header&gt;&#10;&#10;      &lt;div className=&quot;px-6 pb-4&quot;&gt;&#10;        {/* Title */}&#10;        {post.title &amp;&amp; (&#10;          &lt;h2 className=&quot;text-xl font-semibold text-gray-900 mb-3 line-clamp-2 vietnamese-text&quot;&gt;&#10;            {post.title}&#10;          &lt;/h2&gt;&#10;        )}&#10;        &#10;        {/* Content */}&#10;        &lt;div className=&quot;text-gray-700 whitespace-pre-wrap leading-relaxed text-base mb-4 vietnamese-text&quot;&gt;&#10;          {post.content}&#10;        &lt;/div&gt;&#10;        &#10;        {/* Category */}&#10;        {post.category &amp;&amp; (&#10;          &lt;div className=&quot;mb-3&quot;&gt;&#10;            &lt;span className=&quot;inline-flex items-center bg-indigo-50 text-indigo-700 px-3 py-1 rounded-full text-sm font-medium&quot;&gt;&#10;               {post.category}&#10;            &lt;/span&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;        &#10;        {/* Tags */}&#10;        {post.tags &amp;&amp; post.tags.length &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;flex flex-wrap gap-2 mb-4&quot;&gt;&#10;            {post.tags.map((tag: string, index: number) =&gt; (&#10;              &lt;span&#10;                key={index}&#10;                className=&quot;inline-block bg-blue-50 text-blue-700 px-3 py-1 rounded-full text-sm font-medium hover:bg-blue-100 transition-colors cursor-pointer&quot;&#10;              &gt;&#10;                #{tag}&#10;              &lt;/span&gt;&#10;            ))}&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Media - Images */}&#10;        {post.images &amp;&amp; post.images.length &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;mb-4&quot;&gt;&#10;            &lt;div className={`grid gap-2 rounded-xl overflow-hidden ${&#10;              post.images.length === 1 ? 'grid-cols-1' :&#10;              post.images.length === 2 ? 'grid-cols-2' :&#10;              post.images.length === 3 ? 'grid-cols-2' : 'grid-cols-2'&#10;            }`}&gt;&#10;              {post.images.slice(0, 4).map((imageUrl: string, index: number) =&gt; (&#10;                &lt;div &#10;                  key={index} &#10;                  className={`relative bg-gray-100 ${&#10;                    post.images.length === 3 &amp;&amp; index === 0 ? 'row-span-2' :&#10;                    post.images.length &gt; 4 &amp;&amp; index === 3 ? 'relative' : ''&#10;                  }`}&#10;                &gt;&#10;                  &lt;img&#10;                    src={imageUrl}&#10;                    alt={`Ảnh bài viết ${index + 1}`}&#10;                    className=&quot;w-full h-full object-cover cursor-pointer hover:opacity-95 transition-opacity min-h-[200px] max-h-[400px]&quot;&#10;                    onClick={() =&gt; window.open(imageUrl, '_blank')}&#10;                  /&gt;&#10;                  {post.images.length &gt; 4 &amp;&amp; index === 3 &amp;&amp; (&#10;                    &lt;div className=&quot;absolute inset-0 bg-black bg-opacity-50 flex items-center justify-center cursor-pointer&quot;&gt;&#10;                      &lt;span className=&quot;text-white text-xl font-semibold&quot;&gt;&#10;                        +{post.images.length - 4}&#10;                      &lt;/span&gt;&#10;                    &lt;/div&gt;&#10;                  )}&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;&#10;        {/* Media - Videos */}&#10;        {post.videos &amp;&amp; post.videos.length &gt; 0 &amp;&amp; (&#10;          &lt;div className=&quot;mb-4&quot;&gt;&#10;            &lt;div className=&quot;grid gap-3&quot;&gt;&#10;              {post.videos.map((videoUrl: string, index: number) =&gt; (&#10;                &lt;div key={index} className=&quot;rounded-xl overflow-hidden bg-gray-50&quot;&gt;&#10;                  &lt;video&#10;                    src={videoUrl}&#10;                    controls&#10;                    className=&quot;w-full h-auto max-h-[500px] object-cover&quot;&#10;                    preload=&quot;metadata&quot;&#10;                  &gt;&#10;                    Trình duyệt của bạn không hỗ trợ video.&#10;                  &lt;/video&gt;&#10;                &lt;/div&gt;&#10;              ))}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        )}&#10;      &lt;/div&gt;&#10;&#10;      {/* Stats Bar */}&#10;      {(post.stats?.likes &gt; 0 || post.stats?.comments &gt; 0 || post.stats?.shares &gt; 0) &amp;&amp; (&#10;        &lt;div className=&quot;px-6 py-3 border-t border-gray-100&quot;&gt;&#10;          &lt;div className=&quot;flex items-center justify-between text-sm text-gray-500&quot;&gt;&#10;            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;              {post.stats?.likes &gt; 0 &amp;&amp; (&#10;                &lt;span className=&quot;flex items-center space-x-1&quot;&gt;&#10;                  &lt;div className=&quot;flex -space-x-1&quot;&gt;&#10;                    &lt;div className=&quot;w-5 h-5 bg-red-500 rounded-full flex items-center justify-center&quot;&gt;&#10;                      &lt;Heart className=&quot;w-3 h-3 text-white fill-current&quot; /&gt;&#10;                    &lt;/div&gt;&#10;                  &lt;/div&gt;&#10;                  &lt;span&gt;{formatStats(post.stats.likes)}&lt;/span&gt;&#10;                &lt;/span&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;            &lt;div className=&quot;flex items-center space-x-4&quot;&gt;&#10;              {post.stats?.comments &gt; 0 &amp;&amp; (&#10;                &lt;span&gt;{formatStats(post.stats.comments)} bình luận&lt;/span&gt;&#10;              )}&#10;              {post.stats?.shares &gt; 0 &amp;&amp; (&#10;                &lt;span&gt;{formatStats(post.stats.shares)} chia sẻ&lt;/span&gt;&#10;              )}&#10;              {post.stats?.views &gt; 0 &amp;&amp; (&#10;                &lt;span&gt;{formatStats(post.stats.views)} lượt xem&lt;/span&gt;&#10;              )}&#10;            &lt;/div&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;&#10;      {/* Action Buttons */}&#10;      &lt;div className=&quot;border-t border-gray-100 px-6 py-4&quot;&gt;&#10;        &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;          &lt;div className=&quot;flex items-center space-x-2&quot;&gt;&#10;            &lt;button&#10;              onClick={() =&gt; handleInteraction('like')}&#10;              disabled={isLoadingInteraction}&#10;              className={`flex items-center space-x-2 px-4 py-3 rounded-xl transition-all duration-200 flex-1 justify-center ${&#10;                isLiked &#10;                  ? 'bg-red-50 text-red-600 hover:bg-red-100' &#10;                  : 'text-gray-600 hover:bg-gray-50 hover:text-red-600'&#10;              }`}&#10;              aria-label={isLiked ? t('posts.unlikePost') : t('posts.likePost')}&#10;            &gt;&#10;              &lt;Heart className={`h-5 w-5 ${isLiked ? 'fill-current' : ''} transition-transform hover:scale-110`} /&gt;&#10;              &lt;span className=&quot;font-medium&quot;&gt;Thích&lt;/span&gt;&#10;            &lt;/button&gt;&#10;            &#10;            &lt;button&#10;              onClick={toggleComments}&#10;              className=&quot;flex items-center space-x-2 px-4 py-3 rounded-xl text-gray-600 hover:bg-gray-50 hover:text-blue-600 transition-all duration-200 flex-1 justify-center&quot;&#10;              aria-label={showComments ? t('posts.hideComments') : t('posts.viewComments')}&#10;            &gt;&#10;              &lt;MessageCircle className=&quot;h-5 w-5 transition-transform hover:scale-110&quot; /&gt;&#10;              &lt;span className=&quot;font-medium&quot;&gt;Bình luận&lt;/span&gt;&#10;            &lt;/button&gt;&#10;            &#10;            &lt;button&#10;              onClick={() =&gt; handleInteraction('share')}&#10;              disabled={isLoadingInteraction}&#10;              className=&quot;flex items-center space-x-2 px-4 py-3 rounded-xl text-gray-600 hover:bg-gray-50 hover:text-green-600 transition-all duration-200 flex-1 justify-center&quot;&#10;              aria-label={t('posts.sharePost')}&#10;            &gt;&#10;              &lt;Share className=&quot;h-5 w-5 transition-transform hover:scale-110&quot; /&gt;&#10;              &lt;span className=&quot;font-medium&quot;&gt;Chia sẻ&lt;/span&gt;&#10;            &lt;/button&gt;&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      &lt;/div&gt;&#10;&#10;      {/* Comments Section */}&#10;      {showComments &amp;&amp; (&#10;        &lt;div className=&quot;border-t border-gray-100 bg-gray-50&quot;&gt;&#10;          &lt;div className=&quot;p-6&quot;&gt;&#10;            {/* Comment Form */}&#10;            &lt;form onSubmit={handleSubmitComment} className=&quot;mb-6&quot;&gt;&#10;              &lt;div className=&quot;flex space-x-4&quot;&gt;&#10;                &lt;div className=&quot;w-10 h-10 bg-gradient-to-br from-indigo-500 to-purple-600 rounded-full flex items-center justify-center text-white font-semibold flex-shrink-0&quot;&gt;&#10;                  U&#10;                &lt;/div&gt;&#10;                &lt;div className=&quot;flex-1&quot;&gt;&#10;                  &lt;Textarea&#10;                    value={commentText}&#10;                    onChange={(e) =&gt; setCommentText(e.target.value)}&#10;                    placeholder={t('posts.writeComment')}&#10;                    className=&quot;min-h-[60px] resize-none border-gray-200 focus:border-indigo-500 focus:ring-indigo-500 rounded-xl bg-white&quot;&#10;                    disabled={isSubmittingComment}&#10;                  /&gt;&#10;                  &lt;div className=&quot;flex justify-end mt-3&quot;&gt;&#10;                    &lt;Button&#10;                      type=&quot;submit&quot;&#10;                      size=&quot;sm&quot;&#10;                      disabled={!commentText.trim() || isSubmittingComment}&#10;                      className=&quot;flex items-center space-x-2 rounded-xl&quot;&#10;                    &gt;&#10;                      {isSubmittingComment ? (&#10;                        &lt;LoadingSpinner size=&quot;sm&quot; /&gt;&#10;                      ) : (&#10;                        &lt;Send className=&quot;h-4 w-4&quot; /&gt;&#10;                      )}&#10;                      &lt;span&gt;{isSubmittingComment ? t('actions.loading') : 'Gửi'}&lt;/span&gt;&#10;                    &lt;/Button&gt;&#10;                  &lt;/div&gt;&#10;                &lt;/div&gt;&#10;              &lt;/div&gt;&#10;            &lt;/form&gt;&#10;&#10;            {/* Comments List */}&#10;            {isLoadingComments ? (&#10;              &lt;div className=&quot;flex justify-center py-8&quot;&gt;&#10;                &lt;LoadingSpinner /&gt;&#10;                &lt;span className=&quot;ml-3 text-gray-600&quot;&gt;{t('actions.loading')}&lt;/span&gt;&#10;              &lt;/div&gt;&#10;            ) : (&#10;              &lt;div className=&quot;space-y-4&quot;&gt;&#10;                {comments.length === 0 ? (&#10;                  &lt;p className=&quot;text-gray-500 text-center py-8 italic vietnamese-text&quot;&gt;&#10;                    Chưa có bình luận nào. Hãy là người đầu tiên bình luận!&#10;                  &lt;/p&gt;&#10;                ) : (&#10;                  comments.map((comment) =&gt; (&#10;                    &lt;div key={comment.id} className=&quot;flex space-x-4 bg-white p-4 rounded-xl&quot;&gt;&#10;                      &lt;div className=&quot;flex-shrink-0&quot;&gt;&#10;                        {comment.author?.avatarUrl ? (&#10;                          &lt;img&#10;                            src={comment.author.avatarUrl}&#10;                            alt=&quot;Avatar&quot;&#10;                            className=&quot;w-10 h-10 rounded-full object-cover&quot;&#10;                          /&gt;&#10;                        ) : (&#10;                          &lt;div className=&quot;w-10 h-10 bg-gradient-to-br from-green-500 to-blue-600 rounded-full flex items-center justify-center text-white font-semibold&quot;&gt;&#10;                            {comment.author?.fullName?.charAt(0) || comment.author?.name?.charAt(0) || 'A'}&#10;                          &lt;/div&gt;&#10;                        )}&#10;                      &lt;/div&gt;&#10;                      &lt;div className=&quot;flex-1&quot;&gt;&#10;                        &lt;div className=&quot;flex items-center space-x-2 mb-2&quot;&gt;&#10;                          &lt;span className=&quot;font-semibold text-gray-900 vietnamese-text&quot;&gt;&#10;                            {comment.author?.fullName || comment.author?.name || 'Ẩn danh'}&#10;                          &lt;/span&gt;&#10;                          {comment.author?.role &amp;&amp; (&#10;                            &lt;span className={`px-2 py-1 rounded-full text-xs font-medium ${&#10;                              comment.author.role === 'LECTURER' &#10;                                ? 'bg-blue-100 text-blue-800' &#10;                                : 'bg-green-100 text-green-800'&#10;                            }`}&gt;&#10;                              {comment.author.role === 'LECTURER' ? 'GV' : 'SV'}&#10;                            &lt;/span&gt;&#10;                          )}&#10;                          &lt;span className=&quot;text-sm text-gray-500&quot;&gt;&#10;                            {formatTimeAgo(comment.createdAt)}&#10;                          &lt;/span&gt;&#10;                        &lt;/div&gt;&#10;                        &lt;p className=&quot;text-gray-700 leading-relaxed vietnamese-text&quot;&gt;&#10;                          {comment.content}&#10;                        &lt;/p&gt;&#10;                      &lt;/div&gt;&#10;                    &lt;/div&gt;&#10;                  ))&#10;                )}&#10;              &lt;/div&gt;&#10;            )}&#10;          &lt;/div&gt;&#10;        &lt;/div&gt;&#10;      )}&#10;    &lt;/Card&gt;&#10;  );&#10;};&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/contexts/ToastContext.tsx">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/contexts/ToastContext.tsx" />
              <option name="originalContent" value="'use client';&#10;&#10;import React, { createContext, useContext, useState, useCallback } from 'react';&#10;&#10;export type ToastType = 'success' | 'error' | 'warning' | 'info';&#10;&#10;export interface Toast {&#10;  id: string;&#10;  message: string;&#10;  type: ToastType;&#10;  duration?: number;&#10;}&#10;&#10;interface ToastContextType {&#10;  showToast: (message: string, type?: ToastType, duration?: number) =&gt; void;&#10;  toasts: Toast[];&#10;  removeToast: (id: string) =&gt; void;&#10;}&#10;&#10;const ToastContext = createContext&lt;ToastContextType | undefined&gt;(undefined);&#10;&#10;export const useToastContext = () =&gt; {&#10;  const context = useContext(ToastContext);&#10;  if (!context) {&#10;    throw new Error('useToastContext must be used within a ToastProvider');&#10;  }&#10;  return context;&#10;};&#10;&#10;interface ToastProviderProps {&#10;  children: React.ReactNode;&#10;}&#10;&#10;export function ToastProvider({ children }: ToastProviderProps) {&#10;  const [toasts, setToasts] = useState&lt;Toast[]&gt;([]);&#10;&#10;  const showToast = useCallback((message: string, type: ToastType = 'info', duration = 5000) =&gt; {&#10;    const id = Math.random().toString(36).substr(2, 9);&#10;    const toast: Toast = { id, message, type, duration };&#10;&#10;    setToasts(prev =&gt; [...prev, toast]);&#10;&#10;    if (duration &gt; 0) {&#10;      setTimeout(() =&gt; {&#10;        setToasts(prev =&gt; prev.filter(t =&gt; t.id !== id));&#10;      }, duration);&#10;    }&#10;  }, []);&#10;&#10;  const removeToast = useCallback((id: string) =&gt; {&#10;    setToasts(prev =&gt; prev.filter(t =&gt; t.id !== id));&#10;  }, []);&#10;&#10;  return (&#10;    &lt;ToastContext.Provider value={{ toasts, showToast, removeToast }}&gt;&#10;      {children}&#10;      &lt;ToastContainer toasts={toasts} onRemove={removeToast} /&gt;&#10;    &lt;/ToastContext.Provider&gt;&#10;  );&#10;}&#10;&#10;interface ToastContainerProps {&#10;  toasts: Toast[];&#10;  onRemove: (id: string) =&gt; void;&#10;}&#10;&#10;function ToastContainer({ toasts, onRemove }: ToastContainerProps) {&#10;  if (toasts.length === 0) return null;&#10;&#10;  return (&#10;    &lt;div className=&quot;fixed top-4 right-4 z-50 space-y-2&quot;&gt;&#10;      {toasts.map((toast) =&gt; (&#10;        &lt;ToastItem key={toast.id} toast={toast} onRemove={onRemove} /&gt;&#10;      ))}&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;&#10;interface ToastItemProps {&#10;  toast: Toast;&#10;  onRemove: (id: string) =&gt; void;&#10;}&#10;&#10;function ToastItem({ toast, onRemove }: ToastItemProps) {&#10;  const getToastStyles = () =&gt; {&#10;    const baseStyles = &quot;px-4 py-3 rounded-lg shadow-lg border-l-4 min-w-[300px] max-w-md&quot;;&#10;&#10;    switch (toast.type) {&#10;      case 'success':&#10;        return `${baseStyles} bg-green-50 border-green-500 text-green-800`;&#10;      case 'error':&#10;        return `${baseStyles} bg-red-50 border-red-500 text-red-800`;&#10;      case 'warning':&#10;        return `${baseStyles} bg-yellow-50 border-yellow-500 text-yellow-800`;&#10;      case 'info':&#10;      default:&#10;        return `${baseStyles} bg-blue-50 border-blue-500 text-blue-800`;&#10;    }&#10;  };&#10;&#10;  const getIcon = () =&gt; {&#10;    switch (toast.type) {&#10;      case 'success':&#10;        return '✓';&#10;      case 'error':&#10;        return '✕';&#10;      case 'warning':&#10;        return '⚠';&#10;      case 'info':&#10;      default:&#10;        return 'ℹ';&#10;    }&#10;  };&#10;&#10;  return (&#10;    &lt;div className={`${getToastStyles()} animate-slide-in-right`}&gt;&#10;      &lt;div className=&quot;flex items-center justify-between&quot;&gt;&#10;        &lt;div className=&quot;flex items-center&quot;&gt;&#10;          &lt;span className=&quot;text-lg mr-3&quot;&gt;{getIcon()}&lt;/span&gt;&#10;          &lt;span className=&quot;text-sm font-medium&quot;&gt;{toast.message}&lt;/span&gt;&#10;        &lt;/div&gt;&#10;        &lt;button&#10;          onClick={() =&gt; onRemove(toast.id)}&#10;          className=&quot;ml-4 text-gray-400 hover:text-gray-600&quot;&#10;        &gt;&#10;          ✕&#10;        &lt;/button&gt;&#10;      &lt;/div&gt;&#10;    &lt;/div&gt;&#10;  );&#10;}&#10;" />
              <option name="updatedContent" value="'use client';&#13;&#10;&#13;&#10;import React, { createContext, useContext, useState, useCallback } from 'react';&#13;&#10;import { t } from '@/utils/localization';&#13;&#10;import { CheckCircleIcon, ExclamationTriangleIcon, InformationCircleIcon, XCircleIcon, XMarkIcon } from '@heroicons/react/24/outline';&#13;&#10;&#13;&#10;export type ToastType = 'success' | 'error' | 'warning' | 'info';&#13;&#10;&#13;&#10;export interface Toast {&#13;&#10;  id: string;&#13;&#10;  message: string;&#13;&#10;  type: ToastType;&#13;&#10;  duration?: number;&#13;&#10;  action?: {&#13;&#10;    label: string;&#13;&#10;    onClick: () =&gt; void;&#13;&#10;  };&#13;&#10;}&#13;&#10;&#13;&#10;interface ToastContextType {&#13;&#10;  showToast: (message: string, type?: ToastType, duration?: number, action?: Toast['action']) =&gt; void;&#13;&#10;  showSuccess: (message: string, duration?: number) =&gt; void;&#13;&#10;  showError: (message: string, duration?: number) =&gt; void;&#13;&#10;  showWarning: (message: string, duration?: number) =&gt; void;&#13;&#10;  showInfo: (message: string, duration?: number) =&gt; void;&#13;&#10;  toasts: Toast[];&#13;&#10;  removeToast: (id: string) =&gt; void;&#13;&#10;  clearAll: () =&gt; void;&#13;&#10;}&#13;&#10;&#13;&#10;const ToastContext = createContext&lt;ToastContextType | undefined&gt;(undefined);&#13;&#10;&#13;&#10;export const useToastContext = () =&gt; {&#13;&#10;  const context = useContext(ToastContext);&#13;&#10;  if (!context) {&#13;&#10;    throw new Error('useToastContext must be used within a ToastProvider');&#13;&#10;  }&#13;&#10;  return context;&#13;&#10;};&#13;&#10;&#13;&#10;interface ToastProviderProps {&#13;&#10;  children: React.ReactNode;&#13;&#10;}&#13;&#10;&#13;&#10;export function ToastProvider({ children }: ToastProviderProps) {&#13;&#10;  const [toasts, setToasts] = useState&lt;Toast[]&gt;([]);&#13;&#10;&#13;&#10;  const showToast = useCallback((&#13;&#10;    message: string, &#13;&#10;    type: ToastType = 'info', &#13;&#10;    duration = 5000,&#13;&#10;    action?: Toast['action']&#13;&#10;  ) =&gt; {&#13;&#10;    const id = Math.random().toString(36).substr(2, 9);&#13;&#10;    const toast: Toast = { id, message, type, duration, action };&#13;&#10;&#13;&#10;    setToasts(prev =&gt; [...prev, toast]);&#13;&#10;&#13;&#10;    if (duration &gt; 0) {&#13;&#10;      setTimeout(() =&gt; {&#13;&#10;        setToasts(prev =&gt; prev.filter(t =&gt; t.id !== id));&#13;&#10;      }, duration);&#13;&#10;    }&#13;&#10;  }, []);&#13;&#10;&#13;&#10;  const showSuccess = useCallback((message: string, duration = 4000) =&gt; {&#13;&#10;    showToast(message, 'success', duration);&#13;&#10;  }, [showToast]);&#13;&#10;&#13;&#10;  const showError = useCallback((message: string, duration = 6000) =&gt; {&#13;&#10;    showToast(message, 'error', duration);&#13;&#10;  }, [showToast]);&#13;&#10;&#13;&#10;  const showWarning = useCallback((message: string, duration = 5000) =&gt; {&#13;&#10;    showToast(message, 'warning', duration);&#13;&#10;  }, [showToast]);&#13;&#10;&#13;&#10;  const showInfo = useCallback((message: string, duration = 4000) =&gt; {&#13;&#10;    showToast(message, 'info', duration);&#13;&#10;  }, [showToast]);&#13;&#10;&#13;&#10;  const removeToast = useCallback((id: string) =&gt; {&#13;&#10;    setToasts(prev =&gt; prev.filter(t =&gt; t.id !== id));&#13;&#10;  }, []);&#13;&#10;&#13;&#10;  const clearAll = useCallback(() =&gt; {&#13;&#10;    setToasts([]);&#13;&#10;  }, []);&#13;&#10;&#13;&#10;  const getToastIcon = (type: ToastType) =&gt; {&#13;&#10;    switch (type) {&#13;&#10;      case 'success':&#13;&#10;        return &lt;CheckCircleIcon className=&quot;h-5 w-5 text-green-600&quot; /&gt;;&#13;&#10;      case 'error':&#13;&#10;        return &lt;XCircleIcon className=&quot;h-5 w-5 text-red-600&quot; /&gt;;&#13;&#10;      case 'warning':&#13;&#10;        return &lt;ExclamationTriangleIcon className=&quot;h-5 w-5 text-yellow-600&quot; /&gt;;&#13;&#10;      case 'info':&#13;&#10;        return &lt;InformationCircleIcon className=&quot;h-5 w-5 text-blue-600&quot; /&gt;;&#13;&#10;      default:&#13;&#10;        return &lt;InformationCircleIcon className=&quot;h-5 w-5 text-gray-600&quot; /&gt;;&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  const getToastStyles = (type: ToastType) =&gt; {&#13;&#10;    switch (type) {&#13;&#10;      case 'success':&#13;&#10;        return 'bg-green-50 border-green-200 text-green-800';&#13;&#10;      case 'error':&#13;&#10;        return 'bg-red-50 border-red-200 text-red-800';&#13;&#10;      case 'warning':&#13;&#10;        return 'bg-yellow-50 border-yellow-200 text-yellow-800';&#13;&#10;      case 'info':&#13;&#10;        return 'bg-blue-50 border-blue-200 text-blue-800';&#13;&#10;      default:&#13;&#10;        return 'bg-gray-50 border-gray-200 text-gray-800';&#13;&#10;    }&#13;&#10;  };&#13;&#10;&#13;&#10;  const contextValue: ToastContextType = {&#13;&#10;    showToast,&#13;&#10;    showSuccess,&#13;&#10;    showError,&#13;&#10;    showWarning,&#13;&#10;    showInfo,&#13;&#10;    toasts,&#13;&#10;    removeToast,&#13;&#10;    clearAll,&#13;&#10;  };&#13;&#10;&#13;&#10;  return (&#13;&#10;    &lt;ToastContext.Provider value={contextValue}&gt;&#13;&#10;      {children}&#13;&#10;      &#13;&#10;      {/* Toast Container */}&#13;&#10;      {toasts.length &gt; 0 &amp;&amp; (&#13;&#10;        &lt;div className=&quot;fixed top-4 right-4 z-50 space-y-3 max-w-sm w-full&quot;&gt;&#13;&#10;          {toasts.map((toast) =&gt; (&#13;&#10;            &lt;div&#13;&#10;              key={toast.id}&#13;&#10;              className={`&#13;&#10;                flex items-start p-4 rounded-lg border shadow-lg backdrop-blur-sm&#13;&#10;                ${getToastStyles(toast.type)}&#13;&#10;                animate-slide-in-right transform transition-all duration-300 ease-out&#13;&#10;              `}&#13;&#10;            &gt;&#13;&#10;              &lt;div className=&quot;flex-shrink-0 mr-3 mt-0.5&quot;&gt;&#13;&#10;                {getToastIcon(toast.type)}&#13;&#10;              &lt;/div&gt;&#13;&#10;              &#13;&#10;              &lt;div className=&quot;flex-1 min-w-0&quot;&gt;&#13;&#10;                &lt;p className=&quot;text-sm font-medium vietnamese-text leading-relaxed&quot;&gt;&#13;&#10;                  {toast.message}&#13;&#10;                &lt;/p&gt;&#13;&#10;                &#13;&#10;                {toast.action &amp;&amp; (&#13;&#10;                  &lt;button&#13;&#10;                    onClick={toast.action.onClick}&#13;&#10;                    className=&quot;mt-2 text-xs font-medium underline hover:no-underline transition-all duration-200&quot;&#13;&#10;                  &gt;&#13;&#10;                    {toast.action.label}&#13;&#10;                  &lt;/button&gt;&#13;&#10;                )}&#13;&#10;              &lt;/div&gt;&#13;&#10;              &#13;&#10;              &lt;button&#13;&#10;                onClick={() =&gt; removeToast(toast.id)}&#13;&#10;                className=&quot;flex-shrink-0 ml-2 p-1 rounded-full hover:bg-black hover:bg-opacity-10 transition-colors duration-200&quot;&#13;&#10;                aria-label={t('actions.close')}&#13;&#10;              &gt;&#13;&#10;                &lt;XMarkIcon className=&quot;h-4 w-4&quot; /&gt;&#13;&#10;              &lt;/button&gt;&#13;&#10;            &lt;/div&gt;&#13;&#10;          ))}&#13;&#10;          &#13;&#10;          {toasts.length &gt; 1 &amp;&amp; (&#13;&#10;            &lt;button&#13;&#10;              onClick={clearAll}&#13;&#10;              className=&quot;w-full text-center py-2 px-4 text-xs text-gray-600 hover:text-gray-800 bg-white bg-opacity-80 rounded-lg shadow-sm backdrop-blur-sm border border-gray-200 hover:bg-opacity-100 transition-all duration-200&quot;&#13;&#10;            &gt;&#13;&#10;              Xóa tất cả thông báo ({toasts.length})&#13;&#10;            &lt;/button&gt;&#13;&#10;          )}&#13;&#10;        &lt;/div&gt;&#13;&#10;      )}&#13;&#10;    &lt;/ToastContext.Provider&gt;&#13;&#10;  );&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/lib/locales/vi.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/lib/locales/vi.ts" />
              <option name="updatedContent" value="// Vietnamese localization constants&#10;export const VI_LOCALE = {&#10;  // Common actions&#10;  actions: {&#10;    save: 'Lưu',&#10;    cancel: 'Hủy',&#10;    delete: 'Xóa',&#10;    edit: 'Chỉnh sửa',&#10;    submit: 'Gửi',&#10;    confirm: 'Xác nhận',&#10;    back: 'Quay lại',&#10;    next: 'Tiếp theo',&#10;    loading: 'Đang tải...',&#10;    retry: 'Thử lại',&#10;    close: 'Đóng',&#10;    open: 'Mở',&#10;    view: 'Xem',&#10;    share: 'Chia sẻ',&#10;    copy: 'Sao chép',&#10;    download: 'Tải xuống',&#10;    upload: 'Tải lên',&#10;    search: 'Tìm kiếm',&#10;    filter: 'Lọc',&#10;    sort: 'Sắp xếp',&#10;    refresh: 'Làm mới'&#10;  },&#10;&#10;  // Authentication&#10;  auth: {&#10;    login: 'Đăng nhập',&#10;    logout: 'Đăng xuất',&#10;    register: 'Đăng ký',&#10;    forgotPassword: 'Quên mật khẩu',&#10;    resetPassword: 'Đặt lại mật khẩu',&#10;    changePassword: 'Đổi mật khẩu',&#10;    verifyEmail: 'Xác thực email',&#10;    resendVerification: 'Gửi lại mã xác thực'&#10;  },&#10;&#10;  // Posts&#10;  posts: {&#10;    createPost: 'Tạo bài viết',&#10;    editPost: 'Chỉnh sửa bài viết',&#10;    deletePost: 'Xóa bài viết',&#10;    sharePost: 'Chia sẻ bài viết',&#10;    likePost: 'Thích bài viết',&#10;    unlikePost: 'Bỏ thích',&#10;    bookmarkPost: 'Lưu bài viết',&#10;    removeBookmark: 'Bỏ lưu',&#10;    commentPost: 'Bình luận',&#10;    viewComments: 'Xem bình luận',&#10;    hideComments: 'Ẩn bình luận',&#10;    writeComment: 'Viết bình luận...',&#10;    replyComment: 'Trả lời',&#10;    postTitle: 'Tiêu đề bài viết',&#10;    postContent: 'Nội dung bài viết',&#10;    addMedia: 'Thêm ảnh/video',&#10;    addTag: 'Thêm thẻ',&#10;    selectCategory: 'Chọn danh mục',&#10;    noPostsFound: 'Không tìm thấy bài viết nào',&#10;    loadMorePosts: 'Tải thêm bài viết'&#10;  },&#10;&#10;  // User profile&#10;  profile: {&#10;    profile: 'Hồ sơ',&#10;    editProfile: 'Chỉnh sửa hồ sơ',&#10;    viewProfile: 'Xem hồ sơ',&#10;    fullName: 'Họ và tên',&#10;    email: 'Email',&#10;    username: 'Tên đăng nhập',&#10;    bio: 'Giới thiệu',&#10;    avatar: 'Ảnh đại diện',&#10;    coverPhoto: 'Ảnh bìa',&#10;    birthday: 'Ngày sinh',&#10;    gender: 'Giới tính',&#10;    faculty: 'Khoa',&#10;    major: 'Ngành học',&#10;    studentId: 'Mã số sinh viên',&#10;    academicYear: 'Niên khóa',&#10;    phone: 'Số điện thoại',&#10;    address: 'Địa chỉ'&#10;  },&#10;&#10;  // Messages and notifications&#10;  messages: {&#10;    success: {&#10;      loginSuccess: 'Đăng nhập thành công',&#10;      logoutSuccess: 'Đăng xuất thành công',&#10;      registrationSuccess: 'Đăng ký thành công',&#10;      profileUpdated: 'Cập nhật hồ sơ thành công',&#10;      postCreated: 'Tạo bài viết thành công',&#10;      postUpdated: 'Cập nhật bài viết thành công',&#10;      postDeleted: 'Xóa bài viết thành công',&#10;      commentAdded: 'Thêm bình luận thành công',&#10;      passwordChanged: 'Đổi mật khẩu thành công',&#10;      emailVerified: 'Xác thực email thành công'&#10;    },&#10;    error: {&#10;      genericError: 'Đã xảy ra lỗi. Vui lòng thử lại.',&#10;      networkError: 'Lỗi kết nối mạng. Vui lòng kiểm tra kết nối internet.',&#10;      unauthorized: 'Bạn không có quyền truy cập.',&#10;      forbidden: 'Truy cập bị từ chối.',&#10;      notFound: 'Không tìm thấy tài nguyên.',&#10;      serverError: 'Lỗi máy chủ. Vui lòng thử lại sau.',&#10;      validationError: 'Dữ liệu không hợp lệ.',&#10;      loginFailed: 'Đăng nhập thất bại',&#10;      registrationFailed: 'Đăng ký thất bại',&#10;      uploadFailed: 'Tải file thất bại',&#10;      securityError: 'Xác thực bảo mật thất bại. Vui lòng thử lại.'&#10;    },&#10;    validation: {&#10;      required: 'Trường này là bắt buộc',&#10;      invalidEmail: 'Email không hợp lệ',&#10;      invalidPassword: 'Mật khẩu không hợp lệ',&#10;      passwordMismatch: 'Mật khẩu xác nhận không khớp',&#10;      minLength: 'Tối thiểu {min} ký tự',&#10;      maxLength: 'Tối đa {max} ký tự',&#10;      invalidFormat: 'Định dạng không hợp lệ'&#10;    }&#10;  },&#10;&#10;  // Time formatting&#10;  time: {&#10;    now: 'Vừa xong',&#10;    minutesAgo: '{count} phút trước',&#10;    hoursAgo: '{count} giờ trước',&#10;    daysAgo: '{count} ngày trước',&#10;    weeksAgo: '{count} tuần trước',&#10;    monthsAgo: '{count} tháng trước',&#10;    yearsAgo: '{count} năm trước'&#10;  },&#10;&#10;  // File upload&#10;  upload: {&#10;    selectFiles: 'Chọn tệp',&#10;    dragAndDrop: 'Kéo thả tệp vào đây',&#10;    maxFileSize: 'Kích thước tệp tối đa: {size}MB',&#10;    supportedFormats: 'Định dạng hỗ trợ: {formats}',&#10;    uploadProgress: 'Đang tải lên... {progress}%',&#10;    uploadComplete: 'Tải lên hoàn tất',&#10;    uploadFailed: 'Tải lên thất bại'&#10;  },&#10;&#10;  // Search and filters&#10;  search: {&#10;    searchPlaceholder: 'Tìm kiếm...',&#10;    noResults: 'Không tìm thấy kết quả',&#10;    searchResults: 'Kết quả tìm kiếm',&#10;    filters: 'Bộ lọc',&#10;    sortBy: 'Sắp xếp theo',&#10;    sortNewest: 'Mới nhất',&#10;    sortOldest: 'Cũ nhất',&#10;    sortMostLiked: 'Nhiều lượt thích nhất',&#10;    sortMostViewed: 'Nhiều lượt xem nhất'&#10;  },&#10;&#10;  // Categories&#10;  categories: {&#10;    academic: 'Học tập',&#10;    social: 'Sinh hoạt',&#10;    announcement: 'Thông báo',&#10;    career: 'Nghề nghiệp',&#10;    technology: 'Công nghệ',&#10;    sports: 'Thể thao',&#10;    entertainment: 'Giải trí',&#10;    other: 'Khác'&#10;  }&#10;} as const;&#10;&#10;export type LocaleKey = keyof typeof VI_LOCALE;&#10;export type LocaleValue = typeof VI_LOCALE[LocaleKey];" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/shared/services/post.service.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/shared/services/post.service.ts" />
              <option name="originalContent" value="import { apiClient } from '@/shared/config/api-client';&#10;import { API_ENDPOINTS } from '@/shared/constants';&#10;import { createApiUrl } from '@/shared/utils';&#10;import {&#10;  Post,&#10;  Comment,&#10;  CreatePostRequest,&#10;  UpdatePostRequest,&#10;  CreateCommentRequest,&#10;  UpdateCommentRequest,&#10;  PaginatedResponse,&#10;  ApiResponse,&#10;  PostVisibility,&#10;} from '@/shared/types';&#10;&#10;/**&#10; * Post Service&#10; * Handles all post-related API calls&#10; * Handles all post-related API calls&#10; */&#10;export class PostService {&#10;   * Create new post&#10;   * Create new post&#10;    const formData = new FormData();&#10;    formData.append('content', postData.content);&#10;&#10;    if (postData.visibility) {&#10;      formData.append('visibility', postData.visibility);&#10;    }&#10;    formData.append('content', postData.content);&#10;    if (postData.tags) {&#10;      postData.tags.forEach(tag =&gt; formData.append('tags', tag));&#10;    }&#10;&#10;    if (postData.images) {&#10;      postData.images.forEach(image =&gt; formData.append('images', image));&#10;    }&#10;&#10;    return apiClient.post&lt;Post&gt;(API_ENDPOINTS.POSTS.BASE, formData, {&#10;      headers: {&#10;        'Content-Type': 'multipart/form-data',&#10;      },&#10;    });&#10;      postData.tags.forEach(tag =&gt; formData.append('tags', tag));&#10;    }&#10;&#10;    if (postData.images) {&#10;      postData.images.forEach(image =&gt; formData.append('images', image));&#10;    }&#10;&#10;    return apiClient.post&lt;Post&gt;(API_ENDPOINTS.POSTS.BASE, formData, {&#10;      headers: {&#10;        'Content-Type': 'multipart/form-data',&#10;      },&#10;    });&#10;  }&#10;&#10;  /**&#10;   * Get posts feed&#10;   */&#10;  async getPosts(page = 0, size = 10): Promise&lt;PaginatedResponse&lt;Post&gt;&gt; {&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.BASE, undefined, { page, size });&#10;    return apiClient.get&lt;PaginatedResponse&lt;Post&gt;&gt;(url);&#10;  }&#10;&#10;  /**&#10;   * Get single post by ID&#10;   */&#10;  async getPost(postId: string): Promise&lt;Post&gt; {&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.BASE + '/:id', { id: postId });&#10;    return apiClient.get&lt;Post&gt;(url);&#10;  }&#10;&#10;  /**&#10;   * Get posts by user&#10;   */&#10;  async getUserPosts(&#10;    userId: string,&#10;    page = 0,&#10;    size = 10&#10;  ): Promise&lt;PaginatedResponse&lt;Post&gt;&gt; {&#10;    const url = createApiUrl(&#10;      API_ENDPOINTS.POSTS.BY_USER,&#10;      { id: userId },&#10;      { page, size }&#10;    );&#10;    return apiClient.get&lt;PaginatedResponse&lt;Post&gt;&gt;(url);&#10;  }&#10;&#10;  /**&#10;   * Update post&#10;   */&#10;  async updatePost(postId: string, updateData: UpdatePostRequest): Promise&lt;Post&gt; {&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.BASE + '/:id', { id: postId });&#10;    return apiClient.put&lt;Post&gt;(url, updateData);&#10;  }&#10;&#10;  /**&#10;   * Delete post&#10;   */&#10;  async deletePost(postId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.BASE + '/:id', { id: postId });&#10;    return apiClient.delete&lt;ApiResponse&lt;null&gt;&gt;(url);&#10;  }&#10;&#10;  /**&#10;   * Like post&#10;   */&#10;  async likePost(postId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.LIKE, { id: postId });&#10;    return apiClient.post&lt;ApiResponse&lt;null&gt;&gt;(url);&#10;  }&#10;&#10;  /**&#10;   * Unlike post&#10;   */&#10;  async unlikePost(postId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.LIKE, { id: postId });&#10;    return apiClient.delete&lt;ApiResponse&lt;null&gt;&gt;(url);&#10;  }&#10;&#10;  /**&#10;   * Get post comments&#10;   */&#10;  async getComments(&#10;    postId: string,&#10;    page = 0,&#10;    size = 10&#10;  ): Promise&lt;PaginatedResponse&lt;Comment&gt;&gt; {&#10;    const url = createApiUrl(&#10;      API_ENDPOINTS.POSTS.COMMENTS,&#10;      { id: postId },&#10;      { page, size }&#10;    );&#10;    return apiClient.get&lt;PaginatedResponse&lt;Comment&gt;&gt;(url);&#10;  }&#10;&#10;  /**&#10;   * Create comment&#10;   */&#10;  async createComment(commentData: CreateCommentRequest): Promise&lt;Comment&gt; {&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.COMMENTS, { id: commentData.postId });&#10;    return apiClient.post&lt;Comment&gt;(url, {&#10;      content: commentData.content,&#10;      parentId: commentData.parentId,&#10;    });&#10;  }&#10;&#10;  /**&#10;   * Update comment&#10;   */&#10;  async updateComment(&#10;    commentId: string,&#10;    updateData: UpdateCommentRequest&#10;  ): Promise&lt;Comment&gt; {&#10;    const url = createApiUrl('/comments/:id', { id: commentId });&#10;    return apiClient.put&lt;Comment&gt;(url, updateData);&#10;  }&#10;&#10;  /**&#10;   * Delete comment&#10;   */&#10;  async deleteComment(commentId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#10;    const url = createApiUrl('/comments/:id', { id: commentId });&#10;    return apiClient.delete&lt;ApiResponse&lt;null&gt;&gt;(url);&#10;  }&#10;&#10;  /**&#10;   * Like comment&#10;   */&#10;  async likeComment(commentId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.COMMENT_LIKE, { id: commentId });&#10;    return apiClient.post&lt;ApiResponse&lt;null&gt;&gt;(url);&#10;  }&#10;&#10;  /**&#10;   * Unlike comment&#10;   */&#10;  async unlikeComment(commentId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.COMMENT_LIKE, { id: commentId });&#10;    return apiClient.delete&lt;ApiResponse&lt;null&gt;&gt;(url);&#10;  }&#10;&#10;  /**&#10;   * Share post&#10;   */&#10;  async sharePost(postId: string, content?: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#10;    const url = createApiUrl('/posts/:id/share', { id: postId });&#10;    return apiClient.post&lt;ApiResponse&lt;null&gt;&gt;(url, { content });&#10;  }&#10;&#10;  /**&#10;   * Bookmark post&#10;   */&#10;  async bookmarkPost(postId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#10;    const url = createApiUrl('/posts/:id/bookmark', { id: postId });&#10;    return apiClient.post&lt;ApiResponse&lt;null&gt;&gt;(url);&#10;  }&#10;&#10;  /**&#10;   * Remove bookmark&#10;   */&#10;  async removeBookmark(postId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#10;    const url = createApiUrl('/posts/:id/bookmark', { id: postId });&#10;    return apiClient.delete&lt;ApiResponse&lt;null&gt;&gt;(url);&#10;  }&#10;}&#10;&#10;// Export singleton instance&#10;export const postService = new PostService();&#10;" />
              <option name="updatedContent" value="import { apiClient } from '@/shared/config/api-client';&#13;&#10;import { API_ENDPOINTS } from '@/shared/constants';&#13;&#10;import { createApiUrl } from '@/shared/utils';&#13;&#10;import {&#13;&#10;  Post,&#13;&#10;  Comment,&#13;&#10;  CreatePostRequest,&#13;&#10;  UpdatePostRequest,&#13;&#10;  CreateCommentRequest,&#13;&#10;  UpdateCommentRequest,&#13;&#10;  PaginatedResponse,&#13;&#10;  ApiResponse,&#13;&#10;  PostVisibility,&#13;&#10;} from '@/shared/types';&#13;&#10;&#13;&#10;/**&#13;&#10; * Post Service - Updated to sync with backend APIs&#13;&#10; */&#13;&#10;export class PostService {&#13;&#10;  /**&#13;&#10;   * Create new post - Updated to match EnhancedPostController&#13;&#10;   */&#13;&#10;  async createPost(postData: CreatePostRequest): Promise&lt;Post&gt; {&#13;&#10;    // Use JSON instead of FormData to match EnhancedPostController&#13;&#10;    return apiClient.post&lt;Post&gt;(API_ENDPOINTS.POSTS.BASE, postData);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Get personalized feed - Updated to match backend&#13;&#10;   */&#13;&#10;  async getPersonalizedFeed(page = 0, size = 10): Promise&lt;Post[]&gt; {&#13;&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.FEED, undefined, { page, size });&#13;&#10;    return apiClient.get&lt;Post[]&gt;(url);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Get posts feed&#13;&#10;   */&#13;&#10;  async getPosts(page = 0, size = 10): Promise&lt;PaginatedResponse&lt;Post&gt;&gt; {&#13;&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.BASE, undefined, { page, size });&#13;&#10;    return apiClient.get&lt;PaginatedResponse&lt;Post&gt;&gt;(url);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Get single post by ID&#13;&#10;   */&#13;&#10;  async getPost(postId: string): Promise&lt;Post&gt; {&#13;&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.BASE + '/:id', { id: postId });&#13;&#10;    return apiClient.get&lt;Post&gt;(url);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Get posts by user&#13;&#10;   */&#13;&#10;  async getUserPosts(&#13;&#10;    userId: string,&#13;&#10;    page = 0,&#13;&#10;    size = 10&#13;&#10;  ): Promise&lt;PaginatedResponse&lt;Post&gt;&gt; {&#13;&#10;    const url = createApiUrl(&#13;&#10;      API_ENDPOINTS.POSTS.BY_USER,&#13;&#10;      { id: userId },&#13;&#10;      { page, size }&#13;&#10;    );&#13;&#10;    return apiClient.get&lt;PaginatedResponse&lt;Post&gt;&gt;(url);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Update post&#13;&#10;   */&#13;&#10;  async updatePost(postId: string, updateData: UpdatePostRequest): Promise&lt;Post&gt; {&#13;&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.BASE + '/:id', { id: postId });&#13;&#10;    return apiClient.put&lt;Post&gt;(url, updateData);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Delete post&#13;&#10;   */&#13;&#10;  async deletePost(postId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#13;&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.BASE + '/:id', { id: postId });&#13;&#10;    return apiClient.delete&lt;ApiResponse&lt;null&gt;&gt;(url);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Like post&#13;&#10;   */&#13;&#10;  async likePost(postId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#13;&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.LIKE, { id: postId });&#13;&#10;    return apiClient.post&lt;ApiResponse&lt;null&gt;&gt;(url);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Unlike post&#13;&#10;   */&#13;&#10;  async unlikePost(postId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#13;&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.LIKE, { id: postId });&#13;&#10;    return apiClient.delete&lt;ApiResponse&lt;null&gt;&gt;(url);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Get post comments&#13;&#10;   */&#13;&#10;  async getComments(&#13;&#10;    postId: string,&#13;&#10;    page = 0,&#13;&#10;    size = 10&#13;&#10;  ): Promise&lt;PaginatedResponse&lt;Comment&gt;&gt; {&#13;&#10;    const url = createApiUrl(&#13;&#10;      API_ENDPOINTS.POSTS.COMMENTS,&#13;&#10;      { id: postId },&#13;&#10;      { page, size }&#13;&#10;    );&#13;&#10;    return apiClient.get&lt;PaginatedResponse&lt;Comment&gt;&gt;(url);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Create comment&#13;&#10;   */&#13;&#10;  async createComment(commentData: CreateCommentRequest): Promise&lt;Comment&gt; {&#13;&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.COMMENTS, { id: commentData.postId });&#13;&#10;    return apiClient.post&lt;Comment&gt;(url, {&#13;&#10;      content: commentData.content,&#13;&#10;      parentId: commentData.parentId,&#13;&#10;    });&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Update comment&#13;&#10;   */&#13;&#10;  async updateComment(&#13;&#10;    commentId: string,&#13;&#10;    updateData: UpdateCommentRequest&#13;&#10;  ): Promise&lt;Comment&gt; {&#13;&#10;    const url = createApiUrl('/comments/:id', { id: commentId });&#13;&#10;    return apiClient.put&lt;Comment&gt;(url, updateData);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Delete comment&#13;&#10;   */&#13;&#10;  async deleteComment(commentId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#13;&#10;    const url = createApiUrl('/comments/:id', { id: commentId });&#13;&#10;    return apiClient.delete&lt;ApiResponse&lt;null&gt;&gt;(url);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Like comment&#13;&#10;   */&#13;&#10;  async likeComment(commentId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#13;&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.COMMENT_LIKE, { id: commentId });&#13;&#10;    return apiClient.post&lt;ApiResponse&lt;null&gt;&gt;(url);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Unlike comment&#13;&#10;   */&#13;&#10;  async unlikeComment(commentId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#13;&#10;    const url = createApiUrl(API_ENDPOINTS.POSTS.COMMENT_LIKE, { id: commentId });&#13;&#10;    return apiClient.delete&lt;ApiResponse&lt;null&gt;&gt;(url);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Share post&#13;&#10;   */&#13;&#10;  async sharePost(postId: string, content?: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#13;&#10;    const url = createApiUrl('/posts/:id/share', { id: postId });&#13;&#10;    return apiClient.post&lt;ApiResponse&lt;null&gt;&gt;(url, { content });&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Bookmark post&#13;&#10;   */&#13;&#10;  async bookmarkPost(postId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#13;&#10;    const url = createApiUrl('/posts/:id/bookmark', { id: postId });&#13;&#10;    return apiClient.post&lt;ApiResponse&lt;null&gt;&gt;(url);&#13;&#10;  }&#13;&#10;&#13;&#10;  /**&#13;&#10;   * Remove bookmark&#13;&#10;   */&#13;&#10;  async removeBookmark(postId: string): Promise&lt;ApiResponse&lt;null&gt;&gt; {&#13;&#10;    const url = createApiUrl('/posts/:id/bookmark', { id: postId });&#13;&#10;    return apiClient.delete&lt;ApiResponse&lt;null&gt;&gt;(url);&#13;&#10;  }&#13;&#10;}&#13;&#10;&#13;&#10;// Export singleton instance&#13;&#10;export const postService = new PostService();" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/client-frontend/src/utils/localization.ts">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/client-frontend/src/utils/localization.ts" />
              <option name="updatedContent" value="import { VI_LOCALE } from '@/lib/locales/vi';&#10;&#10;/**&#10; * Get localized text with parameter substitution&#10; * @param key - The key path to the localized text (e.g., 'actions.save', 'messages.error.loginFailed')&#10; * @param params - Parameters to substitute in the text&#10; * @returns Localized text string&#10; */&#10;export function t(key: string, params?: Record&lt;string, string | number&gt;): string {&#10;  const keys = key.split('.');&#10;  let value: any = VI_LOCALE;&#10;&#10;  for (const k of keys) {&#10;    if (value &amp;&amp; typeof value === 'object' &amp;&amp; k in value) {&#10;      value = value[k];&#10;    } else {&#10;      console.warn(`Translation key not found: ${key}`);&#10;      return key;&#10;    }&#10;  }&#10;&#10;  if (typeof value !== 'string') {&#10;    console.warn(`Translation value is not a string: ${key}`);&#10;    return key;&#10;  }&#10;&#10;  // Replace parameters in the text&#10;  if (params) {&#10;    return value.replace(/\{(\w+)\}/g, (match, paramKey) =&gt; {&#10;      return params[paramKey]?.toString() || match;&#10;    });&#10;  }&#10;&#10;  return value;&#10;}&#10;&#10;/**&#10; * Format time relative to now in Vietnamese&#10; * @param date - The date to format&#10; * @returns Formatted time string in Vietnamese&#10; */&#10;export function formatTimeAgo(date: Date | string): string {&#10;  const now = new Date();&#10;  const targetDate = new Date(date);&#10;  const diffInSeconds = Math.floor((now.getTime() - targetDate.getTime()) / 1000);&#10;&#10;  if (diffInSeconds &lt; 60) {&#10;    return t('time.now');&#10;  } else if (diffInSeconds &lt; 3600) {&#10;    const minutes = Math.floor(diffInSeconds / 60);&#10;    return t('time.minutesAgo', { count: minutes.toString() });&#10;  } else if (diffInSeconds &lt; 86400) {&#10;    const hours = Math.floor(diffInSeconds / 3600);&#10;    return t('time.hoursAgo', { count: hours.toString() });&#10;  } else if (diffInSeconds &lt; 604800) {&#10;    const days = Math.floor(diffInSeconds / 86400);&#10;    return t('time.daysAgo', { count: days.toString() });&#10;  } else if (diffInSeconds &lt; 2592000) {&#10;    const weeks = Math.floor(diffInSeconds / 604800);&#10;    return t('time.weeksAgo', { count: weeks.toString() });&#10;  } else if (diffInSeconds &lt; 31536000) {&#10;    const months = Math.floor(diffInSeconds / 2592000);&#10;    return t('time.monthsAgo', { count: months.toString() });&#10;  } else {&#10;    const years = Math.floor(diffInSeconds / 31536000);&#10;    return t('time.yearsAgo', { count: years.toString() });&#10;  }&#10;}&#10;&#10;/**&#10; * Format file size in Vietnamese&#10; * @param bytes - File size in bytes&#10; * @returns Formatted file size string&#10; */&#10;export function formatFileSize(bytes: number): string {&#10;  if (bytes === 0) return '0 Bytes';&#10;&#10;  const k = 1024;&#10;  const sizes = ['Bytes', 'KB', 'MB', 'GB'];&#10;  const i = Math.floor(Math.log(bytes) / Math.log(k));&#10;&#10;  return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];&#10;}&#10;&#10;/**&#10; * Get category name in Vietnamese&#10; * @param categoryKey - Category key&#10; * @returns Vietnamese category name&#10; */&#10;export function getCategoryName(categoryKey: string): string {&#10;  return t(`categories.${categoryKey}`) || categoryKey;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/PostServiceApplication.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/PostServiceApplication.java" />
              <option name="originalContent" value="package com.ctuconnect;&#10;&#10;import org.springframework.boot.SpringApplication;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#10;import org.springframework.cloud.client.discovery.EnableDiscoveryClient;&#10;import org.springframework.cloud.openfeign.EnableFeignClients;&#10;import org.springframework.kafka.annotation.EnableKafka;&#10;&#10;@SpringBootApplication&#10;@EnableDiscoveryClient&#10;@EnableFeignClients&#10;@EnableKafka&#10;public class PostServiceApplication {&#10;&#10;    public static void main(String[] args) {&#10;        SpringApplication.run(PostServiceApplication.class, args);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ctuconnect;&#13;&#10;&#13;&#10;import org.springframework.boot.SpringApplication;&#13;&#10;import org.springframework.boot.autoconfigure.SpringBootApplication;&#13;&#10;import org.springframework.cloud.client.discovery.EnableDiscoveryClient;&#13;&#10;import org.springframework.cloud.openfeign.EnableFeignClients;&#13;&#10;import org.springframework.kafka.annotation.EnableKafka;&#13;&#10;import org.springframework.data.mongodb.config.EnableMongoAuditing;&#13;&#10;&#13;&#10;@SpringBootApplication&#13;&#10;@EnableDiscoveryClient&#13;&#10;@EnableFeignClients&#13;&#10;@EnableKafka&#13;&#10;@EnableMongoAuditing // Enable MongoDB auditing for @CreatedDate and @LastModifiedDate&#13;&#10;public class PostServiceApplication {&#13;&#10;&#13;&#10;    public static void main(String[] args) {&#13;&#10;        SpringApplication.run(PostServiceApplication.class, args);&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/client/MediaServiceClient.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/client/MediaServiceClient.java" />
              <option name="originalContent" value="package com.ctuconnect.client;&#10;&#10;import lombok.Data;&#10;import org.springframework.cloud.openfeign.FeignClient;&#10;import org.springframework.http.MediaType;&#10;import org.springframework.web.bind.annotation.*;&#10;import org.springframework.web.multipart.MultipartFile;&#10;&#10;&#10;@FeignClient(name = &quot;media-service&quot;, url = &quot;${media-service.url:http://localhost:8080}&quot;)&#10;public interface MediaServiceClient {&#10;&#10;    @PostMapping(value = &quot;/api/media/upload&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)&#10;    MediaUploadResponse uploadFile(@RequestPart(&quot;file&quot;) MultipartFile file,&#10;                                  @RequestParam(&quot;type&quot;) String type);&#10;&#10;    @DeleteMapping(&quot;/api/media/{id}&quot;)&#10;    void deleteFile(@PathVariable(&quot;id&quot;) String fileId);&#10;&#10;    @GetMapping(&quot;/api/media/{id}&quot;)&#10;    MediaResponse getFileInfo(@PathVariable(&quot;id&quot;) String fileId);&#10;&#10;    // Response DTOs for media service&#10;    class MediaUploadResponse {&#10;        private String id;&#10;        private String fileName;&#10;        private String fileUrl;&#10;        private String fileType;&#10;        private long fileSize;&#10;&#10;        // Getters and Setters&#10;        public String getId() {&#10;            return id;&#10;        }&#10;&#10;        public void setId(String id) {&#10;            this.id = id;&#10;        }&#10;&#10;        public String getFileName() {&#10;            return fileName;&#10;        }&#10;&#10;        public void setFileName(String fileName) {&#10;            this.fileName = fileName;&#10;        }&#10;&#10;        public String getFileUrl() {&#10;            return fileUrl;&#10;        }&#10;&#10;        public void setFileUrl(String fileUrl) {&#10;            this.fileUrl = fileUrl;&#10;        }&#10;&#10;        public String getFileType() {&#10;            return fileType;&#10;        }&#10;&#10;        public void setFileType(String fileType) {&#10;            this.fileType = fileType;&#10;        }&#10;&#10;        public long getFileSize() {&#10;            return fileSize;&#10;        }&#10;&#10;        public void setFileSize(long fileSize) {&#10;            this.fileSize = fileSize;&#10;        }&#10;    }&#10;&#10;    @Data&#10;    class MediaResponse {&#10;        private String id;&#10;        private String fileName;&#10;        private String fileUrl;&#10;        private String fileType;&#10;        private long fileSize;&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ctuconnect.client;&#13;&#10;&#13;&#10;import lombok.Data;&#13;&#10;import org.springframework.cloud.openfeign.FeignClient;&#13;&#10;import org.springframework.http.MediaType;&#13;&#10;import org.springframework.web.bind.annotation.*;&#13;&#10;import org.springframework.web.multipart.MultipartFile;&#13;&#10;import com.ctuconnect.config.FeignConfig;&#13;&#10;&#13;&#10;@FeignClient(&#13;&#10;    name = &quot;media-service&quot;, &#13;&#10;    url = &quot;${media-service.url}&quot;, &#13;&#10;    configuration = FeignConfig.class&#13;&#10;)&#13;&#10;public interface MediaServiceClient {&#13;&#10;&#13;&#10;    @PostMapping(value = &quot;/api/media/upload&quot;, consumes = MediaType.MULTIPART_FORM_DATA_VALUE)&#13;&#10;    MediaUploadResponse uploadFile(@RequestPart(&quot;file&quot;) MultipartFile file,&#13;&#10;                                  @RequestParam(&quot;type&quot;) String type);&#13;&#10;&#13;&#10;    @DeleteMapping(&quot;/api/media/{id}&quot;)&#13;&#10;    void deleteFile(@PathVariable(&quot;id&quot;) String fileId);&#13;&#10;&#13;&#10;    @GetMapping(&quot;/api/media/{id}&quot;)&#13;&#10;    MediaResponse getFileInfo(@PathVariable(&quot;id&quot;) String fileId);&#13;&#10;&#13;&#10;    // Response DTOs for media service&#13;&#10;    class MediaUploadResponse {&#13;&#10;        private String id;&#13;&#10;        private String fileName;&#13;&#10;        private String fileUrl;&#13;&#10;        private String fileType;&#13;&#10;        private long fileSize;&#13;&#10;&#13;&#10;        // Getters and Setters&#13;&#10;        public String getId() {&#13;&#10;            return id;&#13;&#10;        }&#13;&#10;&#13;&#10;        public void setId(String id) {&#13;&#10;            this.id = id;&#13;&#10;        }&#13;&#10;&#13;&#10;        public String getFileName() {&#13;&#10;            return fileName;&#13;&#10;        }&#13;&#10;&#13;&#10;        public void setFileName(String fileName) {&#13;&#10;            this.fileName = fileName;&#13;&#10;        }&#13;&#10;&#13;&#10;        public String getFileUrl() {&#13;&#10;            return fileUrl;&#13;&#10;        }&#13;&#10;&#13;&#10;        public void setFileUrl(String fileUrl) {&#13;&#10;            this.fileUrl = fileUrl;&#13;&#10;        }&#13;&#10;&#13;&#10;        public String getFileType() {&#13;&#10;            return fileType;&#13;&#10;        }&#13;&#10;&#13;&#10;        public void setFileType(String fileType) {&#13;&#10;            this.fileType = fileType;&#13;&#10;        }&#13;&#10;&#13;&#10;        public long getFileSize() {&#13;&#10;            return fileSize;&#13;&#10;        }&#13;&#10;&#13;&#10;        public void setFileSize(long fileSize) {&#13;&#10;            this.fileSize = fileSize;&#13;&#10;        }&#13;&#10;    }&#13;&#10;&#13;&#10;    @Data&#13;&#10;    class MediaResponse {&#13;&#10;        private String id;&#13;&#10;        private String fileName;&#13;&#10;        private String fileUrl;&#13;&#10;        private String fileType;&#13;&#10;        private long fileSize;&#13;&#10;    }&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/client/UserServiceClientFallback.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/client/UserServiceClientFallback.java" />
              <option name="updatedContent" value="package com.ctuconnect.client;&#10;&#10;import com.ctuconnect.dto.AuthorInfo;&#10;import lombok.extern.slf4j.Slf4j;&#10;import org.springframework.stereotype.Component;&#10;&#10;import java.util.HashSet;&#10;import java.util.Set;&#10;&#10;/**&#10; * Fallback implementation for UserServiceClient when user-service is unavailable&#10; * Provides default values to prevent service failures&#10; */&#10;@Component&#10;@Slf4j&#10;public class UserServiceClientFallback implements UserServiceClient {&#10;&#10;    @Override&#10;    public AuthorInfo getAuthorInfo(String authorId) {&#10;        log.warn(&quot;User service unavailable, returning fallback author info for user: {}&quot;, authorId);&#10;        return AuthorInfo.builder()&#10;                .userId(authorId)&#10;                .username(&quot;Unknown User&quot;)&#10;                .fullName(&quot;Unknown User&quot;)&#10;                .avatarUrl(null)&#10;                .isVerified(false)&#10;                .build();&#10;    }&#10;&#10;    @Override&#10;    public Set&lt;String&gt; getFriendIds(String userId) {&#10;        log.warn(&quot;User service unavailable, returning empty friend list for user: {}&quot;, userId);&#10;        return new HashSet&lt;&gt;();&#10;    }&#10;&#10;    @Override&#10;    public Set&lt;String&gt; getCloseInteractionIds(String userId) {&#10;        log.warn(&quot;User service unavailable, returning empty close interactions for user: {}&quot;, userId);&#10;        return new HashSet&lt;&gt;();&#10;    }&#10;&#10;    @Override&#10;    public Set&lt;String&gt; getSameFacultyUserIds(String userId) {&#10;        log.warn(&quot;User service unavailable, returning empty same faculty users for user: {}&quot;, userId);&#10;        return new HashSet&lt;&gt;();&#10;    }&#10;&#10;    @Override&#10;    public Set&lt;String&gt; getSameMajorUserIds(String userId) {&#10;        log.warn(&quot;User service unavailable, returning empty same major users for user: {}&quot;, userId);&#10;        return new HashSet&lt;&gt;();&#10;    }&#10;&#10;    @Override&#10;    public Set&lt;String&gt; getUserInterestTags(String userId) {&#10;        log.warn(&quot;User service unavailable, returning empty interest tags for user: {}&quot;, userId);&#10;        return new HashSet&lt;&gt;();&#10;    }&#10;&#10;    @Override&#10;    public Set&lt;String&gt; getUserPreferredCategories(String userId) {&#10;        log.warn(&quot;User service unavailable, returning empty preferred categories for user: {}&quot;, userId);&#10;        return new HashSet&lt;&gt;();&#10;    }&#10;&#10;    @Override&#10;    public String getUserFacultyId(String userId) {&#10;        log.warn(&quot;User service unavailable, returning null faculty ID for user: {}&quot;, userId);&#10;        return null;&#10;    }&#10;&#10;    @Override&#10;    public String getUserMajorId(String userId) {&#10;        log.warn(&quot;User service unavailable, returning null major ID for user: {}&quot;, userId);&#10;        return null;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/config/CacheConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/config/CacheConfig.java" />
              <option name="updatedContent" value="package com.ctuconnect.config;&#10;&#10;import org.springframework.beans.factory.annotation.Value;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.data.redis.connection.RedisConnectionFactory;&#10;import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;&#10;import org.springframework.data.redis.core.RedisTemplate;&#10;import org.springframework.data.redis.serializer.GenericJackson2JsonRedisSerializer;&#10;import org.springframework.data.redis.serializer.StringRedisSerializer;&#10;&#10;@Configuration&#10;public class CacheConfig {&#10;&#10;    @Value(&quot;${spring.data.redis.host:localhost}&quot;)&#10;    private String redisHost;&#10;&#10;    @Value(&quot;${spring.data.redis.port:6379}&quot;)&#10;    private int redisPort;&#10;&#10;    @Bean&#10;    public RedisConnectionFactory redisConnectionFactory() {&#10;        return new LettuceConnectionFactory(redisHost, redisPort);&#10;    }&#10;&#10;    @Bean&#10;    public RedisTemplate&lt;String, Object&gt; redisTemplate(RedisConnectionFactory connectionFactory) {&#10;        RedisTemplate&lt;String, Object&gt; template = new RedisTemplate&lt;&gt;();&#10;        template.setConnectionFactory(connectionFactory);&#10;        &#10;        // Use String serializer for keys&#10;        template.setKeySerializer(new StringRedisSerializer());&#10;        template.setHashKeySerializer(new StringRedisSerializer());&#10;        &#10;        // Use JSON serializer for values&#10;        template.setValueSerializer(new GenericJackson2JsonRedisSerializer());&#10;        template.setHashValueSerializer(new GenericJackson2JsonRedisSerializer());&#10;        &#10;        template.afterPropertiesSet();&#10;        return template;&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/config/FeignConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/config/FeignConfig.java" />
              <option name="updatedContent" value="package com.ctuconnect.config;&#10;&#10;import feign.Logger;&#10;import feign.Request;&#10;import feign.Retryer;&#10;import feign.codec.ErrorDecoder;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;&#10;import java.util.concurrent.TimeUnit;&#10;&#10;/**&#10; * Feign client configuration for better error handling and retry mechanism&#10; */&#10;@Configuration&#10;public class FeignConfig {&#10;&#10;    @Bean&#10;    Logger.Level feignLoggerLevel() {&#10;        return Logger.Level.BASIC;&#10;    }&#10;&#10;    @Bean&#10;    public Request.Options requestOptions() {&#10;        return new Request.Options(&#10;                10, TimeUnit.SECONDS, // connect timeout&#10;                60, TimeUnit.SECONDS, // read timeout&#10;                true // follow redirects&#10;        );&#10;    }&#10;&#10;    @Bean&#10;    public Retryer retryer() {&#10;        return new Retryer.Default(&#10;                1000, // initial interval&#10;                3000, // max interval&#10;                3     // max attempts&#10;        );&#10;    }&#10;&#10;    @Bean&#10;    public ErrorDecoder errorDecoder() {&#10;        return new CustomFeignErrorDecoder();&#10;    }&#10;&#10;    /**&#10;     * Custom error decoder to handle service communication errors gracefully&#10;     */&#10;    public static class CustomFeignErrorDecoder implements ErrorDecoder {&#10;        &#10;        @Override&#10;        public Exception decode(String methodKey, feign.Response response) {&#10;            switch (response.status()) {&#10;                case 400:&#10;                    return new IllegalArgumentException(&quot;Bad Request: &quot; + methodKey);&#10;                case 404:&#10;                    return new RuntimeException(&quot;Service not found: &quot; + methodKey);&#10;                case 500:&#10;                    return new RuntimeException(&quot;Internal Server Error in &quot; + methodKey);&#10;                case 503:&#10;                    return new RuntimeException(&quot;Service Unavailable: &quot; + methodKey);&#10;                default:&#10;                    return new RuntimeException(&quot;Unknown error occurred in &quot; + methodKey + &quot;: &quot; + response.status());&#10;            }&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/config/HealthCheckConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/config/HealthCheckConfig.java" />
              <option name="updatedContent" value="package com.ctuconnect.config;&#10;&#10;import org.springframework.boot.actuator.health.Health;&#10;import org.springframework.boot.actuator.health.HealthIndicator;&#10;import org.springframework.context.annotation.Bean;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.data.redis.connection.RedisConnectionFactory;&#10;import org.springframework.data.mongodb.core.MongoTemplate;&#10;&#10;@Configuration&#10;public class HealthCheckConfig {&#10;    &#10;    @Bean&#10;    public HealthIndicator redisHealthIndicator(RedisConnectionFactory redisConnectionFactory) {&#10;        return () -&gt; {&#10;            try {&#10;                redisConnectionFactory.getConnection().ping();&#10;                return Health.up()&#10;                    .withDetail(&quot;redis&quot;, &quot;Available&quot;)&#10;                    .build();&#10;            } catch (Exception e) {&#10;                return Health.down()&#10;                    .withDetail(&quot;redis&quot;, &quot;Unavailable&quot;)&#10;                    .withDetail(&quot;error&quot;, e.getMessage())&#10;                    .build();&#10;            }&#10;        };&#10;    }&#10;    &#10;    @Bean&#10;    public HealthIndicator mongoHealthIndicator(MongoTemplate mongoTemplate) {&#10;        return () -&gt; {&#10;            try {&#10;                mongoTemplate.getCollection(&quot;health_check&quot;).countDocuments();&#10;                return Health.up()&#10;                    .withDetail(&quot;mongodb&quot;, &quot;Available&quot;)&#10;                    .build();&#10;            } catch (Exception e) {&#10;                return Health.down()&#10;                    .withDetail(&quot;mongodb&quot;, &quot;Unavailable&quot;)&#10;                    .withDetail(&quot;error&quot;, e.getMessage())&#10;                    .build();&#10;            }&#10;        };&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/config/WebConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/config/WebConfig.java" />
              <option name="updatedContent" value="package com.ctuconnect.config;&#10;&#10;import com.ctuconnect.security.AuthenticationInterceptor;&#10;import lombok.RequiredArgsConstructor;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.web.servlet.config.annotation.InterceptorRegistry;&#10;import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;&#10;&#10;/**&#10; * Web configuration to register security interceptors&#10; */&#10;@Configuration&#10;@RequiredArgsConstructor&#10;public class WebConfig implements WebMvcConfigurer {&#10;&#10;    private final AuthenticationInterceptor authenticationInterceptor;&#10;&#10;    @Override&#10;    public void addInterceptors(InterceptorRegistry registry) {&#10;        registry.addInterceptor(authenticationInterceptor)&#10;                .addPathPatterns(&quot;/api/**&quot;) // Apply to all API endpoints&#10;                .excludePathPatterns(&#10;                        &quot;/api/posts/health&quot;,&#10;                        &quot;/api/posts/actuator/**&quot;,&#10;                        &quot;/api/posts/swagger-ui/**&quot;,&#10;                        &quot;/api/posts/v3/api-docs/**&quot;&#10;                );&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/config/WebSocketConfig.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/config/WebSocketConfig.java" />
              <option name="updatedContent" value="package com.ctuconnect.config;&#10;&#10;import org.springframework.context.annotation.Configuration;&#10;import org.springframework.messaging.simp.config.MessageBrokerRegistry;&#10;import org.springframework.web.socket.config.annotation.EnableWebSocketMessageBroker;&#10;import org.springframework.web.socket.config.annotation.StompEndpointRegistry;&#10;import org.springframework.web.socket.config.annotation.WebSocketMessageBrokerConfigurer;&#10;&#10;@Configuration&#10;@EnableWebSocketMessageBroker&#10;public class WebSocketConfig implements WebSocketMessageBrokerConfigurer {&#10;&#10;    @Override&#10;    public void configureMessageBroker(MessageBrokerRegistry config) {&#10;        // Enable simple message broker for in-memory message handling&#10;        config.enableSimpleBroker(&quot;/topic&quot;, &quot;/queue&quot;);&#10;        config.setApplicationDestinationPrefixes(&quot;/app&quot;);&#10;        config.setUserDestinationPrefix(&quot;/user&quot;);&#10;    }&#10;&#10;    @Override&#10;    public void registerStompEndpoints(StompEndpointRegistry registry) {&#10;        // Register STOMP endpoints for WebSocket connections&#10;        registry.addEndpoint(&quot;/ws&quot;)&#10;                .setAllowedOriginPatterns(&quot;*&quot;)&#10;                .withSockJS();&#10;        &#10;        registry.addEndpoint(&quot;/ws-notifications&quot;)&#10;                .setAllowedOriginPatterns(&quot;*&quot;)&#10;                .withSockJS();&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/controller/EnhancedPostController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/controller/EnhancedPostController.java" />
              <option name="updatedContent" value="// This file has been merged into PostController.java&#10;// Delete this file to avoid conflicts" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/repository/CommentRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/repository/CommentRepository.java" />
              <option name="originalContent" value="package com.ctuconnect.repository;&#10;&#10;import org.springframework.data.domain.Page;&#10;import org.springframework.data.domain.Pageable;&#10;import org.springframework.data.mongodb.repository.MongoRepository;&#10;import org.springframework.data.mongodb.repository.Query;&#10;import org.springframework.stereotype.Repository;&#10;import com.ctuconnect.entity.CommentEntity;&#10;&#10;import java.util.List;&#10;&#10;@Repository&#10;public interface CommentRepository extends MongoRepository&lt;CommentEntity, String&gt; {&#10;&#10;    Page&lt;CommentEntity&gt; findByPostId(String postId, Pageable pageable);&#10;&#10;    List&lt;CommentEntity&gt; findByPostIdAndParentCommentIdIsNull(String postId);&#10;&#10;    List&lt;CommentEntity&gt; findByParentCommentId(String parentCommentId);&#10;&#10;    long countByPostId(String postId);&#10;&#10;    // Fix: Use MongoDB query for nested author object&#10;    @Query(value = &quot;{ 'author.id': ?0 }&quot;, count = true)&#10;    long countByAuthor_Id(String authorId);&#10;&#10;    void deleteByPostId(String postId);&#10;&#10;    // Additional useful queries for nested author structure&#10;    @Query(&quot;{ 'author.id': ?0 }&quot;)&#10;    Page&lt;CommentEntity&gt; findByAuthor_Id(String authorId, Pageable pageable);&#10;&#10;    // Add method that AdminController is calling (without underscore)&#10;    @Query(value = &quot;{ 'author.id': ?0 }&quot;, count = true)&#10;    long countByAuthorId(String authorId);&#10;}&#10;" />
              <option name="updatedContent" value="package com.ctuconnect.repository;&#13;&#10;&#13;&#10;import org.springframework.data.domain.Page;&#13;&#10;import org.springframework.data.domain.Pageable;&#13;&#10;import org.springframework.data.mongodb.repository.MongoRepository;&#13;&#10;import org.springframework.data.mongodb.repository.Query;&#13;&#10;import org.springframework.stereotype.Repository;&#13;&#10;import com.ctuconnect.entity.CommentEntity;&#13;&#10;&#13;&#10;import java.util.List;&#13;&#10;&#13;&#10;@Repository&#13;&#10;public interface CommentRepository extends MongoRepository&lt;CommentEntity, String&gt; {&#13;&#10;&#13;&#10;    Page&lt;CommentEntity&gt; findByPostId(String postId, Pageable pageable);&#13;&#10;&#13;&#10;    List&lt;CommentEntity&gt; findByPostIdAndParentCommentIdIsNull(String postId);&#13;&#10;&#13;&#10;    List&lt;CommentEntity&gt; findByParentCommentId(String parentCommentId);&#13;&#10;&#13;&#10;    long countByPostId(String postId);&#13;&#10;&#13;&#10;    // Fix: Use MongoDB query for nested author object&#13;&#10;    @Query(value = &quot;{ 'author.id': ?0 }&quot;, count = true)&#13;&#10;    long countByAuthor_Id(String authorId);&#13;&#10;&#13;&#10;    void deleteByPostId(String postId);&#13;&#10;&#13;&#10;    // Additional useful queries for nested author structure&#13;&#10;    @Query(&quot;{ 'author.id': ?0 }&quot;)&#13;&#10;    Page&lt;CommentEntity&gt; findByAuthor_Id(String authorId, Pageable pageable);&#13;&#10;&#13;&#10;    // Add method that AdminController is calling (without underscore)&#13;&#10;    @Query(value = &quot;{ 'author.id': ?0 }&quot;, count = true)&#13;&#10;    long countByAuthorId(String authorId);&#13;&#10;&#13;&#10;    // Method for user profile synchronization - find all comments by author ID&#13;&#10;    @Query(&quot;{ 'author.id': ?0 }&quot;)&#13;&#10;    List&lt;CommentEntity&gt; findByAuthor_Id(String authorId);&#13;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/service/UserServiceClient.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/java/com/ctuconnect/service/UserServiceClient.java" />
              <option name="updatedContent" value="package com.ctuconnect.service;&#10;&#10;import org.springframework.cloud.openfeign.FeignClient;&#10;import org.springframework.web.bind.annotation.GetMapping;&#10;import org.springframework.web.bind.annotation.PathVariable;&#10;&#10;import java.util.Set;&#10;&#10;@FeignClient(name = &quot;user-service&quot;, url = &quot;${user-service.url:http://user-service:8081}&quot;)&#10;public interface UserServiceClient {&#10;    &#10;    @GetMapping(&quot;/api/users/{userId}/friends/ids&quot;)&#10;    Set&lt;String&gt; getFriendIds(@PathVariable String userId);&#10;    &#10;    @GetMapping(&quot;/api/users/{userId}/close-interactions&quot;)&#10;    Set&lt;String&gt; getCloseInteractionIds(@PathVariable String userId);&#10;    &#10;    @GetMapping(&quot;/api/users/{userId}/same-faculty&quot;)&#10;    Set&lt;String&gt; getSameFacultyUserIds(@PathVariable String userId);&#10;    &#10;    @GetMapping(&quot;/api/users/{userId}/same-major&quot;)&#10;    Set&lt;String&gt; getSameMajorUserIds(@PathVariable String userId);&#10;    &#10;    @GetMapping(&quot;/api/users/{userId}/interest-tags&quot;)&#10;    Set&lt;String&gt; getUserInterestTags(@PathVariable String userId);&#10;    &#10;    @GetMapping(&quot;/api/users/{userId}/preferred-categories&quot;)&#10;    Set&lt;String&gt; getUserPreferredCategories(@PathVariable String userId);&#10;    &#10;    @GetMapping(&quot;/api/users/{userId}/faculty-id&quot;)&#10;    String getUserFacultyId(@PathVariable String userId);&#10;    &#10;    @GetMapping(&quot;/api/users/{userId}/major-id&quot;)&#10;    String getUserMajorId(@PathVariable String userId);&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/resources/application-docker.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/resources/application-docker.properties" />
              <option name="originalContent" value="# Docker-specific configuration for post-service&#10;spring.application.name=post-service&#10;server.port=8085&#10;&#10;# MongoDB Configuration - Docker service name&#10;spring.data.mongodb.database=post_db&#10;spring.data.mongodb.host=post_db&#10;spring.data.mongodb.port=27017&#10;&#10;# Redis Configuration - Docker service name&#10;spring.data.redis.host=redis&#10;spring.data.redis.port=6379&#10;spring.data.redis.timeout=60000ms&#10;spring.data.redis.lettuce.pool.max-active=8&#10;spring.data.redis.lettuce.pool.max-idle=8&#10;spring.data.redis.lettuce.pool.min-idle=0&#10;&#10;# Kafka Configuration - Docker service name&#10;spring.kafka.bootstrap-servers=kafka:9092&#10;spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer&#10;spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer&#10;&#10;spring.kafka.consumer.group-id=post-service-group&#10;spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer&#10;spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer&#10;spring.kafka.consumer.properties.spring.json.trusted.packages=*&#10;spring.kafka.consumer.auto-offset-reset=earliest&#10;spring.kafka.consumer.enable-auto-commit=true&#10;&#10;# Eureka Configuration - Docker service name&#10;eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/&#10;eureka.instance.prefer-ip-address=true&#10;eureka.instance.instance-id=${spring.application.name}:${server.port}&#10;&#10;# Media Service Configuration - Docker service name&#10;media-service.url=http://media-service:8084&#10;&#10;# File Upload Configuration&#10;spring.servlet.multipart.max-file-size=10MB&#10;spring.servlet.multipart.max-request-size=50MB&#10;&#10;# Actuator Configuration&#10;management.endpoints.web.exposure.include=health,info,metrics&#10;management.endpoint.health.show-details=always&#10;&#10;# Logging Configuration&#10;logging.level.com.ctuconnect=DEBUG&#10;logging.level.org.springframework.kafka=INFO&#10;logging.level.org.springframework.data.mongodb=INFO&#10;" />
              <option name="updatedContent" value="# Docker-specific configuration for post-service&#13;&#10;spring.application.name=post-service&#13;&#10;server.port=8085&#13;&#10;&#13;&#10;# MongoDB Configuration - Docker service name&#13;&#10;spring.data.mongodb.database=post_db&#13;&#10;spring.data.mongodb.host=post_db&#13;&#10;spring.data.mongodb.port=27017&#13;&#10;&#13;&#10;# Redis Configuration - Docker service name&#13;&#10;spring.data.redis.host=redis&#13;&#10;spring.data.redis.port=6379&#13;&#10;spring.data.redis.timeout=60000ms&#13;&#10;spring.data.redis.lettuce.pool.max-active=8&#13;&#10;spring.data.redis.lettuce.pool.min-idle=0&#13;&#10;&#13;&#10;# Kafka Configuration - Docker service name&#13;&#10;spring.kafka.bootstrap-servers=kafka:9092&#13;&#10;spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer&#13;&#10;spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer&#13;&#10;&#13;&#10;spring.kafka.consumer.group-id=post-service-group&#13;&#10;spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer&#13;&#10;spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer&#13;&#10;spring.kafka.consumer.properties.spring.json.trusted.packages=*&#13;&#10;spring.kafka.consumer.auto-offset-reset=earliest&#13;&#10;spring.kafka.consumer.enable-auto-commit=true&#13;&#10;&#13;&#10;# Eureka Configuration - Docker service name&#13;&#10;eureka.client.service-url.defaultZone=http://eureka-server:8761/eureka/&#13;&#10;eureka.instance.prefer-ip-address=true&#13;&#10;eureka.instance.instance-id=${spring.application.name}:${server.port}&#13;&#10;&#13;&#10;# User Service Configuration - Docker service name&#13;&#10;user-service.url=http://user-service:8081&#13;&#10;&#13;&#10;# Media Service Configuration - Docker service name&#13;&#10;media-service.url=http://media-service:8084&#13;&#10;&#13;&#10;# Feign Configuration&#13;&#10;feign.client.config.default.connect-timeout=10000&#13;&#10;feign.client.config.default.read-timeout=10000&#13;&#10;feign.client.config.default.logger-level=basic&#13;&#10;&#13;&#10;# File Upload Configuration&#13;&#10;spring.servlet.multipart.max-file-size=10MB&#13;&#10;spring.servlet.multipart.max-request-size=50MB&#13;&#10;&#13;&#10;# Actuator Configuration&#13;&#10;management.endpoints.web.exposure.include=health,info,metrics&#13;&#10;management.endpoint.health.show-details=always&#13;&#10;&#13;&#10;# Logging Configuration&#13;&#10;logging.level.com.ctuconnect=DEBUG&#13;&#10;logging.level.org.springframework.kafka=INFO&#13;&#10;logging.level.org.springframework.data.mongodb=INFO" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/post-service/src/main/resources/application.properties">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/post-service/src/main/resources/application.properties" />
              <option name="originalContent" value="spring.application.name=post-service&#10;server.port=8085&#10;&#10;# MongoDB Configuration&#10;spring.data.mongodb.database=post_db&#10;spring.data.mongodb.host=localhost&#10;spring.data.mongodb.port=27018&#10;&#10;# Kafka Configuration&#10;spring.kafka.bootstrap-servers=localhost:9092&#10;spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer&#10;spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer&#10;&#10;# Kafka Consumer Configuration - Fix missing group-id error&#10;spring.kafka.consumer.group-id=post-service-group&#10;spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer&#10;spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer&#10;spring.kafka.consumer.properties.spring.json.trusted.packages=*&#10;spring.kafka.consumer.auto-offset-reset=earliest&#10;spring.kafka.consumer.enable-auto-commit=true&#10;&#10;# Eureka Configuration&#10;eureka.client.service-url.defaultZone=http://localhost:8761/eureka/&#10;eureka.instance.prefer-ip-address=true&#10;eureka.instance.instance-id=${spring.application.name}:${server.port}&#10;&#10;# Redis Configuration - Fix for Docker container networking&#10;spring.data.redis.host=redis&#10;spring.data.redis.port=6379&#10;spring.data.redis.timeout=60000ms&#10;spring.data.redis.lettuce.pool.max-active=8&#10;spring.data.redis.lettuce.pool.max-idle=8&#10;spring.data.redis.lettuce.pool.min-idle=0&#10;&#10;# Media Service Configuration&#10;media-service.url=http://localhost:8084&#10;&#10;# File Upload Configuration&#10;spring.servlet.multipart.max-file-size=10MB&#10;spring.servlet.multipart.max-request-size=50MB&#10;&#10;# Actuator Configuration&#10;management.endpoints.web.exposure.include=health,info,metrics&#10;management.endpoint.health.show-details=always&#10;&#10;# Logging Configuration&#10;logging.level.vn.ctu.edu.postservice=DEBUG&#10;logging.level.org.springframework.kafka=INFO&#10;logging.level.org.springframework.data.mongodb=INFO&#10;" />
              <option name="updatedContent" value="spring.application.name=post-service&#10;server.port=8085&#10;&#10;# MongoDB Configuration&#10;spring.data.mongodb.database=post_db&#10;spring.data.mongodb.host=localhost&#10;spring.data.mongodb.port=27018&#10;&#10;# Kafka Configuration&#10;spring.kafka.bootstrap-servers=localhost:9092&#10;spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer&#10;spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer&#10;&#10;# Kafka Consumer Configuration - Fix missing group-id error&#10;spring.kafka.consumer.group-id=post-service-group&#10;spring.kafka.consumer.key-deserializer=org.apache.kafka.common.serialization.StringDeserializer&#10;spring.kafka.consumer.value-deserializer=org.springframework.kafka.support.serializer.JsonDeserializer&#10;spring.kafka.consumer.properties.spring.json.trusted.packages=*&#10;spring.kafka.consumer.auto-offset-reset=earliest&#10;spring.kafka.consumer.enable-auto-commit=true&#10;&#10;# Eureka Configuration&#10;eureka.client.service-url.defaultZone=http://localhost:8761/eureka/&#10;eureka.instance.prefer-ip-address=true&#10;eureka.instance.instance-id=${spring.application.name}:${server.port}&#10;&#10;# Redis Configuration - Fix for Docker container networking&#10;spring.data.redis.host=redis&#10;spring.data.redis.port=6379&#10;spring.data.redis.timeout=60000ms&#10;spring.data.redis.lettuce.pool.max-active=8&#10;spring.data.redis.lettuce.pool.max-idle=8&#10;spring.data.redis.lettuce.pool.min-idle=0&#10;&#10;# User Service Configuration&#10;user-service.url=http://localhost:8081&#10;&#10;# Media Service Configuration&#10;media-service.url=http://localhost:8084&#10;&#10;# Feign Configuration&#10;feign.client.config.default.connect-timeout=5000&#10;feign.client.config.default.read-timeout=5000&#10;feign.client.config.default.logger-level=basic&#10;&#10;# File Upload Configuration&#10;spring.servlet.multipart.max-file-size=10MB&#10;spring.servlet.multipart.max-request-size=50MB&#10;&#10;# Actuator Configuration&#10;management.endpoints.web.exposure.include=health,info,metrics&#10;management.endpoint.health.show-details=always&#10;&#10;# Logging Configuration&#10;logging.level.vn.ctu.edu.postservice=DEBUG&#10;logging.level.org.springframework.kafka=INFO&#10;logging.level.org.springframework.data.mongodb=INFO" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/ctuconnect/controller/UserSyncController.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/ctuconnect/controller/UserSyncController.java" />
              <option name="originalContent" value="package com.ctuconnect.controller;&#10;&#10;import com.ctuconnect.dto.AuthorDTO;&#10;import com.ctuconnect.dto.UserDTO;&#10;import com.ctuconnect.security.annotation.RequireAuth;&#10;import com.ctuconnect.service.UserSyncService;&#10;import com.ctuconnect.service.UserService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.Set;&#10;&#10;/**&#10; * Controller để xử lý đồng bộ dữ liệu giữa auth-db và user-db&#10; * Các endpoint này được gọi từ auth-service hoặc các microservices khác&#10; */&#10;@RestController&#10;@RequestMapping(&quot;/api/users/sync&quot;)&#10;public class UserSyncController {&#10;&#10;    @Autowired&#10;    private UserSyncService userSyncService;&#10;&#10;    @Autowired&#10;    private UserService userService;&#10;&#10;    /**&#10;     * Tạo user profile trong user-db khi user được tạo ở auth-db&#10;     * Endpoint này được gọi từ auth-service&#10;     */&#10;    @PostMapping(&quot;/create&quot;)&#10;    @RequireAuth(roles = {&quot;SYSTEM&quot;, &quot;ADMIN&quot;}) // Chỉ system hoặc admin mới có thể gọi&#10;    public ResponseEntity&lt;UserDTO&gt; syncUserFromAuth(&#10;            @RequestParam String userId,&#10;            @RequestParam String email,&#10;            @RequestParam String role) {&#10;        UserDTO userDTO = userSyncService.syncUserFromAuth(userId, email, role);&#10;        return ResponseEntity.ok(userDTO);&#10;    }&#10;&#10;    /**&#10;     * Cập nhật thông tin user khi có thay đổi từ auth-db&#10;     */&#10;    @PutMapping(&quot;/update&quot;)&#10;    @RequireAuth(roles = {&quot;SYSTEM&quot;, &quot;ADMIN&quot;})&#10;    public ResponseEntity&lt;UserDTO&gt; updateUserFromAuth(&#10;            @RequestParam String userId,&#10;            @RequestParam String email,&#10;            @RequestParam String role) {&#10;        UserDTO userDTO = userSyncService.updateUserFromAuth(userId, email, role);&#10;        return ResponseEntity.ok(userDTO);&#10;    }&#10;&#10;    /**&#10;     * Xóa user khỏi user-db khi user bị xóa ở auth-db&#10;     */&#10;    @DeleteMapping(&quot;/delete&quot;)&#10;    @RequireAuth(roles = {&quot;SYSTEM&quot;, &quot;ADMIN&quot;})&#10;    public ResponseEntity&lt;String&gt; deleteUserFromAuth(@RequestParam String userId) {&#10;        userSyncService.deleteUserFromAuth(userId);&#10;        return ResponseEntity.ok(&quot;User deleted from user database successfully&quot;);&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra tính nhất quán dữ liệu giữa auth-db và user-db&#10;     */&#10;    @GetMapping(&quot;/check&quot;)&#10;    @RequireAuth(roles = {&quot;SYSTEM&quot;, &quot;ADMIN&quot;})&#10;    public ResponseEntity&lt;Boolean&gt; checkUserSync(&#10;            @RequestParam String userId,&#10;            @RequestParam String email,&#10;            @RequestParam String role) {&#10;        boolean isSynced = userSyncService.isUserSynced(userId, email, role);&#10;        return ResponseEntity.ok(isSynced);&#10;    }&#10;&#10;    /**&#10;     * Lấy thông tin tác giả cho post-service&#10;     * Endpoint này được gọi từ post-service để lấy author info&#10;     */&#10;    @GetMapping(&quot;/authors/{id}&quot;)&#10;    public ResponseEntity&lt;AuthorDTO&gt; getAuthorInfo(@PathVariable(&quot;id&quot;) String authorId) {&#10;        AuthorDTO authorInfo = userSyncService.getAuthorInfo(authorId);&#10;        return ResponseEntity.ok(authorInfo);&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách ID bạn bè của user&#10;     * Endpoint này được gọi từ post-service cho news feed algorithm&#10;     */&#10;    @GetMapping(&quot;/{userId}/friends/ids&quot;)&#10;    public ResponseEntity&lt;Set&lt;String&gt;&gt; getFriendIds(@PathVariable(&quot;userId&quot;) String userId) {&#10;        Set&lt;String&gt; friendIds = userService.getFriendIds(userId);&#10;        return ResponseEntity.ok(friendIds);&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách user có tương tác gần với user&#10;     * Endpoint này được gọi từ post-service cho news feed algorithm&#10;     */&#10;    @GetMapping(&quot;/{userId}/close-interactions&quot;)&#10;    public ResponseEntity&lt;Set&lt;String&gt;&gt; getCloseInteractionIds(@PathVariable(&quot;userId&quot;) String userId) {&#10;        Set&lt;String&gt; closeInteractionIds = userService.getCloseInteractionIds(userId);&#10;        return ResponseEntity.ok(closeInteractionIds);&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách user cùng khoa&#10;     * Endpoint này được gọi từ post-service cho news feed algorithm&#10;     */&#10;    @GetMapping(&quot;/{userId}/same-faculty&quot;)&#10;    public ResponseEntity&lt;Set&lt;String&gt;&gt; getSameFacultyUserIds(@PathVariable(&quot;userId&quot;) String userId) {&#10;        Set&lt;String&gt; sameFacultyIds = userService.getSameFacultyUserIds(userId);&#10;        return ResponseEntity.ok(sameFacultyIds);&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách user cùng ngành&#10;     * Endpoint này được gọi từ post-service cho news feed algorithm&#10;     */&#10;    @GetMapping(&quot;/{userId}/same-major&quot;)&#10;    public ResponseEntity&lt;Set&lt;String&gt;&gt; getSameMajorUserIds(@PathVariable(&quot;userId&quot;) String userId) {&#10;        Set&lt;String&gt; sameMajorIds = userService.getSameMajorUserIds(userId);&#10;        return ResponseEntity.ok(sameMajorIds);&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách interest tags của user&#10;     * Endpoint này được gọi từ post-service cho content recommendation&#10;     */&#10;    @GetMapping(&quot;/{userId}/interest-tags&quot;)&#10;    public ResponseEntity&lt;Set&lt;String&gt;&gt; getUserInterestTags(@PathVariable(&quot;userId&quot;) String userId) {&#10;        Set&lt;String&gt; interestTags = userService.getUserInterestTags(userId);&#10;        return ResponseEntity.ok(interestTags);&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách preferred categories của user&#10;     * Endpoint này được gọi từ post-service cho content filtering&#10;     */&#10;    @GetMapping(&quot;/{userId}/preferred-categories&quot;)&#10;    public ResponseEntity&lt;Set&lt;String&gt;&gt; getUserPreferredCategories(@PathVariable(&quot;userId&quot;) String userId) {&#10;        Set&lt;String&gt; preferredCategories = userService.getUserPreferredCategories(userId);&#10;        return ResponseEntity.ok(preferredCategories);&#10;    }&#10;&#10;    /**&#10;     * Lấy faculty ID của user&#10;     * Endpoint này được gọi từ post-service cho group filtering&#10;     */&#10;    @GetMapping(&quot;/{userId}/faculty-id&quot;)&#10;    public ResponseEntity&lt;String&gt; getUserFacultyId(@PathVariable(&quot;userId&quot;) String userId) {&#10;        String facultyId = userService.getUserFacultyId(userId);&#10;        return ResponseEntity.ok(facultyId);&#10;    }&#10;&#10;    /**&#10;     * Lấy major ID của user&#10;     * Endpoint này được gọi từ post-service cho group filtering&#10;     */&#10;    @GetMapping(&quot;/{userId}/major-id&quot;)&#10;    public ResponseEntity&lt;String&gt; getUserMajorId(@PathVariable(&quot;userId&quot;) String userId) {&#10;        String majorId = userService.getUserMajorId(userId);&#10;        return ResponseEntity.ok(majorId);&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ctuconnect.controller;&#10;&#10;import com.ctuconnect.dto.AuthorDTO;&#10;import com.ctuconnect.dto.UserDTO;&#10;import com.ctuconnect.security.annotation.RequireAuth;&#10;import com.ctuconnect.service.UserSyncService;&#10;import com.ctuconnect.service.UserService;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.http.ResponseEntity;&#10;import org.springframework.web.bind.annotation.*;&#10;&#10;import java.util.Set;&#10;&#10;/**&#10; * Controller để xử lý đồng bộ dữ liệu giữa auth-db và user-db&#10; * Các endpoint này được gọi từ auth-service hoặc các microservices khác&#10; */&#10;@RestController&#10;@RequestMapping(&quot;/api/users/sync&quot;)&#10;public class UserSyncController {&#10;&#10;    @Autowired&#10;    private UserSyncService userSyncService;&#10;&#10;    @Autowired&#10;    private UserService userService;&#10;&#10;    /**&#10;     * Tạo user profile trong user-db khi user được tạo ở auth-db&#10;     * Endpoint này được gọi từ auth-service&#10;     */&#10;    @PostMapping(&quot;/create&quot;)&#10;    @RequireAuth(roles = {&quot;SYSTEM&quot;, &quot;ADMIN&quot;}) // Chỉ system hoặc admin mới có thể gọi&#10;    public ResponseEntity&lt;UserDTO&gt; syncUserFromAuth(&#10;            @RequestParam String userId,&#10;            @RequestParam String email,&#10;            @RequestParam String role) {&#10;        UserDTO userDTO = userSyncService.syncUserFromAuth(userId, email, role);&#10;        return ResponseEntity.ok(userDTO);&#10;    }&#10;&#10;    /**&#10;     * Cập nhật thông tin user khi có thay đổi từ auth-db&#10;     */&#10;    @PutMapping(&quot;/update&quot;)&#10;    @RequireAuth(roles = {&quot;SYSTEM&quot;, &quot;ADMIN&quot;})&#10;    public ResponseEntity&lt;UserDTO&gt; updateUserFromAuth(&#10;            @RequestParam String userId,&#10;            @RequestParam String email,&#10;            @RequestParam String role) {&#10;        UserDTO userDTO = userSyncService.updateUserFromAuth(userId, email, role);&#10;        return ResponseEntity.ok(userDTO);&#10;    }&#10;&#10;    /**&#10;     * Xóa user khỏi user-db khi user bị xóa ở auth-db&#10;     */&#10;    @DeleteMapping(&quot;/delete&quot;)&#10;    @RequireAuth(roles = {&quot;SYSTEM&quot;, &quot;ADMIN&quot;})&#10;    public ResponseEntity&lt;String&gt; deleteUserFromAuth(@RequestParam String userId) {&#10;        userSyncService.deleteUserFromAuth(userId);&#10;        return ResponseEntity.ok(&quot;User deleted from user database successfully&quot;);&#10;    }&#10;&#10;    /**&#10;     * Kiểm tra tính nhất quán dữ liệu giữa auth-db và user-db&#10;     */&#10;    @GetMapping(&quot;/check&quot;)&#10;    @RequireAuth(roles = {&quot;SYSTEM&quot;, &quot;ADMIN&quot;})&#10;    public ResponseEntity&lt;Boolean&gt; checkUserSync(&#10;            @RequestParam String userId,&#10;            @RequestParam String email,&#10;            @RequestParam String role) {&#10;        boolean isSynced = userSyncService.isUserSynced(userId, email, role);&#10;        return ResponseEntity.ok(isSynced);&#10;    }&#10;&#10;    /**&#10;     * Lấy thông tin tác giả cho post-service&#10;     * Endpoint này được gọi từ post-service để lấy author info&#10;     * Không yêu cầu authentication vì đây là internal service call&#10;     */&#10;    @GetMapping(&quot;/authors/{id}&quot;)&#10;    public ResponseEntity&lt;AuthorDTO&gt; getAuthorInfo(@PathVariable(&quot;id&quot;) String authorId) {&#10;        AuthorDTO authorInfo = userSyncService.getAuthorInfo(authorId);&#10;        return ResponseEntity.ok(authorInfo);&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách ID bạn bè của user&#10;     * Endpoint này được gọi từ post-service cho news feed algorithm&#10;     * Không yêu cầu authentication vì đây là internal service call&#10;     */&#10;    @GetMapping(&quot;/{userId}/friends/ids&quot;)&#10;    public ResponseEntity&lt;Set&lt;String&gt;&gt; getFriendIds(@PathVariable(&quot;userId&quot;) String userId) {&#10;        Set&lt;String&gt; friendIds = userService.getFriendIds(userId);&#10;        return ResponseEntity.ok(friendIds);&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách user có tương tác gần với user&#10;     * Endpoint này được gọi từ post-service cho news feed algorithm&#10;     */&#10;    @GetMapping(&quot;/{userId}/close-interactions&quot;)&#10;    public ResponseEntity&lt;Set&lt;String&gt;&gt; getCloseInteractionIds(@PathVariable(&quot;userId&quot;) String userId) {&#10;        Set&lt;String&gt; closeInteractionIds = userService.getCloseInteractionIds(userId);&#10;        return ResponseEntity.ok(closeInteractionIds);&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách user cùng khoa&#10;     * Endpoint này được gọi từ post-service cho news feed algorithm&#10;     */&#10;    @GetMapping(&quot;/{userId}/same-faculty&quot;)&#10;    public ResponseEntity&lt;Set&lt;String&gt;&gt; getSameFacultyUserIds(@PathVariable(&quot;userId&quot;) String userId) {&#10;        Set&lt;String&gt; sameFacultyIds = userService.getSameFacultyUserIds(userId);&#10;        return ResponseEntity.ok(sameFacultyIds);&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách user cùng ngành&#10;     * Endpoint này được gọi từ post-service cho news feed algorithm&#10;     */&#10;    @GetMapping(&quot;/{userId}/same-major&quot;)&#10;    public ResponseEntity&lt;Set&lt;String&gt;&gt; getSameMajorUserIds(@PathVariable(&quot;userId&quot;) String userId) {&#10;        Set&lt;String&gt; sameMajorIds = userService.getSameMajorUserIds(userId);&#10;        return ResponseEntity.ok(sameMajorIds);&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách interest tags của user&#10;     * Endpoint này được gọi từ post-service cho content recommendation&#10;     */&#10;    @GetMapping(&quot;/{userId}/interest-tags&quot;)&#10;    public ResponseEntity&lt;Set&lt;String&gt;&gt; getUserInterestTags(@PathVariable(&quot;userId&quot;) String userId) {&#10;        Set&lt;String&gt; interestTags = userService.getUserInterestTags(userId);&#10;        return ResponseEntity.ok(interestTags);&#10;    }&#10;&#10;    /**&#10;     * Lấy danh sách preferred categories của user&#10;     * Endpoint này được gọi từ post-service cho content filtering&#10;     */&#10;    @GetMapping(&quot;/{userId}/preferred-categories&quot;)&#10;    public ResponseEntity&lt;Set&lt;String&gt;&gt; getUserPreferredCategories(@PathVariable(&quot;userId&quot;) String userId) {&#10;        Set&lt;String&gt; preferredCategories = userService.getUserPreferredCategories(userId);&#10;        return ResponseEntity.ok(preferredCategories);&#10;    }&#10;&#10;    /**&#10;     * Lấy faculty ID của user&#10;     * Endpoint này được gọi từ post-service cho group filtering&#10;     */&#10;    @GetMapping(&quot;/{userId}/faculty-id&quot;)&#10;    public ResponseEntity&lt;String&gt; getUserFacultyId(@PathVariable(&quot;userId&quot;) String userId) {&#10;        String facultyId = userService.getUserFacultyId(userId);&#10;        return ResponseEntity.ok(facultyId);&#10;    }&#10;&#10;    /**&#10;     * Lấy major ID của user&#10;     * Endpoint này được gọi từ post-service cho group filtering&#10;     */&#10;    @GetMapping(&quot;/{userId}/major-id&quot;)&#10;    public ResponseEntity&lt;String&gt; getUserMajorId(@PathVariable(&quot;userId&quot;) String userId) {&#10;        String majorId = userService.getUserMajorId(userId);&#10;        return ResponseEntity.ok(majorId);&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/ctuconnect/dto/ActivityDTO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/ctuconnect/dto/ActivityDTO.java" />
              <option name="originalContent" value="package com.ctuconnect.dto;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class ActivityDTO {&#10;    private String id;&#10;    private String userId;&#10;    private String activityType; // POST_CREATED, POST_LIKED, COMMENT_ADDED, etc.&#10;    private String targetType; // POST, COMMENT, USER&#10;    private String targetId;&#10;    private String actorName;&#10;    private String actorAvatarUrl;&#10;&#10;    // For activity feed display&#10;    private String displayText;&#10;    private String actionUrl;&#10;    private boolean isRead;&#10;&#10;    public enum ActivityType {&#10;        POST_CREATED,&#10;        POST_LIKED,&#10;        POST_SHARED,&#10;        COMMENT_ADDED,&#10;        FRIEND_REQUEST_SENT,&#10;        FRIEND_REQUEST_ACCEPTED,&#10;        PROFILE_UPDATED&#10;    }&#10;&#10;    public enum TargetType {&#10;        POST,&#10;        COMMENT,&#10;        USER,&#10;        PROFILE&#10;    }&#10;}&#10;" />
              <option name="updatedContent" value="package com.ctuconnect.dto;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;import java.time.LocalDateTime;&#10;&#10;@Data&#10;@Builder&#10;@NoArgsConstructor&#10;@AllArgsConstructor&#10;public class ActivityDTO {&#10;    private String id;&#10;    private String userId;&#10;    private String activityType; // POST_CREATED, POST_LIKED, COMMENT_ADDED, etc.&#10;    private String targetType; // POST, COMMENT, USER&#10;    private String targetId;&#10;    private String entityType; // Add missing entityType field&#10;    private String entityId; // Add missing entityId field&#10;    private String description;&#10;    private LocalDateTime timestamp;&#10;    private String actorName;&#10;    private String actorAvatarUrl;&#10;&#10;    // For activity feed display&#10;    private String displayText;&#10;    private String actionUrl;&#10;    private boolean isRead;&#10;&#10;    public enum ActivityType {&#10;        POST_CREATED,&#10;        POST_LIKED,&#10;        POST_SHARED,&#10;        COMMENT_ADDED,&#10;        FRIEND_REQUEST_SENT,&#10;        FRIEND_REQUEST_ACCEPTED,&#10;        PROFILE_UPDATED&#10;    }&#10;&#10;    public enum TargetType {&#10;        POST,&#10;        COMMENT,&#10;        USER,&#10;        PROFILE&#10;    }&#10;&#10;    public enum EntityType {&#10;        POST,&#10;        COMMENT,&#10;        USER,&#10;        PROFILE&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/ctuconnect/dto/FriendSuggestionDTO.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/ctuconnect/dto/FriendSuggestionDTO.java" />
              <option name="updatedContent" value="package com.ctuconnect.dto;&#10;&#10;import lombok.AllArgsConstructor;&#10;import lombok.Builder;&#10;import lombok.Data;&#10;import lombok.NoArgsConstructor;&#10;&#10;@Data&#10;@AllArgsConstructor&#10;@NoArgsConstructor&#10;@Builder&#10;public class FriendSuggestionDTO {&#10;    private String userId;&#10;    private String username;&#10;    private String fullName;&#10;    private String avatarUrl;&#10;    private String bio;&#10;    &#10;    // Suggestion metadata&#10;    private int mutualFriendsCount;&#10;    private String suggestionReason;&#10;    private double relevanceScore;&#10;    private SuggestionType suggestionType;&#10;    &#10;    // Academic context&#10;    private String facultyName;&#10;    private String majorName;&#10;    private String batchYear;&#10;    &#10;    // Social context&#10;    private boolean sameCollege;&#10;    private boolean sameFaculty;&#10;    private boolean sameMajor;&#10;    private boolean sameBatch;&#10;    &#10;    public enum SuggestionType {&#10;        MUTUAL_FRIENDS,&#10;        ACADEMIC_CONNECTION,&#10;        FRIENDS_OF_FRIENDS,&#10;        PROFILE_VIEWER,&#10;        SIMILAR_INTERESTS,&#10;        LOCATION_BASED,&#10;        ACTIVITY_BASED&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/ctuconnect/event/UserEventPublisher.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/ctuconnect/event/UserEventPublisher.java" />
              <option name="updatedContent" value="package com.ctuconnect.event;&#10;&#10;import org.springframework.beans.factory.annotation.Autowired;&#10;import org.springframework.kafka.core.KafkaTemplate;&#10;import org.springframework.stereotype.Service;&#10;import com.fasterxml.jackson.databind.ObjectMapper;&#10;import lombok.extern.slf4j.Slf4j;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;/**&#10; * Service to publish user profile update events to Kafka&#10; * This notifies other services (like post-service) when user profiles are updated&#10; */&#10;@Service&#10;@Slf4j&#10;public class UserEventPublisher {&#10;&#10;    @Autowired&#10;    private KafkaTemplate&lt;String, String&gt; kafkaTemplate;&#10;&#10;    @Autowired&#10;    private ObjectMapper objectMapper;&#10;&#10;    private static final String USER_PROFILE_UPDATED_TOPIC = &quot;user-profile-updated&quot;;&#10;&#10;    /**&#10;     * Publish user profile update event&#10;     */&#10;    public void publishUserProfileUpdateEvent(String userId, String fullName, String email, String avatarUrl, String role) {&#10;        try {&#10;            Map&lt;String, Object&gt; eventData = new HashMap&lt;&gt;();&#10;            eventData.put(&quot;userId&quot;, userId);&#10;            eventData.put(&quot;fullName&quot;, fullName);&#10;            eventData.put(&quot;email&quot;, email);&#10;            eventData.put(&quot;avatarUrl&quot;, avatarUrl);&#10;            eventData.put(&quot;role&quot;, role);&#10;            eventData.put(&quot;eventType&quot;, &quot;USER_PROFILE_UPDATED&quot;);&#10;            eventData.put(&quot;timestamp&quot;, System.currentTimeMillis());&#10;&#10;            String eventMessage = objectMapper.writeValueAsString(eventData);&#10;            &#10;            kafkaTemplate.send(USER_PROFILE_UPDATED_TOPIC, userId, eventMessage);&#10;            log.info(&quot;Published user profile update event for user: {}&quot;, userId);&#10;            &#10;        } catch (Exception e) {&#10;            log.error(&quot;Failed to publish user profile update event for user {}: {}&quot;, userId, e.getMessage(), e);&#10;        }&#10;    }&#10;&#10;    /**&#10;     * Publish user profile update event with user entity data&#10;     */&#10;    public void publishUserProfileUpdateEvent(String userId, Map&lt;String, Object&gt; userData) {&#10;        try {&#10;            Map&lt;String, Object&gt; eventData = new HashMap&lt;&gt;();&#10;            eventData.put(&quot;userId&quot;, userId);&#10;            eventData.put(&quot;userData&quot;, userData);&#10;            eventData.put(&quot;eventType&quot;, &quot;USER_PROFILE_UPDATED&quot;);&#10;            eventData.put(&quot;timestamp&quot;, System.currentTimeMillis());&#10;&#10;            String eventMessage = objectMapper.writeValueAsString(eventData);&#10;            &#10;            kafkaTemplate.send(USER_PROFILE_UPDATED_TOPIC, userId, eventMessage);&#10;            log.info(&quot;Published user profile update event for user: {}&quot;, userId);&#10;            &#10;        } catch (Exception e) {&#10;            log.error(&quot;Failed to publish user profile update event for user {}: {}&quot;, userId, e.getMessage(), e);&#10;        }&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/user-service/src/main/java/com/ctuconnect/repository/UserRepository.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/user-service/src/main/java/com/ctuconnect/repository/UserRepository.java" />
              <option name="originalContent" value="package com.ctuconnect.repository;&#10;&#10;import com.ctuconnect.entity.FacultyEntity;&#10;import com.ctuconnect.entity.UserEntity;&#10;import org.springframework.data.jpa.repository.Modifying;&#10;import org.springframework.data.neo4j.repository.Neo4jRepository;&#10;import org.springframework.data.neo4j.repository.query.Query;&#10;import org.springframework.data.repository.query.Param;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public interface UserRepository extends Neo4jRepository&lt;UserEntity, String&gt; {&#10;&#10; // Tìm kiếm người dùng bằng email hoặc username&#10; Optional&lt;UserEntity&gt; findByEmail(String email);&#10;&#10; Optional&lt;UserEntity&gt; findByUsername(String username);&#10;&#10; boolean existsByEmail(String email);&#10;&#10; boolean existsByUsername(String username);&#10;&#10; @Query(&quot;MATCH (u:User) WHERE u.email = $identifier OR u.username = $identifier RETURN u&quot;)&#10; Optional&lt;UserEntity&gt; findByEmailOrUsername(@Param(&quot;identifier&quot;) String identifier);&#10;&#10; // Lấy user by id&#10; @Query(&quot;MATCH (u:User {id: $userId}) RETURN u&quot;)&#10; Optional&lt;UserEntity&gt; findUserWithAllRelations(@Param(&quot;userId&quot;) String userId);&#10;&#10; // Xóa quan hệ của profile học sinh (student)&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r]-&gt;()&#10;        WHERE type(r) IN ['ENROLLED_IN', 'WORKS_IN', 'BELONGS_TO', 'IN_BATCH', 'HAS_GENDER']&#10;        DELETE r&#10;        &quot;&quot;&quot;)&#10; void clearStudentRelationships(@Param(&quot;userId&quot;) String userId);&#10;&#10; // Xóa quan hệ của profile giảng viên (lecturer)&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r]-&gt;()&#10;        WHERE type(r) IN ['HAS_DEGREE', 'HAS_ACADEMIC', 'HAS_POSITION', 'WORKS_IN', 'BELONGS_TO', 'HAS_GENDER']&#10;        DELETE r&#10;        &quot;&quot;&quot;)&#10; void clearLecturerRelationships(@Param(&quot;userId&quot;) String userId);&#10;&#10; // Xóa quan hệ cụ thể theo danh sách quan hệ truyền vào&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r]-&gt;()&#10;        WHERE type(r) IN $relationshipTypes&#10;        DELETE r&#10;        &quot;&quot;&quot;)&#10; void clearSpecificRelationships(@Param(&quot;userId&quot;) String userId, @Param(&quot;relationshipTypes&quot;) List&lt;String&gt; relationshipTypes);&#10;&#10; // Xóa quan hệ đơn lẻ theo loại&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})-[r]-&gt;(n)&#10;        WHERE type(r) = $relationshipType&#10;        DELETE r&#10;        &quot;&quot;&quot;)&#10; void deleteRelationship(@Param(&quot;userId&quot;) String userId, @Param(&quot;relationshipType&quot;) String relationshipType);&#10;&#10; // Cập nhật các quan hệ profile&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:ENROLLED_IN]-&gt;()&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newMajor:Major {id: $majorId})&#10;        MERGE (u)-[:ENROLLED_IN]-&gt;(newMajor)&#10;        &quot;&quot;&quot;)&#10; void updateUserMajor(@Param(&quot;userId&quot;) String userId, @Param(&quot;majorId&quot;) String majorId);&#10;&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:IN_BATCH]-&gt;()&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newBatch:Batch {id: $batchId})&#10;        MERGE (u)-[:IN_BATCH]-&gt;(newBatch)&#10;        &quot;&quot;&quot;)&#10; void updateUserBatch(@Param(&quot;userId&quot;) String userId, @Param(&quot;batchId&quot;) String batchId);&#10;&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:HAS_GENDER]-&gt;()&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newGender:Gender {id: $genderId})&#10;        MERGE (u)-[:HAS_GENDER]-&gt;(newGender)&#10;        &quot;&quot;&quot;)&#10; void updateUserGender(@Param(&quot;userId&quot;) String userId, @Param(&quot;genderId&quot;) String genderId);&#10;&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:BELONGS_TO]-&gt;()&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newFaculty:Faculty {id: $facultyId})&#10;        MERGE (u)-[:BELONGS_TO]-&gt;(newFaculty)&#10;        &quot;&quot;&quot;)&#10; void updateUserFaculty(@Param(&quot;userId&quot;) String userId, @Param(&quot;facultyId&quot;) String facultyId);&#10;&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:STUDIES_AT]-&gt;()&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newCollege:College {id: $collegeId})&#10;        MERGE (u)-[:STUDIES_AT]-&gt;(newCollege)&#10;        &quot;&quot;&quot;)&#10; void updateUserCollege(@Param(&quot;userId&quot;) String userId, @Param(&quot;collegeId&quot;) String collegeId);&#10;&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:WORKS_IN]-&gt;()&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newFaculty:Faculty {id: $facultyId})&#10;        MERGE (u)-[:WORKS_IN]-&gt;(newFaculty)&#10;        &quot;&quot;&quot;)&#10; void updateUserWorkingFaculty(@Param(&quot;userId&quot;) String userId, @Param(&quot;facultyId&quot;) String facultyId);&#10;&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:EMPLOYED_AT]-&gt;()&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newCollege:College {id: $collegeId})&#10;        MERGE (u)-[:EMPLOYED_AT]-&gt;(newCollege)&#10;        &quot;&quot;&quot;)&#10; void updateUserWorkingCollege(@Param(&quot;userId&quot;) String userId, @Param(&quot;collegeId&quot;) String collegeId);&#10;&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:HAS_DEGREE]-&gt;()&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newDegree:Degree {id: $degreeId})&#10;        MERGE (u)-[:HAS_DEGREE]-&gt;(newDegree)&#10;        &quot;&quot;&quot;)&#10; void updateUserDegree(@Param(&quot;userId&quot;) String userId, @Param(&quot;degreeId&quot;) String degreeId);&#10;&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:HAS_POSITION]-&gt;()&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newPosition:Position {id: $positionId})&#10;        MERGE (u)-[:HAS_POSITION]-&gt;(newPosition)&#10;        &quot;&quot;&quot;)&#10; void updateUserPosition(@Param(&quot;userId&quot;) String userId, @Param(&quot;positionId&quot;) String positionId);&#10;&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:HAS_ACADEMIC]-&gt;()&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newAcademic:Academic {id: $academicId})&#10;        MERGE (u)-[:HAS_ACADEMIC]-&gt;(newAcademic)&#10;        &quot;&quot;&quot;)&#10; void updateUserAcademic(@Param(&quot;userId&quot;) String userId, @Param(&quot;academicId&quot;) String academicId);&#10;&#10; // ========================= FRIEND RELATIONSHIP QUERIES =========================&#10;&#10; // Kiểm tra xem 2 user có phải bạn bè không&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u1:User {id: $userId1})-[:FRIEND_WITH]-(u2:User {id: $userId2})&#10;        RETURN COUNT(*) &gt; 0&#10;        &quot;&quot;&quot;)&#10; boolean areFriends(@Param(&quot;userId1&quot;) String userId1, @Param(&quot;userId2&quot;) String userId2);&#10;&#10; // Kiểm tra có friend request pending không&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u1:User {id: $fromUserId})-[:FRIEND_REQUEST]-&gt;(u2:User {id: $toUserId})&#10;        RETURN COUNT(*) &gt; 0&#10;        &quot;&quot;&quot;)&#10; boolean hasPendingFriendRequest(@Param(&quot;fromUserId&quot;) String fromUserId, @Param(&quot;toUserId&quot;) String toUserId);&#10;&#10; // Gửi friend request&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u1:User {id: $fromUserId}), (u2:User {id: $toUserId})&#10;        MERGE (u1)-[:FRIEND_REQUEST]-&gt;(u2)&#10;        &quot;&quot;&quot;)&#10; void sendFriendRequest(@Param(&quot;fromUserId&quot;) String fromUserId, @Param(&quot;toUserId&quot;) String toUserId);&#10;&#10; // Chấp nhận friend request&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u1:User {id: $fromUserId})-[r:FRIEND_REQUEST]-&gt;(u2:User {id: $toUserId})&#10;        DELETE r&#10;        CREATE (u1)-[:FRIEND_WITH]-&gt;(u2)&#10;        CREATE (u2)-[:FRIEND_WITH]-&gt;(u1)&#10;        &quot;&quot;&quot;)&#10; void acceptFriendRequest(@Param(&quot;fromUserId&quot;) String fromUserId, @Param(&quot;toUserId&quot;) String toUserId);&#10;&#10; // Từ chối friend request&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u1:User {id: $fromUserId})-[r:FRIEND_REQUEST]-&gt;(u2:User {id: $toUserId})&#10;        DELETE r&#10;        &quot;&quot;&quot;)&#10; void rejectFriendRequest(@Param(&quot;fromUserId&quot;) String fromUserId, @Param(&quot;toUserId&quot;) String toUserId);&#10;&#10; // Xóa friendship&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u1:User {id: $userId1})-[r:FRIEND_WITH]-(u2:User {id: $userId2})&#10;        DELETE r&#10;        &quot;&quot;&quot;)&#10; void deleteFriendship(@Param(&quot;userId1&quot;) String userId1, @Param(&quot;userId2&quot;) String userId2);&#10;&#10; // Lấy danh sách bạn bè&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})-[:FRIEND_WITH]-(friend:User)&#10;        RETURN friend&#10;        &quot;&quot;&quot;)&#10; List&lt;UserEntity&gt; findFriends(@Param(&quot;userId&quot;) String userId);&#10;&#10; // Lấy friend requests nhận được&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (requester:User)-[:FRIEND_REQUEST]-&gt;(u:User {id: $userId})&#10;        RETURN requester&#10;        &quot;&quot;&quot;)&#10; List&lt;UserEntity&gt; findIncomingFriendRequests(@Param(&quot;userId&quot;) String userId);&#10;&#10; // Lấy friend requests đã gửi&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})-[:FRIEND_REQUEST]-&gt;(receiver:User)&#10;        RETURN receiver&#10;        &quot;&quot;&quot;)&#10; List&lt;UserEntity&gt; findOutgoingFriendRequests(@Param(&quot;userId&quot;) String userId);&#10;&#10; // Lấy bạn chung giữa 2 user&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u1:User {id: $userId1})-[:FRIEND_WITH]-(mutual:User)-[:FRIEND_WITH]-(u2:User {id: $userId2})&#10;        RETURN mutual&#10;        &quot;&quot;&quot;)&#10; List&lt;UserEntity&gt; findMutualFriends(@Param(&quot;userId1&quot;) String userId1, @Param(&quot;userId2&quot;) String userId2);&#10;&#10; // Gợi ý kết bạn dựa trên bạn chung và profile tương tự&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        MATCH (u)-[:FRIEND_WITH]-(friend)-[:FRIEND_WITH]-(suggestion:User)&#10;        WHERE NOT (u)-[:FRIEND_WITH]-(suggestion) AND u.id &lt;&gt; suggestion.id&#10;        AND NOT (u)-[:FRIEND_REQUEST]-(suggestion)&#10;        RETURN suggestion, COUNT(*) as mutualFriends&#10;        ORDER BY mutualFriends DESC&#10;        LIMIT 20&#10;        &quot;&quot;&quot;)&#10; List&lt;UserEntity&gt; findFriendSuggestions(@Param(&quot;userId&quot;) String userId);&#10;&#10; // Lọc user theo tiêu chí (cùng college, faculty, major, batch)&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[:STUDIES_AT|EMPLOYED_AT]-&gt;(college:College)&#10;        OPTIONAL MATCH (u)-[:BELONGS_TO|WORKS_IN]-&gt;(faculty:Faculty)&#10;        OPTIONAL MATCH (u)-[:ENROLLED_IN]-&gt;(major:Major)&#10;        OPTIONAL MATCH (u)-[:IN_BATCH]-&gt;(batch:Batch)&#10;        &#10;        MATCH (candidate:User)&#10;        WHERE candidate.id &lt;&gt; $userId&#10;        AND (NOT $sameCollege OR (candidate)-[:STUDIES_AT|EMPLOYED_AT]-&gt;(college))&#10;        AND (NOT $sameFaculty OR (candidate)-[:BELONGS_TO|WORKS_IN]-&gt;(faculty))&#10;        AND (NOT $sameMajor OR (candidate)-[:ENROLLED_IN]-&gt;(major))&#10;        AND (NOT $sameBatch OR (candidate)-[:IN_BATCH]-&gt;(batch))&#10;        &#10;        RETURN candidate&#10;        &quot;&quot;&quot;)&#10; List&lt;UserEntity&gt; findUsersWithFilters(&#10;         @Param(&quot;userId&quot;) String userId,&#10;         @Param(&quot;sameCollege&quot;) boolean sameCollege,&#10;         @Param(&quot;sameFaculty&quot;) boolean sameFaculty,&#10;         @Param(&quot;sameMajor&quot;) boolean sameMajor,&#10;         @Param(&quot;sameBatch&quot;) boolean sameBatch&#10; );&#10;&#10; /**&#10;  * Find users by faculty ID (for post-service news feed algorithm)&#10;  */&#10; @Query(&quot;MATCH (u:User)-[:WORKS_IN|BELONGS_TO]-&gt;(f:Faculty {id: $facultyId}) RETURN u&quot;)&#10; List&lt;UserEntity&gt; findUsersByFaculty(@Param(&quot;facultyId&quot;) String facultyId);&#10;&#10; /**&#10;  * Find users by major ID (for post-service news feed algorithm)&#10;  */&#10; @Query(&quot;MATCH (u:User)-[:ENROLLED_IN]-&gt;(m:Major {id: $majorId}) RETURN u&quot;)&#10; List&lt;UserEntity&gt; findUsersByMajor(@Param(&quot;majorId&quot;) String majorId);&#10;&#10; /**&#10;  * Find users by full name containing (for search functionality)&#10;  * Uses case-insensitive search with Neo4j CONTAINS operator&#10;  */&#10; @Query(&quot;MATCH (u:User) WHERE toLower(u.fullName) CONTAINS toLower($name) RETURN u&quot;)&#10; List&lt;UserEntity&gt; findByFullNameContainingIgnoreCase(@Param(&quot;name&quot;) String name);&#10;&#10;&#10; List&lt;UserEntity&gt; findByFacultyId(String facultyId);&#10;&#10; List&lt;UserEntity&gt; findByMajorId(String majorId);&#10;}&#10;" />
              <option name="updatedContent" value="package com.ctuconnect.repository;&#10;&#10;import com.ctuconnect.entity.FacultyEntity;&#10;import com.ctuconnect.entity.UserEntity;&#10;import org.springframework.data.jpa.repository.Modifying;&#10;import org.springframework.data.neo4j.repository.Neo4jRepository;&#10;import org.springframework.data.neo4j.repository.query.Query;&#10;import org.springframework.data.repository.query.Param;&#10;&#10;import java.util.List;&#10;import java.util.Optional;&#10;&#10;public interface UserRepository extends Neo4jRepository&lt;UserEntity, String&gt; {&#10;&#10; // Tìm kiếm người dùng bằng email hoặc username&#10; Optional&lt;UserEntity&gt; findByEmail(String email);&#10;&#10; Optional&lt;UserEntity&gt; findByUsername(String username);&#10;&#10; boolean existsByEmail(String email);&#10;&#10; boolean existsByUsername(String username);&#10;&#10; @Query(&quot;MATCH (u:User) WHERE u.email = $identifier OR u.username = $identifier RETURN u&quot;)&#10; Optional&lt;UserEntity&gt; findByEmailOrUsername(@Param(&quot;identifier&quot;) String identifier);&#10;&#10; // Lấy user by id&#10; @Query(&quot;MATCH (u:User {id: $userId}) RETURN u&quot;)&#10; Optional&lt;UserEntity&gt; findUserWithAllRelations(@Param(&quot;userId&quot;) String userId);&#10;&#10; // Xóa quan hệ của profile học sinh (student)&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r]-&gt;()&#10;        WHERE type(r) IN ['ENROLLED_IN', 'WORKS_IN', 'BELONGS_TO', 'IN_BATCH', 'HAS_GENDER']&#10;        DELETE r&#10;        &quot;&quot;&quot;)&#10; void clearStudentRelationships(@Param(&quot;userId&quot;) String userId);&#10;&#10; // Xóa quan hệ của profile giảng viên (lecturer)&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r]-&gt;()&#10;        WHERE type(r) IN ['HAS_DEGREE', 'HAS_ACADEMIC', 'HAS_POSITION', 'WORKS_IN', 'BELONGS_TO', 'HAS_GENDER']&#10;        DELETE r&#10;        &quot;&quot;&quot;)&#10; void clearLecturerRelationships(@Param(&quot;userId&quot;) String userId);&#10;&#10; // Xóa quan hệ cụ thể theo danh sách quan hệ truyền vào&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r]-&gt;()&#10;        WHERE type(r) IN $relationshipTypes&#10;        DELETE r&#10;        &quot;&quot;&quot;)&#10; void clearSpecificRelationships(@Param(&quot;userId&quot;) String userId, @Param(&quot;relationshipTypes&quot;) List&lt;String&gt; relationshipTypes);&#10;&#10; // Xóa quan hệ đơn lẻ theo loại&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})-[r]-&gt;(n)&#10;        WHERE type(r) = $relationshipType&#10;        DELETE r&#10;        &quot;&quot;&quot;)&#10; void deleteRelationship(@Param(&quot;userId&quot;) String userId, @Param(&quot;relationshipType&quot;) String relationshipType);&#10;&#10; // Cập nhật các quan hệ profile&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:ENROLLED_IN]-&gt;()&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newMajor:Major {id: $majorId})&#10;        MERGE (u)-[:ENROLLED_IN]-&gt;(newMajor)&#10;        &quot;&quot;&quot;)&#10; void updateUserMajor(@Param(&quot;userId&quot;) String userId, @Param(&quot;majorId&quot;) String majorId);&#10;&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:IN_BATCH]-&gt;()&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newBatch:Batch {id: $batchId})&#10;        MERGE (u)-[:IN_BATCH]-&gt;(newBatch)&#10;        &quot;&quot;&quot;)&#10; void updateUserBatch(@Param(&quot;userId&quot;) String userId, @Param(&quot;batchId&quot;) String batchId);&#10;&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:HAS_GENDER]-&gt;()&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newGender:Gender {id: $genderId})&#10;        MERGE (u)-[:HAS_GENDER]-&gt;(newGender)&#10;        &quot;&quot;&quot;)&#10; void updateUserGender(@Param(&quot;userId&quot;) String userId, @Param(&quot;genderId&quot;) String genderId);&#10;&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:BELONGS_TO]-&gt;()&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newFaculty:Faculty {id: $facultyId})&#10;        MERGE (u)-[:BELONGS_TO]-&gt;(newFaculty)&#10;        &quot;&quot;&quot;)&#10; void updateUserFaculty(@Param(&quot;userId&quot;) String userId, @Param(&quot;facultyId&quot;) String facultyId);&#10;&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:STUDIES_AT]-&gt;()&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newCollege:College {id: $collegeId})&#10;        MERGE (u)-[:STUDIES_AT]-&gt;(newCollege)&#10;        &quot;&quot;&quot;)&#10; void updateUserCollege(@Param(&quot;userId&quot;) String userId, @Param(&quot;collegeId&quot;) String collegeId);&#10;&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:WORKS_IN]-&gt;()&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newFaculty:Faculty {id: $facultyId})&#10;        MERGE (u)-[:WORKS_IN]-&gt;(newFaculty)&#10;        &quot;&quot;&quot;)&#10; void updateUserWorkingFaculty(@Param(&quot;userId&quot;) String userId, @Param(&quot;facultyId&quot;) String facultyId);&#10;&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:EMPLOYED_AT]-&gt;()&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newCollege:College {id: $collegeId})&#10;        MERGE (u)-[:EMPLOYED_AT]-&gt;(newCollege)&#10;        &quot;&quot;&quot;)&#10; void updateUserWorkingCollege(@Param(&quot;userId&quot;) String userId, @Param(&quot;collegeId&quot;) String collegeId);&#10;&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:HAS_DEGREE]-&gt;()&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newDegree:Degree {id: $degreeId})&#10;        MERGE (u)-[:HAS_DEGREE]-&gt;(newDegree)&#10;        &quot;&quot;&quot;)&#10; void updateUserDegree(@Param(&quot;userId&quot;) String userId, @Param(&quot;degreeId&quot;) String degreeId);&#10;&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:HAS_POSITION]-&gt;()&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newPosition:Position {id: $positionId})&#10;        MERGE (u)-[:HAS_POSITION]-&gt;(newPosition)&#10;        &quot;&quot;&quot;)&#10; void updateUserPosition(@Param(&quot;userId&quot;) String userId, @Param(&quot;positionId&quot;) String positionId);&#10;&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[r:HAS_ACADEMIC]-&gt;()&#10;        DELETE r&#10;        WITH u&#10;        MATCH (newAcademic:Academic {id: $academicId})&#10;        MERGE (u)-[:HAS_ACADEMIC]-&gt;(newAcademic)&#10;        &quot;&quot;&quot;)&#10; void updateUserAcademic(@Param(&quot;userId&quot;) String userId, @Param(&quot;academicId&quot;) String academicId);&#10;&#10; // ========================= FRIEND RELATIONSHIP QUERIES =========================&#10;&#10; // Kiểm tra xem 2 user có phải bạn bè không&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u1:User {id: $userId1})-[:FRIEND_WITH]-(u2:User {id: $userId2})&#10;        RETURN COUNT(*) &gt; 0&#10;        &quot;&quot;&quot;)&#10; boolean areFriends(@Param(&quot;userId1&quot;) String userId1, @Param(&quot;userId2&quot;) String userId2);&#10;&#10; // Kiểm tra có friend request pending không&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u1:User {id: $fromUserId})-[:FRIEND_REQUEST]-&gt;(u2:User {id: $toUserId})&#10;        RETURN COUNT(*) &gt; 0&#10;        &quot;&quot;&quot;)&#10; boolean hasPendingFriendRequest(@Param(&quot;fromUserId&quot;) String fromUserId, @Param(&quot;toUserId&quot;) String toUserId);&#10;&#10; // Gửi friend request&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u1:User {id: $fromUserId}), (u2:User {id: $toUserId})&#10;        MERGE (u1)-[:FRIEND_REQUEST]-&gt;(u2)&#10;        &quot;&quot;&quot;)&#10; void sendFriendRequest(@Param(&quot;fromUserId&quot;) String fromUserId, @Param(&quot;toUserId&quot;) String toUserId);&#10;&#10; // Chấp nhận friend request&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u1:User {id: $fromUserId})-[r:FRIEND_REQUEST]-&gt;(u2:User {id: $toUserId})&#10;        DELETE r&#10;        CREATE (u1)-[:FRIEND_WITH]-&gt;(u2)&#10;        CREATE (u2)-[:FRIEND_WITH]-&gt;(u1)&#10;        &quot;&quot;&quot;)&#10; void acceptFriendRequest(@Param(&quot;fromUserId&quot;) String fromUserId, @Param(&quot;toUserId&quot;) String toUserId);&#10;&#10; // Từ chối friend request&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u1:User {id: $fromUserId})-[r:FRIEND_REQUEST]-&gt;(u2:User {id: $toUserId})&#10;        DELETE r&#10;        &quot;&quot;&quot;)&#10; void rejectFriendRequest(@Param(&quot;fromUserId&quot;) String fromUserId, @Param(&quot;toUserId&quot;) String toUserId);&#10;&#10; // Xóa friendship&#10; @Modifying&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u1:User {id: $userId1})-[r:FRIEND_WITH]-(u2:User {id: $userId2})&#10;        DELETE r&#10;        &quot;&quot;&quot;)&#10; void deleteFriendship(@Param(&quot;userId1&quot;) String userId1, @Param(&quot;userId2&quot;) String userId2);&#10;&#10; // Lấy danh sách bạn bè&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})-[:FRIEND_WITH]-(friend:User)&#10;        RETURN friend&#10;        &quot;&quot;&quot;)&#10; List&lt;UserEntity&gt; findFriends(@Param(&quot;userId&quot;) String userId);&#10;&#10; // Lấy friend requests nhận được&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (requester:User)-[:FRIEND_REQUEST]-&gt;(u:User {id: $userId})&#10;        RETURN requester&#10;        &quot;&quot;&quot;)&#10; List&lt;UserEntity&gt; findIncomingFriendRequests(@Param(&quot;userId&quot;) String userId);&#10;&#10; // Lấy friend requests đã gửi&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})-[:FRIEND_REQUEST]-&gt;(receiver:User)&#10;        RETURN receiver&#10;        &quot;&quot;&quot;)&#10; List&lt;UserEntity&gt; findOutgoingFriendRequests(@Param(&quot;userId&quot;) String userId);&#10;&#10; // Lấy bạn chung giữa 2 user&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u1:User {id: $userId1})-[:FRIEND_WITH]-(mutual:User)-[:FRIEND_WITH]-(u2:User {id: $userId2})&#10;        RETURN mutual&#10;        &quot;&quot;&quot;)&#10; List&lt;UserEntity&gt; findMutualFriends(@Param(&quot;userId1&quot;) String userId1, @Param(&quot;userId2&quot;) String userId2);&#10;&#10; // Gợi ý kết bạn dựa trên bạn chung và profile tương tự&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        MATCH (u)-[:FRIEND_WITH]-(friend)-[:FRIEND_WITH]-(suggestion:User)&#10;        WHERE NOT (u)-[:FRIEND_WITH]-(suggestion) AND u.id &lt;&gt; suggestion.id&#10;        AND NOT (u)-[:FRIEND_REQUEST]-(suggestion)&#10;        RETURN suggestion, COUNT(*) as mutualFriends&#10;        ORDER BY mutualFriends DESC&#10;        LIMIT 20&#10;        &quot;&quot;&quot;)&#10; List&lt;UserEntity&gt; findFriendSuggestions(@Param(&quot;userId&quot;) String userId);&#10;&#10; // Lọc user theo tiêu chí (cùng college, faculty, major, batch)&#10; @Query(&quot;&quot;&quot;&#10;        MATCH (u:User {id: $userId})&#10;        OPTIONAL MATCH (u)-[:STUDIES_AT|EMPLOYED_AT]-&gt;(college:College)&#10;        OPTIONAL MATCH (u)-[:BELONGS_TO|WORKS_IN]-&gt;(faculty:Faculty)&#10;        OPTIONAL MATCH (u)-[:ENROLLED_IN]-&gt;(major:Major)&#10;        OPTIONAL MATCH (u)-[:IN_BATCH]-&gt;(batch:Batch)&#10;        &#10;        MATCH (candidate:User)&#10;        WHERE candidate.id &lt;&gt; $userId&#10;        AND (NOT $sameCollege OR (candidate)-[:STUDIES_AT|EMPLOYED_AT]-&gt;(college))&#10;        AND (NOT $sameFaculty OR (candidate)-[:BELONGS_TO|WORKS_IN]-&gt;(faculty))&#10;        AND (NOT $sameMajor OR (candidate)-[:ENROLLED_IN]-&gt;(major))&#10;        AND (NOT $sameBatch OR (candidate)-[:IN_BATCH]-&gt;(batch))&#10;        &#10;        RETURN candidate&#10;        &quot;&quot;&quot;)&#10; List&lt;UserEntity&gt; findUsersWithFilters(&#10;         @Param(&quot;userId&quot;) String userId,&#10;         @Param(&quot;sameCollege&quot;) boolean sameCollege,&#10;         @Param(&quot;sameFaculty&quot;) boolean sameFaculty,&#10;         @Param(&quot;sameMajor&quot;) boolean sameMajor,&#10;         @Param(&quot;sameBatch&quot;) boolean sameBatch&#10; );&#10;&#10; /**&#10;  * Find users by faculty ID (for post-service news feed algorithm)&#10;  */&#10; @Query(&quot;MATCH (u:User)-[:WORKS_IN|BELONGS_TO]-&gt;(f:Faculty {id: $facultyId}) RETURN u&quot;)&#10; List&lt;UserEntity&gt; findUsersByFacultyId(@Param(&quot;facultyId&quot;) String facultyId);&#10;&#10; /**&#10;  * Find users by major ID (for post-service news feed algorithm)&#10;  */&#10; @Query(&quot;MATCH (u:User)-[:ENROLLED_IN]-&gt;(m:Major {id: $majorId}) RETURN u&quot;)&#10; List&lt;UserEntity&gt; findUsersByMajorId(@Param(&quot;majorId&quot;) String majorId);&#10;&#10; /**&#10;  * Find users by full name containing (for search functionality)&#10;  * Uses case-insensitive search with Neo4j CONTAINS operator&#10;  */&#10; @Query(&quot;MATCH (u:User) WHERE toLower(u.fullName) CONTAINS toLower($fullName) RETURN u&quot;)&#10; List&lt;UserEntity&gt; findByFullNameContainingIgnoreCase(@Param(&quot;fullName&quot;) String fullName);&#10;&#10; /**&#10;  * Find users by faculty name (for search functionality)&#10;  */&#10; @Query(&quot;MATCH (u:User)-[:BELONGS_TO|WORKS_IN]-&gt;(f:Faculty {name: $facultyName}) RETURN u&quot;)&#10; List&lt;UserEntity&gt; findUsersByFaculty(@Param(&quot;facultyName&quot;) String facultyName);&#10;&#10; /**&#10;  * Find users by major name (for search functionality)&#10;  */&#10; @Query(&quot;MATCH (u:User)-[:ENROLLED_IN]-&gt;(m:Major {name: $majorName}) RETURN u&quot;)&#10; List&lt;UserEntity&gt; findUsersByMajor(@Param(&quot;majorName&quot;) String majorName);&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>